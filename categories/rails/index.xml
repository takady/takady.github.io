<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rails on Yuichi Takada</title>
    <link>https://blog.takady.net/categories/rails/</link>
    <description>Recent content in rails on Yuichi Takada</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; Copyright Yuichi Takada</copyright>
    <lastBuildDate>Tue, 21 Feb 2017 23:07:09 +0000</lastBuildDate><atom:link href="https://blog.takady.net/categories/rails/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Travis CI で mini_racer と mysql を使うビルドが失敗する</title>
      <link>https://blog.takady.net/blog/2017/02/21/install-mini-racer-on-travis-ci/</link>
      <pubDate>Tue, 21 Feb 2017 23:07:09 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2017/02/21/install-mini-racer-on-travis-ci/</guid>
      <description>rails プロジェクトの CI に Travis CI を利用しているが、ある日 mini_racer を Gemfile に追加してビルドを試みたところ、bundle install で Gem::Ext::BuildError: ERROR: Failed to build gem native extension. なエラーが出てしまった</description>
    </item>
    
    <item>
      <title>rails のログを fluentd で slack に通知する</title>
      <link>https://blog.takady.net/blog/2017/02/19/fluentd-send-error-to-slack/</link>
      <pubDate>Sun, 19 Feb 2017 18:58:24 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2017/02/19/fluentd-send-error-to-slack/</guid>
      <description>Ubuntu に td-agent 入れて Slack に rails アプリのエラーを通知するようにしたときの備忘録。 td-agent インストール td-agent のインストールは下記に書いてある通り。 Installing Fluentd Using deb Package | Fluentd Ubuntu 16.04 な</description>
    </item>
    
    <item>
      <title>rails の validation error message の i18n 対応</title>
      <link>https://blog.takady.net/blog/2016/12/09/rails-validation-error-message-i18n/</link>
      <pubDate>Fri, 09 Dec 2016 21:20:43 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2016/12/09/rails-validation-error-message-i18n/</guid>
      <description>rails で Custom validatior や Custom validation method を定義して、その中で errors.add する際に、 message として使われる I18n のパスをどう書くのが良いのかっていうのが気になった。 結論としては、下記のよ</description>
    </item>
    
    <item>
      <title>rails で FormObject を使う</title>
      <link>https://blog.takady.net/blog/2016/08/29/rails-form-object/</link>
      <pubDate>Mon, 29 Aug 2016 19:38:49 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2016/08/29/rails-form-object/</guid>
      <description>フォームでは日付の期間を入力し、それを日単位のレコードに保存するようなケースでは、FormObject を使えるかも。やってみた。 こういうフォ</description>
    </item>
    
    <item>
      <title>rails で /users/:id ではなく /:username な routing にする方法</title>
      <link>https://blog.takady.net/blog/2015/11/29/rails-routing-with-username-instead-of-id/</link>
      <pubDate>Sun, 29 Nov 2015 23:06:56 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2015/11/29/rails-routing-with-username-instead-of-id/</guid>
      <description>rails で普通に scaffold すると id が URL に入って example.com/users/:id となる。 これを twitter.com/takady7 とか github.com/takady みたいにしたい時がある。 実現には 2 通りの方法があると思われる。 to_param を使う方法 activerecord に to_param とい</description>
    </item>
    
    <item>
      <title>development環境だけbefore_actionをスキップする</title>
      <link>https://blog.takady.net/blog/2014/12/03/skip-before-action-on-development-env/</link>
      <pubDate>Wed, 03 Dec 2014 21:02:25 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2014/12/03/skip-before-action-on-development-env/</guid>
      <description>最近railsでapi開発をしていて、もちろんテストコード書いてるんだけど、 たまにブラウザからGETリクエスト送ってサクッとjsonの中を見</description>
    </item>
    
    <item>
      <title>railsでmysqlのbooleanなカラムをエイリアスで扱う時の注意事</title>
      <link>https://blog.takady.net/blog/2014/12/02/rails-mysql-boolean/</link>
      <pubDate>Tue, 02 Dec 2014 18:07:11 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2014/12/02/rails-mysql-boolean/</guid>
      <description>rails+mysqlな環境では、booleanで定義したカラムはtinyint(1)で作られ、中身はtrue/falseではなく、0/1が</description>
    </item>
    
    <item>
      <title>railsで、複数の出力先にlogを出力する</title>
      <link>https://blog.takady.net/blog/2014/11/21/rails-logger-broadcast/</link>
      <pubDate>Fri, 21 Nov 2014 18:57:07 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2014/11/21/rails-logger-broadcast/</guid>
      <description>railsアプリケーションで、error以上のレベルのログだけ、２箇所にログを出力したいと思った。 前提 ruby 2.1.2 rails 4.1.4 方法 まず、複数の出力先にロギン</description>
    </item>
    
  </channel>
</rss>
