<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yuichi Takada]]></title>
  <link href="http://blog.takady.net/atom.xml" rel="self"/>
  <link href="http://blog.takady.net/"/>
  <updated>2017-02-11T16:50:05+09:00</updated>
  <id>http://blog.takady.net/</id>
  <author>
    <name><![CDATA[Yuichi Takada]]></name>
    <email><![CDATA[takadyuichi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Let's Encrypt と Nginx で HTTPS 対応]]></title>
    <link href="http://blog.takady.net/blog/2017/02/11/lets-encrypt-with-nginx/"/>
    <updated>2017-02-11T15:53:29+09:00</updated>
    <id>http://blog.takady.net/blog/2017/02/11/lets-encrypt-with-nginx</id>
    <content type="html"><![CDATA[<p>個人的に作ってるサイトを HTTPS 対応させてみた。<br/>
iptable ではまって2時間くらいかかってしまったけども、想像より手軽にできた。</p>

<h2>Let&rsquo;s Encrypt</h2>

<p><a href="https://letsencrypt.jp/">https://letsencrypt.jp/</a></p>

<p>無料で証明書を用意できるので今回利用した。</p>

<p>curl で実行ファイルを取ってきて、適切にオプションを付けて実行すると、対話形式にていくつかの確認に応え、証明書が作成される。<br/>
以下、実行例。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo certbot-auto certonly --webroot -w /path/to/app/current/public -d example.com --email your_email@example.com</span></code></pre></td></tr></table></div></figure>


<p>webroot に指定したパスの下にファイルが置かれ、そこに対してリクエストを送って確認しているみたいなので、アクセスできるようにしておく必要がある。</p>

<p>これで <code>/etc/letsencrypt/live/example.com/</code> 以下に、証明書や秘密鍵が配置されるので(実際にはこれはシンボリックリンクなのだが)、これらのファイルを Nginx の設定で指定する。</p>

<h2>iptables</h2>

<p><code>/etc/sysconfig/iptables</code> を見て、80 と同様に 443 も許可されている事を確認しておく。<br/>
されてない場合は追加することになるのだけど、このファイル直接編集は推奨されていないらしいので iptables コマンドで追加する。<br/>
<code>sudo /sbin/iptables -L</code> で設定を確認できる。最後に <code>iptables save</code> するのを忘れずに。<br/>
あとは iptables を再起動すると反映されるはず。</p>

<h2>Nginx</h2>

<p>実際の Nginx の設定は下記のようにした。<br/>
http のリクエストは https にリダイレクトさせるようにした。<br/>
（unicorn を使ってるのでその記述があるが今回の件には直接関係無い。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">upstream</span> <span class="s">unicorn</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">server</span> <span class="s">unix:/path/to/app/current/tmp/sockets/unicorn.sock</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">server</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">return</span> <span class="mi">301</span> <span class="s">https://</span><span class="nv">$host$request_uri</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">server</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">listen</span> <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">server_name</span> <span class="s">example.com</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">ssl</span> <span class="no">on</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">ssl_certificate</span> <span class="s">/etc/letsencrypt/live/example.com/fullchain.pem</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">ssl_certificate_key</span> <span class="s">/etc/letsencrypt/live/example.com/privkey.pem</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">ssl_protocols</span> <span class="s">TLSv1</span> <span class="s">TLSv1.1</span> <span class="s">TLSv1.2</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">ssl_prefer_server_ciphers</span> <span class="no">on</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">ssl_ciphers</span> <span class="s">&quot;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">access_log</span> <span class="s">/var/log/nginx/example.com.access.log</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">root</span> <span class="s">/path/to/app/current/public</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">try_files</span> <span class="nv">$uri</span> <span class="s">@unicorn</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">location</span> <span class="p">~</span> <span class="sr">^/assets/</span> <span class="p">{</span>
</span><span class='line'>        <span class="kn">root</span> <span class="s">/path/to/app/shared/public</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">location</span> <span class="s">@unicorn</span> <span class="p">{</span>
</span><span class='line'>        <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-Host</span> <span class="nv">$host</span><span class="p">;</span>
</span><span class='line'>        <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-Server</span> <span class="nv">$host</span><span class="p">;</span>
</span><span class='line'>        <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class='line'>        <span class="kn">proxy_pass</span> <span class="s">http://unicorn</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">location</span> <span class="s">/robots.txt</span> <span class="p">{</span>
</span><span class='line'>        <span class="kn">alias</span> <span class="s">/path/to/app/current/public/robots.txt</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>SSL LABS</h2>

<p><a href="https://www.ssllabs.com/ssltest/">https://www.ssllabs.com/ssltest/</a></p>

<p>SSL の設定確認できるサイト。<br/>
以下のようになればうまくいっている。</p>

<p><img src="http://blog.takady.net/images/2017-02-11-lets-encrypt-with-nginx/screenshot.png" width="600" alt="" /></p>

<h2>参考</h2>

<ul>
<li><a href="https://programming.wikihub.io/@r7kamura/20160702202711">Let&rsquo;s EncryptとAmazon LinuxとNginxでamakan.netをHTTPSに対応させた - Programming</a></li>
<li><a href="http://nobuneko.com/blog/archives/2013/05/linux_centos_6_iptables_http_https.html">Linux(CentOS 6) - iptablesの設定を変更し、http、httpsでのアクセスを許可する - r_nobuホームページ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016年まとめ]]></title>
    <link href="http://blog.takady.net/blog/2016/12/31/2016-summary/"/>
    <updated>2016-12-31T13:10:16+09:00</updated>
    <id>http://blog.takady.net/blog/2016/12/31/2016-summary</id>
    <content type="html"><![CDATA[<p>自分用今年のまとめ。</p>

<h2>英語</h2>

<p>自分の中で英語をやる機運が高まってきたので勉強始めた。</p>

<ul>
<li>夏あたりからオンライン英会話を週1,2回ペースでやって、オンサイトの英会話に週1ペースで行ってる。

<ul>
<li>自然言語の習得は毎日継続するのが良いらしいので毎日やるような習慣にしたい。</li>
</ul>
</li>
<li>あとはamazonで買った<a href="https://www.amazon.co.jp/gp/product/0521734770/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=0521734770&amp;linkCode=as2&amp;tag=takadayuichi-22">英語圏の小学生用のテキスト</a>をやってる。</li>
</ul>


<h2>発表</h2>

<ul>
<li>7月の頭に1回だけ、その時会社でやってたログ収集の基盤とre:dashについて社外でLTした。

<ul>
<li>もっと発表していく予定だったけど、その後業務でやることが変わったりしてその余裕とかネタが取れなかった。</li>
</ul>
</li>
</ul>


<h2>業務</h2>

<ul>
<li>前半は去年の続きをやっていた感じだった。</li>
<li>後半は KPI 基盤のリプレースのプロジェクトのメインメンバーとして進めて、そのあと方針変更により別プロジェクトのメンバーになった。</li>
<li>12月には事業の開発チームに異動することとなった。

<ul>
<li>動きがあった方が学びは多いと思うが、やってる途中で止めないといけない事もあったりするのでそこの割り切りが必要になった。</li>
</ul>
</li>
</ul>


<h2>読書</h2>

<p>5月に Kindle Paperwhite 買ったらめっちゃ読書体験が良くなって以前より本が読みやすくなった。<br/>
会社の技術書購入支援制度があるのもあって、読む本には困らなかった。</p>

<ul>
<li><a href="https://www.amazon.co.jp/gp/product/4798121967/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4798121967&amp;linkCode=as2&amp;tag=takadayuichi-22">エリック・エヴァンスのドメイン駆動設計 (IT Architects’Archive ソフトウェア開発の実践) </a></li>
<li><a href="https://www.amazon.co.jp/gp/product/4797376279/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4797376279&amp;linkCode=as2&amp;tag=takadayuichi-22">10年戦えるデータ分析入門 SQLを武器にデータ活用時代を生き抜く (Informatics &amp;IDEA) </a></li>
<li><a href="https://www.amazon.co.jp/gp/product/4822284654/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4822284654&amp;linkCode=as2&amp;tag=takadayuichi-22">オブジェクト指向でなぜつくるのか 第2版</a></li>
<li><a href="https://www.amazon.co.jp/gp/product/B00I96CJWO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00I96CJWO&amp;linkCode=as2&amp;tag=takadayuichi-22">ピープルウエア　第3版</a></li>
<li><a href="https://www.amazon.co.jp/gp/product/B01GDS0994/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B01GDS0994&amp;linkCode=as2&amp;tag=takadayuichi-22">SOFT SKILLS　ソフトウェア開発者の人生マニュアル</a></li>
<li><a href="https://www.amazon.co.jp/gp/product/B015DRJF8W/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B015DRJF8W&amp;linkCode=as2&amp;tag=takadayuichi-22">日本人の働き方の9割がヤバい件について</a></li>
<li><a href="https://www.amazon.co.jp/gp/product/B00HOTLXKQ/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00HOTLXKQ&amp;linkCode=as2&amp;tag=takadayuichi-22">10年後の仕事のカタチ10のヒント</a></li>
<li><a href="https://www.amazon.co.jp/gp/product/4860641345/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4860641345&amp;linkCode=as2&amp;tag=takadayuichi-22">どんどん話すための瞬間英作文トレーニング</a></li>
<li><a href="https://www.amazon.co.jp/gp/product/4274217620/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4274217620&amp;linkCode=as2&amp;tag=takadayuichi-22">エクストリームプログラミング</a></li>
<li><a href="https://www.amazon.co.jp/gp/product/B01D2UKPFE/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B01D2UKPFE&amp;linkCode=as2&amp;tag=takadayuichi-22">Android実践プログラミング 現場で生まれた設計パターン</a></li>
<li><a href="https://www.amazon.co.jp/gp/product/479813161X/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=479813161X&amp;linkCode=as2&amp;tag=takadayuichi-22">実践ドメイン駆動設計 (Object Oriented SELECTION) </a></li>
<li><a href="https://www.amazon.co.jp/gp/product/B01L8SEVYI/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B01L8SEVYI&amp;linkCode=as2&amp;tag=takadayuichi-22">オブジェクト指向設計実践ガイド ～Rubyでわかる 進化しつづける柔軟なアプリケーションの育て方</a></li>
<li><a href="https://www.amazon.co.jp/gp/product/4873117437/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4873117437&amp;linkCode=as2&amp;tag=takadayuichi-22">メタプログラミングRuby 第2版</a></li>
<li><a href="https://leanpub.com/everydayrailsrspec-jp">Everyday Rails - RSpecによるRailsテスト入門</a></li>
<li><a href="https://www.amazon.co.jp/gp/product/4163902309/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4163902309&amp;linkCode=as2&amp;tag=takadayuichi-22">火花</a></li>
</ul>


<h2>isucon</h2>

<ul>
<li>今年も<a href="http://blog.takady.net/blog/2016/09/21/isucon6-qualifier/">予選落ち</a>した。来年こそなんとかしたい。</li>
<li>日頃から web アプリケーションに関する技術的な知見を積み重ねていきたい。</li>
</ul>


<h2>個人的な技術的興味</h2>

<ul>
<li>Android アプリ開発について勉強しようと思って、アプリを作ってみたりしてた。

<ul>
<li>軽くしかできてないのでもうちょっと深くやりたい。</li>
</ul>
</li>
<li>js というか React を触ってた。</li>
</ul>


<h2>その他</h2>

<ul>
<li>メインのエディタを sublime text から RubyMine に完全に移行した。</li>
<li>プライベートのメールクライアントを gmail から inbox に移行した。</li>
<li>シンガポール、オランダ、ドイツに旅行に行った。

<ul>
<li>楽しかったからまた海外旅行行きたい。</li>
</ul>
</li>
</ul>


<h2>まとめ</h2>

<p>年初にやってたこととかについては「これも今年だったか」と思うくらいに過去な感じがする。<br/>
来年の前半はアルゴリズムとデータ構造とかそういう基本的なところをちゃんと学び直したい。<br/>
あと英語が面白くなってきたから引き続きやっていこう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails の validation error message の i18n 対応]]></title>
    <link href="http://blog.takady.net/blog/2016/12/09/rails-validation-error-message-i18n/"/>
    <updated>2016-12-09T21:20:43+09:00</updated>
    <id>http://blog.takady.net/blog/2016/12/09/rails-validation-error-message-i18n</id>
    <content type="html"><![CDATA[<p>rails で Custom validatior や Custom validation method を定義して、その中で <code>errors.add</code> する際に、
message として使われる I18n のパスをどう書くのが良いのかっていうのが気になった。<br/>
結論としては、下記のように書くのがスッキリして良さそう。</p>

<h2>Custom Validators</h2>

<p>特定のモデルによらないエラーメッセージの場合は、下記のように <code>locales/en.yml</code> を書くことで、<code>record.errors.add(attribute, :something_invalid)</code>と書ける。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">en</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">errors</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">messages</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">something_invalid</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Invalid something.</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyCheckValidator</span> <span class="o">&lt;</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">EachValidator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">validate_each</span><span class="p">(</span><span class="n">record</span><span class="p">,</span> <span class="n">attribute</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="k">unless</span> <span class="n">check_something</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>      <span class="n">record</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="ss">:something_invalid</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">#=&gt; record.errors.add(attribute, I18n.t(&#39;errors.messages.something_invalid&#39;)) と同じ</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">check_something</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>   <span class="c1"># Something</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyModel</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">my_check</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Custom Methods</h2>

<p>特定のモデルの特定の項目のエラーメッセージの場合は、下記のようにymlを書くことで、適切にメッセージを参照してくれる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">en</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">activerecord</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">errors</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">models</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">my_model</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">attributes</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">start_date</span><span class="p-Indicator">:</span>
</span><span class='line'>              <span class="l-Scalar-Plain">cannot_be_after_end_date</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">It cannot be after the end date.</span>
</span><span class='line'>            <span class="l-Scalar-Plain">end_date</span><span class="p-Indicator">:</span>
</span><span class='line'>              <span class="l-Scalar-Plain">cannot_be_before_start_date</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">It cannot be before the start date.</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyModel</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">validate</span> <span class="ss">:start_date_cannot_be_after_end_date</span><span class="p">,</span> <span class="k">if</span><span class="p">:</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">start_date</span><span class="o">.</span><span class="n">present?</span> <span class="o">&amp;&amp;</span> <span class="n">end_date</span><span class="o">.</span><span class="n">present?</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">start_date_cannot_be_after_end_date</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">if</span> <span class="n">start_date</span> <span class="o">&lt;=</span> <span class="n">end_date</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:start_date</span><span class="p">,</span> <span class="ss">:cannot_be_after_end_date</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">#=&gt; errors.add(:start_date, I18n.t(&#39;activerecord.errors.models.my_model.attributes.start_date.cannot_be_after_end_date&#39;)) と同じ</span>
</span><span class='line'>    <span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:end_date</span><span class="p">,</span> <span class="ss">:cannot_be_before_start_date</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">#=&gt; errors.add(:end_date, I18n.t(&#39;activerecord.errors.models.my_model.attributes.end_date.cannot_be_before_start_date&#39;)) と同じ</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参考</h3>

<ul>
<li><a href="http://guides.rubyonrails.org/active_record_validations.html">Active Record Validations — Ruby on Rails Guides</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[isucon6 予選に参加した]]></title>
    <link href="http://blog.takady.net/blog/2016/09/21/isucon6-qualifier/"/>
    <updated>2016-09-21T20:11:54+09:00</updated>
    <id>http://blog.takady.net/blog/2016/09/21/isucon6-qualifier</id>
    <content type="html"><![CDATA[<p><a href="http://blog.takady.net/blog/2015/09/29/isucon5-qualifier/">去年</a>に引き続き、今年も同じメンバーで チームYashio として isucon6 予選に参加してきた。<br/>
今回は去年の経験を活かして予選通過できそうな気がしていたけど、またしても結果は惨敗で非常に残念。</p>

<h2>前日までの準備期間</h2>

<p>ちょうど1週間前あたりから、azure にアカウントを作って前回の予選の環境をデプロイして、
3人で色々な改修・実装を試してベンチマーカーを回したりして楽しんでた。<br/>
この一週間はとてもイイ感じで、N+1 を解消してみたり、DB のデータを redis にキャッシュしてみたり、3人で愚直にスコアを上げるのを楽しんでいて「なんかこれ今年は行けるんじゃない？！」みたいな雰囲気を感じてた。<br/>
あと、去年はサーバ上で直接コード修正するなどしてしまい、メンバーが並行して実装する事が非常に困難だった反省から、ローカルでの開発環境構築と deploy の仕組みの整備を @muratayusuke が確立してくれて、当日もおおいに役立った。</p>

<h2>当日</h2>

<p>今回はヒカリエの会場で参加。<br/>
朝は若干の緊張と期待感で、部活の試合の日の朝っぽい感じだった。</p>

<p><img src="http://blog.takady.net/images/2016-09-21-isucon6-qualifier/IMG_20160917_094840.jpg" width="600" alt="" /></p>

<p>10時に始まってからは、@muratayusuke が競技用のインスタンスの起動とか deploy 周りを整備したり、ruby 実装が起動するようにするなどした。<br/>
@tatsuyaoiw がコードを読んだりアプリケーションを触って理解を進めてた。<br/>
僕は、開発用として、マシンイメージを別の環境にデプロイしてインスタンスを起動して、そこの DB にローカルから接続できるように設定して、ローカルでアプリを動かすための設定をするなどした。<br/>
ローカル環境で開発して本番に deploy できる環境が整ったのがだいたい11時過ぎくらい。</p>

<p>ruby 実装での最初のスコアは 1100 くらいだったけど、スコア安定しなくて大体 0 だった気がする。<br/>
そこから @muratayusuke が nginx から static ファイル返してクライアントキャッシュ有効にしたり、 unicorn の worker 数増やしたりして 3000 くらいまで上げた。</p>

<p>stackprof の結果見てて、<code>#htmlify</code> がとにかく遅いって事で @tatsuyaoiw と話したりして、正規表現を使わない実装にチャレンジしてみた。<br/>
で、ここから何度か修正してはベンチマーカーを流して、「リンクがありません」エラーメッセージが出てそれを見て直してを繰り返して15時くらいまでひたすらやったんだけど、エラーが完全に取れなくて一人疲弊してきて、正規表現使わない実装は諦めて、keyword 一覧を redis から取ってきて、それを content に含まれてる keyword だけに限定して <code>gsub</code> に渡すっていう修正にとどまった。<br/>
これで 16,000 までは上がったけど、もはや上位陣との差が空いていて厳しい感じだった。</p>

<p>それから @tatsuyaoiw が user の情報を redis でキャッシュしたり isutar へのアクセス回数を減らしたり、@muratayusuke が nginx の設定変更とかもろもろやって 19,000 くらいが最高だった。</p>

<p><img src="http://blog.takady.net/images/2016-09-21-isucon6-qualifier/IMG_20160917_180855.jpg" width="600" alt="" /></p>

<h2>まとめ</h2>

<p>一つに時間掛け過ぎた。一時間くらいで諦めて他の方法とか箇所とかに切り替えた方が良かったと思う。<br/>
終わってから3人で飲みに行って悔しがった。<br/>
今回のお題は、スロークエリや N+1 みたいなものがほぼ無かったので、とにかく <code>#htmlify</code> をなんとかしないとーっていう感じだった。<br/>
そこでアルゴリズムの問題としてそれに向き合っていた時間が長すぎたんだけど、生成された html 自体をキャッシュするとかっていう方向でも良かったわけだし、そういう方針の切り替えができるような落ち着きの時間を持てると良さそう。<br/>
予選後に飲みながら話してた時に「そういう方法があったね」って話になったから、本番中に一旦落ち着いていればそれを思い付いて実行出来てたかもなーって思った。<br/>
来年こそは…！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails で FormObject を使う]]></title>
    <link href="http://blog.takady.net/blog/2016/08/29/rails-form-object/"/>
    <updated>2016-08-29T19:38:49+09:00</updated>
    <id>http://blog.takady.net/blog/2016/08/29/rails-form-object</id>
    <content type="html"><![CDATA[<p>フォームでは日付の期間を入力し、それを日単位のレコードに保存するようなケースでは、FormObject を使えるかも。やってみた。</p>

<p><br /></p>

<p><img src="http://blog.takady.net/images/2016-08-29-rails-form-object/screenshot1.png" alt="" /></p>

<p>こういうフォーム。</p>

<h1>Model</h1>

<p>uniqueness など Model 単位でバリデーションしなければいけないものや、コンテキストに関係なくバリデーションするものは Model に書く。</p>

<h2>app/models/foo_day.rb</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">FooDay</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:user_id</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:date</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">uniqueness</span><span class="p">:</span> <span class="p">{</span><span class="ss">scope</span><span class="p">:</span> <span class="ss">:user_id</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>FormObject</h1>

<p>FormObject の参考では、よく <a href="https://github.com/solnic/virtus">virtus</a> を include しているサンプルがあるけど、Virtus の Type cast が効果的に使えそうなケース以外だと特に使わなくて良いかなと個人的に思った。<br/>
例えば今回のケースだと、view から文字列で渡ってくる <code>YYY-MM-DD</code> を Date に変換したかったので、一度 Virtus を使ってみたけど、
例えば <code>2016-08-32</code> のように Date として解釈できないものが渡ってきた場合に、エラーにならずに文字列のまま変数に格納される挙動だったので、あまり積極的に使う理由が無かった。<br/>
結局、日付の validation のために <a href="https://github.com/adzap/validates_timeliness">validates_timeliness</a> という gem を使ったけど便利だった。</p>

<h2>app/models/foo_day/registration_form.rb</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">FooDay</span><span class="o">::</span><span class="no">RegistrationForm</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Model</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:user_id</span><span class="p">,</span> <span class="ss">:from_date</span><span class="p">,</span> <span class="ss">:to_date</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:user_id</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:from_date</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">timeliness</span><span class="p">:</span> <span class="p">{</span><span class="ss">on_or_after</span><span class="p">:</span> <span class="ss">:today</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:date</span><span class="p">}</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:to_date</span><span class="p">,</span> <span class="ss">allow_blank</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">timeliness</span><span class="p">:</span> <span class="p">{</span><span class="ss">on_or_after</span><span class="p">:</span> <span class="ss">:from_date</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:date</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">save</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span> <span class="k">unless</span> <span class="n">valid?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">persist!</span>
</span><span class='line'>    <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">foo_days</span>
</span><span class='line'>    <span class="vi">@foo_days</span> <span class="o">||=</span> <span class="n">build_foo_days</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">build_foo_days</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">to_date</span><span class="o">.</span><span class="n">blank?</span>
</span><span class='line'>      <span class="o">[</span><span class="no">FooDay</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">date</span><span class="p">:</span> <span class="n">from_date</span><span class="p">,</span> <span class="ss">user_id</span><span class="p">:</span> <span class="n">user_id</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="p">(</span><span class="no">Date</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">from_date</span><span class="p">)</span><span class="o">.</span><span class="n">.</span><span class="no">Date</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">to_date</span><span class="p">))</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">date</span><span class="o">|</span> <span class="no">FooDay</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">user_id</span><span class="p">:</span> <span class="n">user_id</span><span class="p">,</span> <span class="ss">date</span><span class="p">:</span> <span class="n">date</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">valid?</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span> <span class="k">unless</span> <span class="k">super</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">foo_days</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">foo_day</span><span class="o">|</span>
</span><span class='line'>      <span class="k">next</span> <span class="k">if</span> <span class="n">foo_day</span><span class="o">.</span><span class="n">valid?</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">foo_day</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">full_messages</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">message</span><span class="o">|</span>
</span><span class='line'>        <span class="n">errors</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="ss">:base</span><span class="p">,</span> <span class="no">I18n</span><span class="o">.</span><span class="n">t</span><span class="p">(</span><span class="s1">&#39;activemodel.errors.invalid_foo_day&#39;</span><span class="p">,</span> <span class="ss">date</span><span class="p">:</span> <span class="n">foo_day</span><span class="o">.</span><span class="n">date</span><span class="p">,</span> <span class="ss">message</span><span class="p">:</span> <span class="n">message</span><span class="p">))</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">persist!</span>
</span><span class='line'>    <span class="n">foo_days</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:save!</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Controller</h1>

<h2>app/controllers/foo_days_controller.rb</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">FooDaysController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>    <span class="vi">@registration_form</span> <span class="o">=</span> <span class="no">FooDay</span><span class="o">::</span><span class="no">RegistrationForm</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@registration_form</span> <span class="o">=</span> <span class="no">FooDay</span><span class="o">::</span><span class="no">RegistrationForm</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:foo_day_registration_form</span><span class="o">].</span><span class="n">merge</span><span class="p">(</span><span class="ss">user_id</span><span class="p">:</span> <span class="n">current_user</span><span class="o">.</span><span class="n">id</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@registration_form</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">new_foo_day_path</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="s1">&#39;登録に成功しました&#39;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">flash</span><span class="o">.</span><span class="n">now</span><span class="o">[</span><span class="ss">:alert</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;登録に失敗しました&#39;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">render</span> <span class="ss">action</span><span class="p">:</span> <span class="ss">:new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>View</h1>

<h2>app/views/foo_days/new.html.haml</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nc">.row</span>
</span><span class='line'>  <span class="nt">%h1</span> 日々の登録
</span><span class='line'>  <span class="p">=</span> <span class="n">form_for</span> <span class="vi">@registration_form</span><span class="p">,</span> <span class="ss">url</span><span class="p">:</span> <span class="n">foo_days_path</span><span class="p">,</span> <span class="nb">method</span><span class="p">:</span> <span class="ss">:post</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>    <span class="p">-</span> <span class="k">if</span> <span class="vi">@registration_form</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">any?</span>
</span><span class='line'>      <span class="nt">%ul</span>
</span><span class='line'>        <span class="p">-</span> <span class="vi">@registration_form</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">full_messages</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">msg</span><span class="o">|</span>
</span><span class='line'>          <span class="nt">%li</span><span class="p">=</span> <span class="n">msg</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="s1">&#39;日付&#39;</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">date_field</span> <span class="ss">:from_date</span>
</span><span class='line'>    <span class="nt">%span</span> 〜
</span><span class='line'>    <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">date_field</span> <span class="ss">:to_date</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="s1">&#39;確定&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Translation</h1>

<h2>config/locales/ja.yml</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">ja</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">activemodel</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">attributes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">foo_day/registration_form</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">from_date</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">開始日</span>
</span><span class='line'>        <span class="l-Scalar-Plain">to_date</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">終了日</span>
</span><span class='line'>    <span class="l-Scalar-Plain">errors</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">invalid_foo_day</span><span class="p-Indicator">:</span> <span class="s">&#39;%{date}</span><span class="nv"> </span><span class="s">%{message}&#39;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">models</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">foo_day/registration_form</span><span class="p-Indicator">:</span>
</span><span class='line'>          <span class="l-Scalar-Plain">attributes</span><span class="p-Indicator">:</span>
</span><span class='line'>            <span class="l-Scalar-Plain">from_date</span><span class="p-Indicator">:</span>
</span><span class='line'>              <span class="l-Scalar-Plain">on_or_after</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">は %{restriction} 以降の日付を指定してください</span>
</span><span class='line'>            <span class="l-Scalar-Plain">to_date</span><span class="p-Indicator">:</span>
</span><span class='line'>              <span class="l-Scalar-Plain">on_or_after</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">は 開始日 以降の日付を指定してください</span>
</span></code></pre></td></tr></table></div></figure>


<h1>まとめ</h1>

<p>フォームとモデルが1対1で対応しないケースもたまにあるので、その時は FormObject も選択肢の一つになるかも。</p>

<h1>参考</h1>

<ul>
<li><a href="http://webuild.envato.com/blog/creating-form-objects-with-activemodel-and-virtus/">Creating Form Objects with ActiveModel and Virtus - We build Envato</a></li>
<li><a href="http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/">7 Patterns to Refactor Fat ActiveRecord Models - Code Climate Blog</a></li>
<li><a href="http://qiita.com/quattro_4/items/6636efbf58cca13db02a">Form Object実装メモ - Qiita</a></li>
<li><a href="http://blog.enogineer.com/2014/12/02/rails-form-object/">Rails4でFormオブジェクトを作る際に気をつける3つのポイント｜江の島エンジニアBlog</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SOFT SKILLS ソフトウェア開発者の人生マニュアル を読んだ]]></title>
    <link href="http://blog.takady.net/blog/2016/07/23/soft-skills/"/>
    <updated>2016-07-23T10:33:25+09:00</updated>
    <id>http://blog.takady.net/blog/2016/07/23/soft-skills</id>
    <content type="html"><![CDATA[<p>先月、日本語版が発売された直後に買って読んだ。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&o=9&p=8&l=as1&asins=B01GDS0994&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>ソフトウェアエンジニアとして、キャリアの事から健康や心の事まで、まさに人生マニュアルといった内容で、とてもおもしろかった。<br/>
責任範囲を増やすことが自分にとってどういうメリットがあるのかとか、プロというのはどういうものかとか、なんなんだろうと思っていた事が語られていて、そういう事か〜っていう納得感が僕にはあった。<br/>
読んで1ヶ月経って、ハイライトしたところなど読みなおしていたけど、改めて良い本だと思いました。</p>

<p>何度も読みなおすのが良さそう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10年後の仕事のカタチ10のヒント を読んだ]]></title>
    <link href="http://blog.takady.net/blog/2016/07/23/hints-of-work-style-after-a-decade/"/>
    <updated>2016-07-23T09:14:15+09:00</updated>
    <id>http://blog.takady.net/blog/2016/07/23/hints-of-work-style-after-a-decade</id>
    <content type="html"><![CDATA[<p><a href="http://tango-ruby.hatenablog.com/entry/2015/11/04/172930">こちらのブログ記事</a> でオススメされていたので読んでみた。<br/>
対話形式になっている。ボリュームが多くないのでさくっと2時間くらいで読めて価格もお手頃。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&o=9&p=8&l=as1&asins=B00HOTLXKQ&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<h1>感想</h1>

<p>印象に残ってるところ。</p>

<h2>会社以外でのプロジェクト</h2>

<ul>
<li>「自分で決める、自分でリスクを背負う」っていうのは、会社で言われてことをやるのとは全く違うんです。</li>
</ul>


<h2>東京とベトナムのピザ屋の話</h2>

<ul>
<li>東京だともうすでに美味しいピザのお店がたくさんあって競合が多いし、初期の設備投資のお金もたくさん必要。</li>
<li>ベトナムにはまだ本格的なピザを食べられるお店があまりなかったので、同じくらいの実力でもベトナムでトップになれた。</li>
<li>トップになって儲かり始めるので、もっとクオリティが良くなり、飛び抜けていく。</li>
</ul>


<h2>日本の中のものさしで測って怖がらない</h2>

<ul>
<li>イチローとか松井とか、安定した日本球界でのキャリアよりも大リーグに挑戦したのも、未知のものにトライするとワクワクするから。</li>
<li>なんとかなる。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10年戦えるデータ分析入門 SQLを武器にデータ活用時代を生き抜く を読んだ]]></title>
    <link href="http://blog.takady.net/blog/2016/05/22/introduction-to-data-analysis-book/"/>
    <updated>2016-05-22T10:38:56+09:00</updated>
    <id>http://blog.takady.net/blog/2016/05/22/introduction-to-data-analysis-book</id>
    <content type="html"><![CDATA[<p>読んだ。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&o=9&p=8&l=as1&asins=4797376279&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>最近またデータ活用的なところをやる機会が来るかもなので、今ってその辺どんな感じなんだろうというのを知りたくて本書を手にとった。ボリューム自体は重くなく、数時間で読めた。</p>

<h1>感想</h1>

<p>第1部の SQL 初級入門な章は流し読みした。</p>

<p>第2部以降、下記のような話が網羅されていて参考になった。</p>

<ul>
<li>データソース層、DWH層、データマート層の3層構造</li>
<li>オンプレミスとクラウドサービス利用のトレードオフ</li>
<li>ディメンションテーブル（スタースキーマ）</li>
<li>ETL と ELT</li>
<li>DWH 向けデータベース製品のそれぞれの特長の説明（BigQueryやHadoop含む）</li>
<li>データ構築のバッチは処理の粒度を細かくして冪等に作ろうって話</li>
<li>差分更新・全件更新の話</li>
</ul>


<p>あとテストの話も書いてはあるが、SQLが正常に動くことや件数が正しいことのテストだった。<br/>
実際にデータの内容が正しいかのテストがデータ基盤のテストとしては最も重要だけど方法として確立されたものは聞いたことがないので、その辺についてなにか書いてくれてることを期待してた。この本に載っていないということは、まだそういうテスト手法は出てきてないのかもしれない。</p>

<h1>その他</h1>

<p>2011年から2013年くらいまでひたすらバッチで Hadoop にデータを入れてそれを HiveQL で集計・抽出という業務をやっていた時期があって、その時に感じていたことやみんなで考えていたような事が書かれていたりして懐かしく思ったし、当時の自分たちの方法が肯定される記述も多くて良かったと思った。<br/>
当時はこういう大規模データ運用現場に関する知見があまり出回ってなかった気がする。（Hadoop とかビックデータという言葉はやたらバズっていたが。<br/>
あの時この本読んでたらなーとも思った。</p>

<p>データ分析基盤を作っている人やこれから作っていこうとしている人にとって本書はとても良いものだとおもいました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nexus5 の画面が割れたので自分で交換した]]></title>
    <link href="http://blog.takady.net/blog/2016/05/15/nexus5-screen-replacement/"/>
    <updated>2016-05-15T21:56:33+09:00</updated>
    <id>http://blog.takady.net/blog/2016/05/15/nexus5-screen-replacement</id>
    <content type="html"><![CDATA[<p>3日前に nexus5 を落としてしまって画面が思いっきり割れてしまった。</p>

<p><img src="http://blog.takady.net/images/2016-05-15-nexus5-screen-replacement/thumb_IMG_5931_1024.jpg" alt="" /></p>

<p>端末の画面を割ってしまったのは初めてだったし、まだ買って半年だったのでとても残念な気持ちになった。</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">はじめてスマホの仮面が割れたバキバキに</p>&mdash; Yuichi Takada (@takady7) <a href="https://twitter.com/takady7/status/731131513887031297">2016年5月13日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">最低の気分なんですけど！！！！！1</p>&mdash; Yuichi Takada (@takady7) <a href="https://twitter.com/takady7/status/731131644845817858">2016年5月13日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">やばい、ほんと、ありえない</p>&mdash; Yuichi Takada (@takady7) <a href="https://twitter.com/takady7/status/731132397010345986">2016年5月13日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>とにかく落ち着いて「nexus5 画面 交換」とかでググッて修理についての情報を集めた。<br/>
どうやら修理に出すと2万円超えみたいだ。高い…。<br/>
とはいえ、この割れた画面を見るたびにテンションが下がってどうしようもない。</p>

<p>そんな中、自力で直してたという記事を発見。<br/>
<a href="http://www.blogershin.link/archives/242">Nexus 5 ガラス割れを自力で交換修理する件</a></p>

<p>用意するものは、Amazon で売ってるこの交換用ディスプレイと必要な工具のセット。13,500円。<br/>
結構高いけどこれが画面を交換する最安の方法のようなので、こちらを購入した。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&o=9&p=8&l=as1&asins=B00V7VB8U2&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>実際の分解・交換にはYoutube のこちらの動画も参考にした。</p>

<ul>
<li>Nexus 5 Screen Replacement Part 1 How To Change</li>
</ul>


<iframe width="560" height="315" src="https://www.youtube.com/embed/nVAtEyRBny0" frameborder="0" allowfullscreen></iframe>


<p>Amazon のレビューのコメントでは「30分くらいで意外と簡単にできました！」みたいなコメントがあったけど、やってみると1時間以上かかったし、両面テープでくっついている箇所を剥がしたりするのに非常に神経を使った。</p>

<p>交換の様子。</p>

<p><img src="http://blog.takady.net/images/2016-05-15-nexus5-screen-replacement/thumb_IMG_5922_1024.jpg" alt="" /><br/>
<img src="http://blog.takady.net/images/2016-05-15-nexus5-screen-replacement/thumb_IMG_5923_1024.jpg" alt="" /><br/>
<img src="http://blog.takady.net/images/2016-05-15-nexus5-screen-replacement/thumb_IMG_5924_1024.jpg" alt="" /><br/>
<img src="http://blog.takady.net/images/2016-05-15-nexus5-screen-replacement/thumb_IMG_5925_1024.jpg" alt="" /><br/>
<img src="http://blog.takady.net/images/2016-05-15-nexus5-screen-replacement/thumb_IMG_5926_1024.jpg" alt="" /><br/>
<img src="http://blog.takady.net/images/2016-05-15-nexus5-screen-replacement/thumb_IMG_5927_1024.jpg" alt="" /><br/>
<img src="http://blog.takady.net/images/2016-05-15-nexus5-screen-replacement/thumb_IMG_5928_1024.jpg" alt="" /><br/>
<img src="http://blog.takady.net/images/2016-05-15-nexus5-screen-replacement/thumb_IMG_5930_1024.jpg" alt="" /><br/>
<img src="http://blog.takady.net/images/2016-05-15-nexus5-screen-replacement/thumb_IMG_5932_1024.jpg" alt="" /></p>

<p>最後の最後に背面カバーをはめる時に、バッテリー横の線が一本挟まって切れてしまって、絶望したけど電源を入れて確認しても何も問題無いので、一旦様子見。</p>

<p>ということで、交換は無事に成功！</p>

<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">nexus5 の画面取り替えに成功した！</p>&mdash; Yuichi Takada (@takady7) <a href="https://twitter.com/takady7/status/731827195639783424">2016年5月15日</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2>注意</h2>

<p><strong><em>自力での交換は失敗の可能性があったり、メーカー保証の対象外となるなどするので、くれぐれも自己責任でお願いします。</em></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自分の開発スピードを上げるには]]></title>
    <link href="http://blog.takady.net/blog/2016/05/02/more-productive/"/>
    <updated>2016-05-02T01:10:20+09:00</updated>
    <id>http://blog.takady.net/blog/2016/05/02/more-productive</id>
    <content type="html"><![CDATA[<p>新しい機能なりサービスを作った後に振り返ってみると、もっと上手くやれた気がするなーって思う。<br/>
もっと早く、質の良いものを作るにはどうすれば良いのか。<br/>
そもそも開発とひとことで言っても、細かくどういうポイントを気にしておく必要があるか、そしてそのどこを改善できそうか考えてみた。</p>

<h1>仕様決め</h1>

<ul>
<li><p>それを作る理由について納得しているか</p>

<ul>
<li>納得してないとか、そもそも背景を理解してない状態で仕様決めに入るのはかなり厳しい。</li>
<li>システムとしてだけでなくて、ビジネス的にそれってどうなんですかっていうのは質問して納得しておきたい。

<ul>
<li>とはいえ腰の重い開発者にはなりたくないので柔軟に。</li>
</ul>
</li>
</ul>
</li>
<li><p>解決したい課題が明確になっているか</p>

<ul>
<li>最初は何か課題があるはずだけど、それをすっ飛ばして具体的な解決方法から話が始まる事がわりとある。

<ul>
<li>実は別の方法が良かったりするかもしれないので、解決したい課題は何なのか明確にしておきたい。</li>
</ul>
</li>
</ul>
</li>
<li><p>誰が最終的に決定するのか</p>

<ul>
<li>発散はしても良いけど最後決める人がいないとなかなか固まらなくてやきもきする。</li>
<li>特に関係者が増えると本当に決まらないので、誰が決める人なのかってのはちゃんと認識合わせておきたい。</li>
</ul>
</li>
<li><p>優先順位の高いものはどれか</p>

<ul>
<li>規模が小さければ一気に作っちゃうのだけど、規模が大きい場合は一気に全部作ろうとしないで重要なものから作って出来たところから出していった方が良い。</li>
<li>優先順位の低いものは本当に必要かもわかってなかったりするので最初から詳細まで詰めなくても良い。</li>
<li>いつまでにどこまで出したいかは確認しておく。</li>
</ul>
</li>
<li><p>そもそも現状の仕様がどうなっているかをシステムレベルで把握しているか</p>

<ul>
<li>そもそもの前提が間違っていたりすると議論が全くの無駄になることも。</li>
<li>把握してない状態で課題に対しての解決案を提示するのは結構難しい。</li>
</ul>
</li>
</ul>


<h1>設計</h1>

<ul>
<li><p>既存に引っ張られすぎていないか</p>

<ul>
<li>既存がこうだからそれを踏襲していく形で考えてしまいがちだが、そこに縛られすぎずに本来どうあるべきかを考えてみる。

<ul>
<li>時間的制約などにより結果的に理想の形を取れなくても、チーム内で理想の形は共有しておきたい。</li>
</ul>
</li>
</ul>
</li>
<li><p>それはそのモデルやサービスの責務か</p>

<ul>
<li>責務を超えた事をやらせていたり、隠蔽しておきたい知識・概念がその範囲外に流出してしまうのは避けたい。

<ul>
<li>ここが自分にとっては結構難しくて、もっと上手くやりたいところ。

<ul>
<li>あしがかりになりそうな DDD の知識を学びたい。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>なぜその名前付けをしたのかを説明できるか</p>

<ul>
<li>名前重要ってのは最近本当に感じてて、でもいつも結構悩むんだけど、これは何かのサインなのか。</li>
</ul>
</li>
</ul>


<h1>実装</h1>

<ul>
<li><p>集中できているか</p>

<ul>
<li>とにかく実装は集中してやっているかどうかで掛かる時間が何倍も変わるので、自分が集中している状態にい続けられるように気を遣う。</li>
<li>詳細な実装方法で迷ったりする時は実際に書いて見比べる方がイメージしやすくて、書いたコードを見てみると意外と悪くないねという感じになる事も多い。</li>
</ul>
</li>
<li><p>テストコードを書く事に時間がかかってないか</p>

<ul>
<li>プロダクションコード書くよりテストコード書く時間の方が長くなりがち。

<ul>
<li>ここはもう少し改善できそう。</li>
<li>テストについては何か一冊本でも読んで学ぶと良さそう。</li>
</ul>
</li>
</ul>
</li>
<li><p>コードレビューしやすい PR になっているか</p>

<ul>
<li>レビュアーが気になりそうなポイントは、先に PR の Description に書いておく。

<ul>
<li>ただ、Description が長過ぎると重い感じになるので、コードやコミットメッセージなどで明らかにわかることは書かないことにしてる。</li>
</ul>
</li>
<li>1つの PR が大きくなり過ぎたら分けられないか考える。

<ul>
<li>1つの PR でだいたい変更が 200行くらいまでにした方が見やすくてレビュアーの負担も少ないと思う。</li>
</ul>
</li>
<li>意味の単位でコミット分ける。

<ul>
<li>コミット単位で見てくれる人もいるので、その人に意図が伝わるように書くと、将来 commit log 見直した時にも意図が分かりやすかったりする。

<ul>
<li>1行目: 要約</li>
<li>2行目: 空行</li>
<li>3行目: 理由含めた説明</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>リリースタイミングを考えられているか</p>

<ul>
<li>なるべく出来たものから出していきたい。</li>
<li>db migration があるものはタイミング気をつける。</li>
</ul>
</li>
</ul>


<h1>検証</h1>

<ul>
<li>検証環境特有の問題を取り除けているか

<ul>
<li>大体時間が掛かるのは、実際に検証したい箇所ではなくて、何か設定の差異等によるつまらない問題である事が多い。

<ul>
<li>特に他チームのサービスとのインターフェース部分は、開発環境では普段モックしていたりするので、そういう問題がよく起きがち。

<ul>
<li>そういう問題は起きないように改善するのはもちろんだし、認識してるのであれば事前に取り除いておきたい。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h1>まとめ</h1>

<p>改めてまとめてみると、改善できそうなところが見えてきた気がする。<br/>
DDD の本とテストの本を読まねば。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Studio で emacs キーバインドでコードを書く]]></title>
    <link href="http://blog.takady.net/blog/2016/01/27/android-studio-with-emacs-keybinds/"/>
    <updated>2016-01-27T23:15:54+09:00</updated>
    <id>http://blog.takady.net/blog/2016/01/27/android-studio-with-emacs-keybinds</id>
    <content type="html"><![CDATA[<p>Android Studio でコードを書こうと思ったのだが、キーバインドが全然しっくり来なくて嫌になりそうだったのでキーバインドの設定をはじめにした。<br/>
Android Studio には、Emacs キーバインドの設定が元々用意されているのでそれを使った。<br/>
普段は Karabinar を使って Emacs キーバインドにしているからそれで良いかとも思ったけど、IDE 側のキーバインドと競合したりしてつらいので Android Studio の時は Karabinar が OFF になるようにして Android Studio のキーバインド設定を使うことにした。</p>

<p>まず Karabinar の Emacs キーバインドの設定を Android Studio の時は無効になるようにする。<br/>
<a href="https://github.com/tekezo/Karabiner/blob/version_10.15.0/src/core/server/Resources/replacementdef.xml#L104-L114">ここの設定</a> を private.xml でこんな感じに上書きした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;replacementdef&gt;</span>
</span><span class='line'>    <span class="nt">&lt;replacementname&gt;</span>EMACS_MODE_IGNORE_APPS<span class="nt">&lt;/replacementname&gt;</span>
</span><span class='line'>    <span class="nt">&lt;replacementvalue&gt;</span>
</span><span class='line'>      EMACS,
</span><span class='line'>      REMOTEDESKTOPCONNECTION,
</span><span class='line'>      TERMINAL,
</span><span class='line'>      VI,
</span><span class='line'>      VIRTUALMACHINE,
</span><span class='line'>      X11,
</span><span class='line'>      ANDROID_STUDIO,
</span><span class='line'>    <span class="nt">&lt;/replacementvalue&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/replacementdef&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>書き換えたら Karabinar の Preference で Reload XML すれば設定が反映される。<br/>
次に Android Studio の Preference > Keymap で <code>Keymaps: Emacs</code> に設定すれば OK。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年まとめ]]></title>
    <link href="http://blog.takady.net/blog/2015/12/31/2015-summary/"/>
    <updated>2015-12-31T19:50:01+09:00</updated>
    <id>http://blog.takady.net/blog/2015/12/31/2015-summary</id>
    <content type="html"><![CDATA[<p>簡単に振り返っとこう。</p>

<h1>転職</h1>

<p>5 月に転職した。</p>

<ul>
<li><a href="http://blog.takady.net/blog/2015/07/05/join-a-new-company-and-past-a-month/">転職して１ヶ月経った | Yuichi Takada</a></li>
</ul>


<p>新しい環境というのが一番自分を成長させてくれると思うし、今回もそう思った。<br/>
インフラ環境など含め前職と違うところも多く、しかし本質的な事に集中できる環境であり逆に自分に言い訳出来なくて厳しい感じになったりもしたけど、10月くらいに自分の中でそれは乗り越えた気がする。</p>

<h1>結婚</h1>

<p>5 月に結婚した。<br/>
健康的で人間的な生活を送れるようになったし、楽しく毎日を送れている。<br/>
最近は寝る前に二人で晩酌をするので、そのための美味しい日本酒を探すのも楽しい。</p>

<h1>isucon</h1>

<p>今年は初めて isucon にチャレンジした。</p>

<ul>
<li><a href="http://blog.takady.net/blog/2015/09/29/isucon5-qualifier/">#isucon 5 予選で惨敗してきました | Yuichi Takada</a></li>
</ul>


<p>予選当日もかなり楽しかったけど、それ以上に予選前に勉強したカーネルチューニングや DB の index やメトリクスの取り方などはエンジニアとして身につけておくべき重要な事だと思っていたので、それを勉強するいい機会になって本当に良かった。<br/>
でも決勝に進出したかった。</p>

<h1>発表</h1>

<p>社内 LT 大会で毎月発表したのと、社外では一つ発表した。</p>

<ul>
<li><a href="https://speakerdeck.com/takady/isucon5-qualifier">isucon5 予選をどう惨敗したか / isucon5 qualifier // Speaker Deck</a></li>
</ul>


<h1>github</h1>

<p>業務以外でコード書く事が少なかったかな…。特に年末はその余裕が無かった。残念である。<br/>
個人的に作っている web サービスを公開したかったけど、年内に間に合わなかった。<br/>
来年早々に出したい。ひっそりと。</p>

<h2>sign in した状態</h2>

<p><img src="http://blog.takady.net/images/2015-12-31-2015-summary/github_contribution_private.png" alt="" /></p>

<h2>sign out した状態</h2>

<p><img src="http://blog.takady.net/images/2015-12-31-2015-summary/github_contribution_public.png" alt="" /></p>

<h1>読書</h1>

<p>読んだ書籍。</p>

<ul>
<li><a href="http://www.amazon.co.jp/gp/product/4774150207/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4774150207&amp;linkCode=as2&amp;tag=takadayuichi-22">Webエンジニアのための データベース技術[実践]入門 (Software Design plus)</a></li>
<li><a href="http://www.amazon.co.jp/gp/product/4774171972/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4774171972&amp;linkCode=as2&amp;tag=takadayuichi-22">理論から学ぶデータベース実践入門 ~リレーショナルモデルによる効率的なSQL (WEB+DB PRESS plus)</a></li>
<li><a href="http://www.amazon.co.jp/gp/product/4774173010/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4774173010&amp;linkCode=as2&amp;tag=takadayuichi-22">SQL実践入門──高速でわかりやすいクエリの書き方 (WEB+DB PRESS plus)</a></li>
<li><a href="http://www.amazon.co.jp/gp/product/4274067939/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4274067939&amp;linkCode=as2&amp;tag=takadayuichi-22">情熱プログラマー ソフトウェア開発者の幸せな生き方</a></li>
<li><a href="http://www.amazon.co.jp/gp/product/4797311126/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4797311126&amp;linkCode=as2&amp;tag=takadayuichi-22">オブジェクト指向における再利用のためのデザインパターン</a></li>
<li><a href="http://www.amazon.co.jp/gp/product/B01626P712/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B01626P712&amp;linkCode=as2&amp;tag=takadayuichi-22">エンジニアとして世界の最前線で働く選択肢　～渡米・面接・転職・キャリアアップ・レイオフ対策までの実践ガイド</a></li>
<li><a href="http://www.amazon.co.jp/gp/product/4413090101/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4413090101&amp;linkCode=as2&amp;tag=takadayuichi-22">自分の中に毒を持て―あなたは“常識人間&#8221;を捨てられるか (青春文庫)</a></li>
<li><a href="http://www.amazon.co.jp/gp/product/4167502100/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4167502100&amp;linkCode=as2&amp;tag=takadayuichi-22">走ることについて語るときに僕の語ること (文春文庫)</a></li>
</ul>


<h1>android</h1>

<p>12 年くらいソフトバンクユーザーだったけど先日ついに MNP して BIC SIM(IIJmio) に変えた。<br/>
そのタイミングで iPhone5 から Nexus5 に変わり、android ユーザーになった。<br/>
まだ慣れない。<br/>
Android アプリでも作ってみようかな。</p>

<h1>まとめ</h1>

<p>転職・結婚・引越しというイベントが 5月にいっぺんに来たのでその印象が強すぎてそれ以前の時期の事があんまり思い出せない。<br/>
総じて色々あった年だったなという印象。<br/>
あんまり自分の事に満足出来ないタイプなので、すごく良かったとも思わない。<br/>
2 年前まで SQL と Shell スクリプトのバッチしか書いてなくて危機を感じてた頃に比べて web エンジニアらしき者になれてきた気はする。</p>

<h1>来年やること</h1>

<ul>
<li>英語を勉強する</li>
<li>Go もしくは何か Ruby 以外のプログラミング言語習得する</li>
<li>個人的に作った web サービスの運営をする</li>
<li>美味しいコーヒーを淹れられるようになる</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi と温度センサーで自宅の温度を可視化]]></title>
    <link href="http://blog.takady.net/blog/2015/12/18/raspberry-pi-with-adt7410/"/>
    <updated>2015-12-18T00:46:37+09:00</updated>
    <id>http://blog.takady.net/blog/2015/12/18/raspberry-pi-with-adt7410</id>
    <content type="html"><![CDATA[<p><strong><em>この記事は <a href="http://qiita.com/advent-calendar/2015/sansan">Sansan Advent Calendar 2015</a> の 18日目の記事です。</em></strong><br/>
<br /></p>

<p>Raspberry Pi と ADT7410 温度センサーで自宅の温度を測り、 <a href="https://github.com/focuslight/focuslight">focusligt</a> でグラフにした。<br/>
動機は 2年くらい前に買ったまま放置してた Raspberry Pi に備わっている GPIO のことがずっと気になっていたから。</p>

<h1>用意したもの</h1>

<ul>
<li>Raspberry Pi Model B</li>
<li><a href="http://akizukidenshi.com/catalog/g/gM-06675/">ADT7410使用 高精度・高分解能 I2C・16Bit 温度センサモジュール</a></li>
<li><a href="http://akizukidenshi.com/catalog/g/gP-05294/">ブレッドボード BB-801</a></li>
<li><a href="http://akizukidenshi.com/catalog/g/gC-08932/">ブレッドボード・ジャンパーコード（オス-メス） 15cm（黒）</a> x 4本</li>
<li><a rel="nofollow" href="http://www.amazon.co.jp/gp/product/B0016VDGIA/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=B0016VDGIA&linkCode=as2&tag=takadayuichi-22">goot 一般電気用はんだこて KS-30R</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=takadayuichi-22&l=as2&o=9&a=B0016VDGIA" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
<li><a rel="nofollow" href="http://www.amazon.co.jp/gp/product/B0029LGAJI/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=B0029LGAJI&linkCode=as2&tag=takadayuichi-22">goot 高密度集積基板用はんだ SD-60</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=takadayuichi-22&l=as2&o=9&a=B0029LGAJI" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>


<h1>工程</h1>

<p>まず Raspberry Pi の初期設定をした。<br/>
詳細は割愛するが、RASPBIAN JESSIE の最新版を <a href="https://www.raspberrypi.org/downloads/raspbian/">Download Raspbian for Raspberry Pi</a> からダウンロードして SD に焼き、本体を起動して設定。<br/>
<a href="https://www.raspberrypi.org/documentation/installation/installing-images/README.md">公式のインストールガイド</a>を参考にすれば問題ないと思われる。</p>

<p>次に、温度センサーをブレッドボードにつなぐために、付属のピンヘッダをはんだ付けする。<br/>
小さいので、ブリッジしないように注意する。(15年ぶりくらいにやったけど意外と出来た)</p>

<p><img src="http://blog.takady.net/images/2015-12-18-raspberry-pi-with-adt7410/IMG_5876.JPG" alt="" /></p>

<p><img src="http://blog.takady.net/images/2015-12-18-raspberry-pi-with-adt7410/IMG_5877.JPG" alt="" /></p>

<p>温度センサーを下記のようにブリッジボード経由で GND, VDD, SDA, SCL につなぐ。<br/>
どのピンが何なのかは <a href="https://www.raspberrypi.org/documentation/usage/gpio/">こちら</a>で確認。</p>

<p><img src="http://blog.takady.net/images/2015-12-18-raspberry-pi-with-adt7410/ADT7410_raspi_breadboard.png" alt="" /></p>

<p><img src="http://blog.takady.net/images/2015-12-18-raspberry-pi-with-adt7410/IMG_5878.JPG" alt="" /></p>

<p>そして <code>/etc/modules</code> に <code>i2c-bcm2708</code> を追記する。</p>

<pre><code>pi@raspberrypi:~ $ cat /etc/modules
# /etc/modules: kernel modules to load at boot time.
#
# This file contains the names of kernel modules that should be loaded
# at boot time, one per line. Lines beginning with "#" are ignored.

i2c-dev
i2c-bcm2708
</code></pre>

<p><code>/boot/config.txt</code> を編集。</p>

<pre><code>pi@raspberrypi:~ $ sudo vim /boot/config.txt

device_tree=bcm2708-rpi-b.dtb
device_tree_param=i2c1=on
device_tree_param=spi=on
</code></pre>

<p>再起動。</p>

<pre><code>pi@raspberrypi:~ $ sudo reboot
</code></pre>

<p>これでデバイスとつながった。</p>

<pre><code>pi@raspberrypi:~ $ sudo /usr/sbin/i2cdetect -y 1
     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
00:          -- -- -- -- -- -- -- -- -- -- -- -- --
10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
40: -- -- -- -- -- -- -- -- 48 -- -- -- -- -- -- --
50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
70: -- -- -- -- -- -- -- --
</code></pre>

<p>温度が取れているようだ。</p>

<pre><code>pi@raspberrypi:~ $ sudo i2cdump -y 1 0x48
No size specified (using byte-data access)
     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f    0123456789abcdef
00: 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c    ????????????????
10: 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c    ????????????????
20: 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 00    ???????????????.
30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
</code></pre>

<p>あとは、 ruby の <code>i2c-devices</code> という gem を利用して温度を取得するスクリプトを用意する。<br/>
ちなみに ruby はデフォルトで入っている。</p>

<pre><code>pi@raspberrypi:~ $ ruby -v
ruby 2.1.5p273 (2014-11-13) [arm-linux-gnueabihf]

pi@raspberrypi:~ $ sudo gem install i2c
pi@raspberrypi:~ $ sudo gem install i2c-devices

pi@raspberrypi:~ $ vim adt7410.rb
</code></pre>

<p>下記のような簡単なスクリプト。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;i2c/device/adt7410&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;i2c/driver/i2c-dev&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">device</span> <span class="o">=</span> <span class="no">I2CDevice</span><span class="o">::</span><span class="no">ADT7410</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">driver</span><span class="p">:</span> <span class="no">I2CDevice</span><span class="o">::</span><span class="no">Driver</span><span class="o">::</span><span class="no">I2CDev</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;/dev/i2c-1&#39;</span><span class="p">),</span> <span class="ss">address</span><span class="p">:</span> <span class="mh">0x48</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">device</span><span class="o">.</span><span class="n">calculate_temperature</span><span class="o">.</span><span class="n">round</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行結果。</p>

<pre><code>pi@raspberrypi:~ $ ruby adt7410.rb
26
</code></pre>

<p>この数値を 5分おきに focusligt に送るように crontab に設定する。</p>

<pre><code>pi@raspberrypi:~ $ crontab -l
*/5 * * * * curl -d number=`ruby adt7410.rb` http://localhost/api/myhome/living/temperature &gt;&gt; /home/pi/cron.log 2&gt;&amp;1
</code></pre>

<p>ブラウザから見てみると。</p>

<p><img src="http://blog.takady.net/images/2015-12-18-raspberry-pi-with-adt7410/focuslight.png" alt="" /></p>

<p>ちゃんと取れてる！</p>

<h1>まとめ</h1>

<p>Raspberry Pi と adt7410 で室内の温度を測ってグラフにした。<br/>
これで外出先から自宅の温度が確認できるようになった。<br/>
IRkit と組み合わせることで、外出先からもエアコンの消し忘れに気づき、電源を OFF にすることができる。<br/>
ハードウェアを使って何かするというの、かなりおもしろいものだなと思った。これからも電子工作してきたい。</p>

<h1>参考</h1>

<ul>
<li><a href="http://www.myu.ac.jp/~xkozima/lab/raspTutorial1.html">こじ研（Raspberry Pi）</a></li>
<li><a href="https://www.raspberrypi.org/documentation/usage/gpio/">GPIO: Raspberry Pi Models A and B - Raspberry Pi Documentation</a></li>
<li><a href="https://www.youtube.com/watch?v=Dz8hQGo3YwQ&amp;feature=youtu.be">ウェッブエンジニアのローレベルプログラミング / cho45 - YouTube</a></li>
<li><a href="https://github.com/cho45/ruby-i2c-devices">cho45/ruby-i2c-devices</a></li>
<li><a href="https://github.com/MozOpenHard/examples/blob/master/i2c-ADT7410/ADT7410.fzz">examples/ADT7410.fzz at master · MozOpenHard/examples</a></li>
<li><a href="http://www.e-ark.jp/2013/02/12/%E9%9B%BB%E5%AD%90%E5%9B%9E%E8%B7%AF%E8%A8%AD%E8%A8%88%E3%83%84%E3%83%BC%E3%83%AB-fritzing-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/">電子回路設計ツール Fritzing を使ってみた | ε-ARK Project</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails で /users/:id ではなく /:username な routing にする方法]]></title>
    <link href="http://blog.takady.net/blog/2015/11/29/rails-routing-with-username-instead-of-id/"/>
    <updated>2015-11-29T23:06:56+09:00</updated>
    <id>http://blog.takady.net/blog/2015/11/29/rails-routing-with-username-instead-of-id</id>
    <content type="html"><![CDATA[<p>rails で普通に scaffold すると id が URL に入って <code>example.com/users/:id</code> となる。<br/>
これを <code>twitter.com/takady7</code> とか <code>github.com/takady</code> みたいにしたい時がある。<br/>
実現には 2 通りの方法があると思われる。</p>

<h1>to_param を使う方法</h1>

<p>activerecord に <a href="http://railsdoc.com/references/to_param">to_param</a> というメソッドがあって、これを使うと URL の :id の部分に id 以外を指定できるようになる。</p>

<h2>user.rb</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:username</span>
</span><span class='line'>  <span class="n">validates_uniqueness_of</span> <span class="ss">:username</span><span class="p">,</span> <span class="ss">case_sensitive</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_param</span>
</span><span class='line'>    <span class="n">username</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>users_controller.rb</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">username</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>routes.rb</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">path</span><span class="p">:</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:show</span><span class="p">,</span> <span class="ss">:edit</span><span class="p">,</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ rake routes
    Prefix Verb   URI Pattern                        Controller#Action
 edit_user GET    /:id/edit(.:format)                users#edit
      user GET    /:id(.:format)                     users#show
           PATCH  /:id(.:format)                     users#update
           PUT    /:id(.:format)                     users#update
           DELETE /:id(.:format)                     users#destroy
</code></pre>

<h1>routing で param を設定する方法</h1>

<p>User クラスに to_param を定義せずに、 routes.rb で設定する方法。<br/>
<code>params[:username]</code> というふうに渡ってくるので、こちらの方が素直な気がして個人的にはこちらを使いたい。</p>

<h2>users_controller.rb</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">username</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:username</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>routes.rb</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">param</span><span class="p">:</span> <span class="ss">:username</span><span class="p">,</span> <span class="ss">path</span><span class="p">:</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:show</span><span class="p">,</span> <span class="ss">:edit</span><span class="p">,</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ rake routes
    Prefix Verb   URI Pattern                        Controller#Action
 edit_user GET    /:username/edit(.:format)          users#edit
      user GET    /:username(.:format)               users#show
           PATCH  /:username(.:format)               users#update
           PUT    /:username(.:format)               users#update
           DELETE /:username(.:format)               users#destroy
</code></pre>

<h1>参考</h1>

<ul>
<li><a href="http://stackoverflow.com/questions/7735315/rails-route-to-username-instead-of-id">ruby - Rails route to username instead of id - Stack Overflow</a></li>
<li><a href="http://railsdoc.com/references/to_param">to_param - リファレンス - - Railsドキュメント</a></li>
<li><a href="http://tnakamura.hatenablog.com/entry/2014/01/31/185214">Github みたいにパスの最初のセグメントでユーザー名を使う方法 - present</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[オブジェクト指向における再利用のためのデザインパターン を読んだ]]></title>
    <link href="http://blog.takady.net/blog/2015/11/04/gof-design-pattern/"/>
    <updated>2015-11-04T20:45:35+09:00</updated>
    <id>http://blog.takady.net/blog/2015/11/04/gof-design-pattern</id>
    <content type="html"><![CDATA[<p>いわゆる GoF 本を読んだ。</p>

<p><br /></p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&o=9&p=8&l=as1&asins=4797311126&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<h1>動機</h1>

<p>こういう設計に関する本は今まで読んだことがなくて、なんとなくそういうことは本で勉強するより実践から身につけるものなんだろうという考えがあったんだけど、チームリーダーからそういう本も読んでみたらいいよと言われたこともあり、どうせ読むなら一番ベタなやつをということでこの本を選んだ。</p>

<h1>感想</h1>

<p>書いてあるパターンには、よく知っているものから、よくわからないものまであった。<br/>
今までなんとなく書いていた書き方に、oo パターンという名前が付いたような感じ。<br/>
ただ、違いがいまいち理解出来ないものもあったりして、引き続き勉強しないとなと思った。</p>

<p>役に立ちそうなところとか、良かったと思ったことはこの辺だろうか。</p>

<ul>
<li><p>共通の設計用語が身につく</p>

<ul>
<li>oo パターンという名前によって伝えられるので、他の人にも伝えやすい。</li>
<li>他の開発者とのコミュニケーションの助けになると思う。</li>
</ul>
</li>
<li><p>先人の知恵を借りられる</p>

<ul>
<li>実践の中でぼんやりと見えてくるであろう良い設計というものが、この本を読むことで学べた。かもしれない。</li>
</ul>
</li>
<li><p>リファクタリングの道すじを考えやすくなる</p>

<ul>
<li>そもそも最初からデザインパターンを適用して設計すれば、リファクタリングの必要性すら減るのかもしれない。</li>
<li>既存のコードに対してリファクタリングをする際には、デザインパターンを適用出来ないか検討してみたい。拡張・保守しやすいものにするために。</li>
<li>もちろんそれを振りかざしてはいけないと思う。</li>
</ul>
</li>
</ul>


<p>実際に開発をするときには rails などのフレームワークを使うことがほぼ 100% なわけで、そのフレームワークが自然に求める書き方をするべきだと思っている。そうしないとそのフレームワークを選ぶ意味が無いから。同じように言語自体の特性というものもあるだろう。<br/>
言語、フレームワークとデザインパターンを上手く使いこなしていきたいし、アイデアの引き出しを増やす意味でもこの本を読んだ意味があったと思う。</p>

<h1>その他</h1>

<p>サンプルが C++ なのがつらくて、Ruby で書いてあるものを探したら <a rel="nofollow" href="http://www.amazon.co.jp/gp/product/4894712857/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4894712857&linkCode=as2&tag=takadayuichi-22">Rubyによるデザインパターン</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=takadayuichi-22&l=as2&o=9&a=4894712857" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> という本が見つかったが、残念ながら絶版になっていた。<br/>
web 上の記事としては <a href="http://morizyun.github.io/blog/ruby-design-pattern-matome-mokuzi/">Ruby 2.0.0で学ぶ、14個のデザインパターンを作りました[GoF][Design Pattern] - 酒と泪とRubyとRailsと</a> がかなり参考になった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[情熱プログラマー を読んだ]]></title>
    <link href="http://blog.takady.net/blog/2015/10/11/the-passionate-programmer/"/>
    <updated>2015-10-11T21:01:24+09:00</updated>
    <id>http://blog.takady.net/blog/2015/10/11/the-passionate-programmer</id>
    <content type="html"><![CDATA[<p>良い本だった。<br/>
さすが半谷さんオススメ本。<br/>
<br /></p>

<ul>
<li><p>4: 一番の下手くそでいよう</p></li>
<li><p>13: 師匠を探す<br/>
手本となる人物の特長10個を重要度で並べて、その10項目それぞれに対して、師匠は自分に10点中何点をつけるか考える。重要度から自分の評価点数を引いた値が高いものから順に、今すぐ始められる具体的なリストをまとめていく。</p></li>
<li><p>15: 一に練習、ニに練習</p></li>
<li><p>27: 保守作業の真価を知る<br/>
測定、改善、測定。そのうちゲームみたいに楽しくなってくるだろう。</p></li>
<li><p>38: 世界を変えよう<br/>
職場で自分が目撃した聖戦をリストにまとめる。まるで使命を帯びているように見えた人はいなかっただろうか。</p></li>
<li><p>39: 業界で名前を売ろう<br/>
ブログを始めよう。10分か20分で書けそうな話題で。</p></li>
<li><p>48: 市場に気を配る<br/>
今後1年間、アルファギークの仲間入りをすべく努力してみよう。あるいは、少なくともアルファギークの友達を一人作ろう。</p></li>
</ul>


<p>意外とキャリア戦略的な要素も入ってた。<br/>
あと、米国とインドの話と、Jave と .NET の話がちょいちょい出てきたのが印象に残った。<br/>
たまに読み返すのが良さそう。<br/>
<br /></p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&o=9&p=8&l=as1&asins=4274067939&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#isucon 5 予選で惨敗してきました]]></title>
    <link href="http://blog.takady.net/blog/2015/09/29/isucon5-qualifier/"/>
    <updated>2015-09-29T00:05:00+09:00</updated>
    <id>http://blog.takady.net/blog/2015/09/29/isucon5-qualifier</id>
    <content type="html"><![CDATA[<p>isucon5 予選で惨敗しました。</p>

<h1>出場の動機</h1>

<p>isucon というものの存在を知ってから、とにかく出てみたいと思っていた。<br/>
年初くらいには <a href="https://twitter.com/tatsuyaoiw">@tatsuyaoiw</a> に声を掛け快諾してくれていた。</p>

<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/takady7">@takady7</a> 出ましょう！ってまだだいぶ先じゃない？</p>&mdash; Tatsuya Oiwa (@tatsuyaoiw) <a href="https://twitter.com/tatsuyaoiw/status/565119787735330816">2015, 2月 10</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><br></p>

<p>予選の募集が始まった頃、あと一人誰誘おうと話してて、<a href="https://twitter.com/tatsuyaoiw">@tatsuyaoiw</a> が <a href="https://twitter.com/muratayusuke">@muratayusuke</a> を誘って、前職の同期3人で出ることが決定。<br/>
ちなみにチーム名の「八潮パークタウン」は、前職の会社の近くのバス停に停まるバスの行き先の名前で、たぶん3人の誰も実際に行ったことはない。</p>

<h1>準備期間</h1>

<p>予選のちょうど1週間前の土曜日に一度集まって、その時に主に isucon 関連の知見を晒し合った。<br/>
あと google cloud platform を触ってみたり、過去問をやったりした。<br/>
その後の1週間は、 bitbucket のリポジトリに各々が調べた sysctl やら tcpdump やら mysql やら nginx やらの設定やコマンドなどを md ファイルでとにかく上げて集めていった。この過程で、カーネルやネットワーク、DB 関連の知識が結構増えた。<br/>
このリポジトリを当日もかなり参考にしながら作業をしたので、とても役立った。<br/>
連絡は slack でとっていた。<br/>
個人的な反省点としては、いわゆる定石な実装をもっと試しておけば良かったと思っている。<br/>
例えば mysql にデータを入れている処理を redis に載せ替える実装とか、一度過去問でやっておけば当日もやれたはずだけど、当日はその辺自信なく積極的に担当出来なかった。</p>

<h1>予選当日の朝</h1>

<p><a href="https://twitter.com/tatsuyaoiw">@tatsuyaoiw</a> 邸に集まって作業した。<br/>
最寄り駅に着いた頃に、開始が１時間遅れる事がアナウンスされた。</p>

<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr">準備の兼ね合いで開始を1時間遅らせて11時開始、19時終了とします。寸前で申し訳ないですが宜しくお願いします。 <a href="https://twitter.com/hashtag/isucon?src=hash">#isucon</a></p>&mdash; くしい (@941) <a href="https://twitter.com/941/status/647570963026935808">2015, 9月 26</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>ちなみに、完璧な環境を用意してくれてた。</p>

<p><img src="http://blog.takady.net/images/posts/image4.png" width="400" alt="" /></p>

<h1>予選</h1>

<p>開始前にちょろっと最初に手を付けることをお互い話してて、git init やら nginx の設定やら mysql のスロークエリの設定を分担してやった。<br/>
ちなみに、最初 <code>/etc/my.cnf</code> が読み込まれなくて地味に設定に手間取った。<br/>
結果的に、 <code>/etc/mysql/conf.d/my.cnf</code> を作りそこに設定を書いた。<br/>
終了後に知ったけど、 AppArmor の設定のせいだった。</p>

<p><br>
<img src="http://blog.takady.net/images/posts/image2.png" width="600" alt="" /><br/>
<br></p>

<p>お題の web アプリは、<code>ISUxi</code> という mixi のようなサービスだった。</p>

<p><br>
<img src="http://blog.takady.net/images/posts/image3.png" width="600" alt="" /><br/>
<br></p>

<p>最初の ruby 実装のスコアは200ちょっとくらい。<br/>
最初のベンチが走った後は、出力された slow query を mysqldumpslow でサマって時間食ってるクエリを見て、「ここ index はるね」とか言って貼ったりして、スコアは 400 くらいに。<br/>
あと <a href="https://twitter.com/tatsuyaoiw">@tatsuyaoiw</a> による nginx 関連の設定、静的ファイルを nginx から返す設定などが入った。<br/>
ここで <a href="https://twitter.com/muratayusuke">@muratayusuke</a> が unicorn の worker 数を 8 に増やしたところスコアが 2000 まで上がる。ここで暫定4位に！</p>

<p>そのあと、重いクエリの内、footprints （あしあと）テーブルへのクエリが遅いということで、コードを読み、カレントユーザーID と来訪ユーザーID をつなげたものをキーにして、来訪時間を値に持っておけば redis に持たせられるよねって話しをして、 <a href="https://twitter.com/muratayusuke">@muratayusuke</a> が実装に取り掛かる。</p>

<p>nginx の access.log を解析したところトップページが重いということで、<code>index.erb</code> で n+1 な処理になっているところがいくつかあったので解消するように修正する作業にとりかかる。</p>

<p>先に footprints の redis 化が終わり、ベンチマークを回したところスコアが一気に 7000 までに上がる。この時点で暫定3位に！「いけるのでは？？」という期待がチームの中に高まる。</p>

<p>ちなみに n+1 対応は結果あまり効果なし。（しかもバグってて後で revert した 🙇）</p>

<p><code>ORDER BY created_at</code> としている部分は <code>ORDER BY id</code> で良いじゃん！って事でスコアアップを期待して修正したが、さほどスコア伸びず。</p>

<p>その後、トップページの html を非同期に生成して redis に入れておくという実装に <a href="https://twitter.com/muratayusuke">@muratayusuke</a> がチャレンジしている間、1番のスロークエリであるトップページの最新のコメントを取ってくる SELECT 文をどうにか出来ないか試行錯誤してた。</p>

<p>17時を過ぎた頃に、インスタンス再起動しても問題無く動くかを <a href="https://twitter.com/tatsuyaoiw">@tatsuyaoiw</a> が確認。<br/>
ちなみに、なぜか再起動前に 10000 を超えていたスコアが、再起動後は 8500 くらいになる。（再起動直後はキャッシュが温まってなかったのか？）</p>

<p>一応、序盤から気になっていた mysql との接続を port から unixソケットに変える修正をするが効果は +100 くらい。<br/>
もういっちょ気になってた session ストアを cookie から redis に変える修正もやって、 +1000 くらいでスコアは 9700 くらいに。</p>

<p>終了時刻が迫ってきていて、他チームのスコアがどんどん上がっている中、やはり1番のスロークエリをなんとかするしかないという事で、 <a href="https://twitter.com/tatsuyaoiw">@tatsuyaoiw</a> と話す中で、 join を無くすためにテーブルスキーマを非正規化する方法を思いつく。ここで残り30分。<br/>
本番機と別のインスタンスでカラム追加とコード修正して OK そうだということで、「頼む〜」とか言いながら期待しつつ本番機にデプロイしてベンチを回すと、スコア 200 とかになって膝から崩れ落ちそうになる。（追加したカラムに初期データを入れてあげないといけなかったのかな多分。）<br/>
結局 revert して、残り10分くらいで <a href="https://twitter.com/muratayusuke">@muratayusuke</a> のトップページの html の非同期生成の実装が出来上がりデプロイ。が、ベンチが fail してしまう。<br/>
残り2分ほどになり、旧コードに戻してベンチを掛けるが、19時になり、ベンチが間に合ったか不明。</p>

<h1>まとめ</h1>

<p>めちゃくちゃ楽しかったけど、めちゃくちゃ悔しい。<br/>
自分の対応があまりスコアアップに貢献出来なくて残念だった。<br/>
あとローカルでコードを動かせる環境を用意するのが初期データの点からも かなりめんどくさそうだったので、サーバ上でコード修正したりしたけど複数人で並行してやるのは結構気を使ったし、手元で動かせないと動くかの確認が出来なかったり、サーバにはいつもの git コマンドの alias が無くてイラッとしたり、エディタも vim で辛かったりした。この辺上手くできたら良かったな。</p>

<p>今回は力不足を感じたけど、腕を磨いて来年またチャレンジしたい。</p>

<p>ちなみに土曜日の予選には131組371人が参加してたらしい。<br/>
運営の方々、決勝も残っていますが、ひとまずお疲れ様でした！ありがとうございました！<br/>
<a href="https://twitter.com/tatsuyaoiw">@tatsuyaoiw</a> <a href="https://twitter.com/muratayusuke">@muratayusuke</a> ありがとう！</p>

<h1>2015/10/10 追記</h1>

<p>2015/10/06(火) に <a href="http://eventdots.jp/event/569858">ISUCON5予選報告会 in GCPUG Tokyo</a> で isucon5 予選の話を LT してきました。</p>

<div style="width: 65%">
  <script async class="speakerdeck-embed" data-id="d19476b7e9584f139cc5db92b7dd37f2" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WEB+DB PRESS plus の DB 本 3冊を読んで index を学んだ]]></title>
    <link href="http://blog.takady.net/blog/2015/09/24/read-books-about-database/"/>
    <updated>2015-09-24T18:43:39+09:00</updated>
    <id>http://blog.takady.net/blog/2015/09/24/read-books-about-database</id>
    <content type="html"><![CDATA[<p>シルバーウィークに、この3冊を読んだ。</p>

<ul>
<li><p><a href="http://www.amazon.co.jp/gp/product/4774150207/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4774150207&amp;linkCode=as2&amp;tag=takadayuichi-22">Webエンジニアのための データベース技術[実践]入門 (Software Design plus)</a></p>

<ul>
<li>RDBMS としては mysql を題材にしている。</li>
<li>インデックスから my.cnf の項目の説明や mysql のソースコードを読む所まで、 mysql をメインに書かれている。</li>
</ul>
</li>
<li><p><a href="http://www.amazon.co.jp/gp/product/4774171972/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4774171972&amp;linkCode=as2&amp;tag=takadayuichi-22">理論から学ぶデータベース実践入門 ~リレーショナルモデルによる効率的なSQL (WEB+DB PRESS plus)</a></p>

<ul>
<li>RDBMS の構造や設計についても書かれていて、正規化理論や NULL について、またインデックスの設計戦略までカバーされている。</li>
<li>個別の RDBMS 製品に偏った記載はほぼ無い。</li>
<li>著者は、<a href="http://nippondanji.blogspot.jp/">漢(オトコ)のコンピュータ道</a> の人。</li>
</ul>
</li>
<li><p><a href="http://www.amazon.co.jp/gp/product/4774173010/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4774173010&amp;linkCode=as2&amp;tag=takadayuichi-22">SQL実践入門──高速でわかりやすいクエリの書き方 (WEB+DB PRESS plus)</a></p>

<ul>
<li>SQL と実行計画を主軸に、効果的な SQL の書き方、実行計画の見方などについて書かれている。</li>
<li>クエリと実行計画のサンプルには、 Oracle と PostgresQL のものが使われている。</li>
</ul>
</li>
</ul>


<p>特に index について知りたかったのでその辺まとめとく。</p>

<h1>B+Tree</h1>

<p>RDBMS の index で最も使われている。<br/>
データ構造が木みたいに、ルート、ブランチ、リーフから成っている。<br/>
B+Tree は B-Tree と違って、必ずリーフノードに値を持つ。ブランチノードがコンパクトになり、検索の効率が良いらしい。</p>

<h1>index を貼ることのデメリット</h1>

<ul>
<li>更新処理が遅くなる</li>
<li>データ量が増える</li>
</ul>


<h1>index をはらない方が良いケース</h1>

<ul>
<li><p>データ件数が少ないテーブル</p>

<ul>
<li>index を参照してからデータ領域を参照することになるので、データ件数が少ない場合は逆にテーブルフルスキャンの方が速い。</li>
</ul>
</li>
<li><p>値のばらつきが少ないカラム</p>

<ul>
<li>boolean なカラムのように取りうる値にバラつきが少ないカラムや、大半のレコードに同じ値が入っているカラムには、 index を貼っても効果が少ない。逆に、1件に絞り込めるような値が入っているカラムは、インデックスが有効に作用する。</li>
<li>値のバラつきのことをカーディナリティ（集合の濃度）という。</li>
</ul>
</li>
</ul>


<h1>index は前方一致に対してのみ有効</h1>

<p>これは index 有効。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">WHERE</span> <span class="n">name</span> <span class="k">LIKE</span> <span class="s1">&#39;高田%&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは index 効かない。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">WHERE</span> <span class="n">name</span> <span class="k">LIKE</span> <span class="s1">&#39;%祐一&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>演算や関数にかけてしまうと index は効かない</h1>

<p>col1 に index を貼っていても、下記のクエリは index が効かない。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">WHERE</span> <span class="n">col1</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">&gt;</span> <span class="mi">123</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>index を効かせたい場合は、こうする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">WHERE</span> <span class="n">col1</span> <span class="o">&gt;</span> <span class="mi">123</span> <span class="o">/</span> <span class="mi">10</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>マルチカラムインデックスでは、カラムの順番も意味がある</h1>

<p>下記のクエリに対して効果的な index は、(col1, col2) ではなく (col2, col1) な index である。<br/>
index が前方一致な事を思い出す。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">WHERE</span> <span class="n">col1</span> <span class="o">&gt;</span> <span class="mi">100</span> <span class="k">AND</span> <span class="n">col2</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>index オンリースキャン</h1>

<p>index を貼ると、index を見てから、データ領域を参照する事になる。<br/>
しかし、index の参照だけで取得できるようなクエリだと、データ領域への参照が必要無いのでさらに高速になる。<br/>
(col1, col2) というindex を貼ってあるテーブル tbl に対して、下記のクエリを発行すると、index の参照だけで済む。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">col1</span><span class="p">,</span> <span class="n">col2</span> <span class="k">FROM</span> <span class="n">tbl</span> <span class="k">WHERE</span> <span class="n">col1</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">AND</span> <span class="n">col2</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>集計関数の場合も、うまく使えば index だけで済ませられる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">tbl</span> <span class="k">WHERE</span> <span class="n">col1</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">AND</span> <span class="n">col2</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>B+Tree はキーの順にソートされて格納されている</h1>

<p>index のキーはソートされているので、name に index があるテーブルに、下記のようなクエリを発行すると範囲検索とソートの両方にインデックスが使われるので高速。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">tbl</span> <span class="k">WHERE</span> <span class="n">name</span> <span class="k">LIKE</span> <span class="s1">&#39;高田%&#39;</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>まとめ</h1>

<p>index という概念が導入される前の hiveQL を長年使っていたので、 SQL は書けるけど index に対しては理解弱かったので、勉強になった。<br/>
頭の中で B+Tree をイメージすると、効果的な index をイメージしやすい気がする。<br/>
あと、前方一致の特徴などからも やはり index は、本の索引をイメージするとわかりやすい。</p>

<p><br>
<br>
<br></p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&o=9&p=8&l=as1&asins=4774150207&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>




<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&o=9&p=8&l=as1&asins=4774171972&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>




<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&o=9&p=8&l=as1&asins=4774173010&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[個人情報保護士認定試験を受験した]]></title>
    <link href="http://blog.takady.net/blog/2015/09/14/kojin-joho-hogo-shi/"/>
    <updated>2015-09-14T22:59:40+09:00</updated>
    <id>http://blog.takady.net/blog/2015/09/14/kojin-joho-hogo-shi</id>
    <content type="html"><![CDATA[<p><a href="http://www.joho-gakushu.or.jp/piip/piip.html">個人情報保護士認定試験</a></p>

<p>会社で必要になったので、9/13(日)に受験した。<br/>
下記の流れで2週間ほど勉強した。<br/>
<br></p>

<ol>
<li><a href="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=4820748866&amp;ref=qf_sp_asin_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr">公式テキスト</a>を読む</li>
<li><a href="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=4820748408&amp;ref=tf_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr">公式精選過去問題集</a>を解く</li>
<li>協会から送られてくる前回テストの問題を解く</li>
</ol>


<h1>公式テキストを読む</h1>

<p>僕はただ読むだけでは覚えられなかったので、大事そうな所や覚えにくい所はノートに書いた。<br/>
章末の「過去問チェック」まで解いたら、公式精選過去問集へ。</p>

<h1>公式精選過去問集を解く</h1>

<p>公式テキストで読んだ章に対応する問題を解く。<br/>
この問題集は、問題と解答が別の冊子に分かれてなくて、1問づつ問題と答えと解説が書いてあるので、使いやすかった。<br/>
間違えたり理解が完全でない問題は後で繰り返し解くために印を付けておいた。</p>

<h1>前回テストの問題を解く</h1>

<p>試験の1週間前くらいに協会から家に届いた。<br/>
試験前日に、時間を測って本番を想定して解いた。<br/>
この時点でちょうど8割くらい取れてる感じだった。<br/>
120分の試験時間に対して、90分くらいで解き終わった。</p>

<h1>当日</h1>

<p>問題文の日本語をよく読むことで解ける問題も結構あると感じていたので、落ち着いて解答した。<br/>
120分の試験時間に対して、70分くらいで終わって、残り時間は見直しを入念にした。</p>

<h1>感想</h1>

<p>試験は120分100問で、課題1が40問、課題2が60問ある。<br/>
課題1は、個人情報保護の総論といって、個人情報保護法とかJIS Q 15001 とかの理解度を問われるんだが、これが結構自分は難しかった。<br/>
課題2は、個人情報保護の対策で、自分がソフトウェアエンジニアなのもあると思うが、一般的な会社員としての知識で解ける問題が結構ある印象だった。</p>

<h1>2015.10.18 追記</h1>

<h3><strong>合格してました！</strong></h3>

<p><br>
<br>
<br></p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&o=9&p=8&l=as1&asins=4820748866&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>




<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&o=9&p=8&l=as1&asins=4820748408&ref=tf_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPC::Asia 2015 に行ってきた]]></title>
    <link href="http://blog.takady.net/blog/2015/08/22/yapc-asia-2015/"/>
    <updated>2015-08-22T21:00:19+09:00</updated>
    <id>http://blog.takady.net/blog/2015/08/22/yapc-asia-2015</id>
    <content type="html"><![CDATA[<p><a href="http://yapcasia.org/2015/">YAPC::Asia 2015</a> の前夜祭と2日目に行ってきた。</p>

<h1>前夜祭</h1>

<h2><a href="http://yapcasia.org/2015/talk/show/7d62caf8-12f4-11e5-881c-d9f87d574c3a">技術ブログを書くことについて語るときに僕の語ること</a></h2>

<p>ブログでブクマ数を稼ぐには、という話だった。<br/>
なるほど、という感じでとてもおもしろかった。</p>

<ul>
<li><p>ブログはタイトルが大事</p></li>
<li><p>投稿タイミングも大事</p>

<ul>
<li>平日の朝が良い

<ul>
<li>金曜の夜にテンション高く書き上げても、すぐに公開せずに一旦寝かせる</li>
</ul>
</li>
</ul>
</li>
</ul>


<h1>1日目</h1>

<p>不参加</p>

<h1>2日目</h1>

<h2><a href="http://yapcasia.org/2015/talk/show/86ebd212-fab3-11e4-8f5a-8ab37d574c3a">ISUCONの勝ち方</a></h2>

<p>isucon のための tips や チューニング方法についてのお話。<br/>
とても勉強になった。isucon 出たい。</p>

<ul>
<li><p>準備</p>

<ul>
<li>同僚や元同僚など、一緒に働いたことがあるエンジニア同士でチームを組んだ方が良い</li>
<li>sysctl.conf や my.cnf などの秘伝のタレは、どこかに手順と一緒にまとめておくなりして、すぐに適用できるようにしておく</li>
<li>できればプライベートリポジトリを用意しておく</li>
</ul>
</li>
<li><p>当日について</p>

<ul>
<li>7時間は意外と短い</li>
<li>最初の1時間は、課題、レギュレーション、アプリケーションを理解し、戦略を立てることに使う</li>
<li>最後の30分で、サーバを再起動しても動作する事を確認しておく</li>
<li>最初の状態をまず git に push しておく</li>
<li>こまめに commit して、問題が起きたらすぐに戻れるようにしておく</li>
<li>諦めたら、そこで終了ですよ</li>
</ul>
</li>
<li><p>チューニング</p>

<ul>
<li>sysctl の修正は基本的に最初にやっちゃう</li>
<li>web サーバのログを解析して、ベンチマークツールの動きを知る

<ul>
<li>アクセスが少ないポイントを頑張ってチューニングしても効果は少ない</li>
<li>どれだけエラーは許容されるのかを把握する</li>
</ul>
</li>
<li>mysql のデータ構造 B+Tree を頭でイメージする</li>
<li>strace, tcpdump, top, iftop, iotop などのコマンドを使えるようになっておく</li>
<li>特にスペックの低めなマシンの場合は、 apache よりも nginx の方が CPU のコンテキストスイッチが少なく済むので向いている</li>
</ul>
</li>
</ul>


<h2><a href="http://yapcasia.org/2015/talk/show/f2816038-10ec-11e5-89bf-d7f07d574c3a">我々はどのように冗長化を失敗したのか</a></h2>

<p>式年遷宮アーキテクチャの思想を持ってシステム構築して、最終的にどうなったのか、という話。<br/>
試行錯誤した体験を発表されていて、すごく良い話だった。<br/>
インフラの話は本当におもしろい。</p>

<p><a href="https://speakerdeck.com/kenjiskywalker/yapcasia2015">Speaker Deck</a> にすでにスライドが上がってるので、それが詳しい。</p>

<h2><a href="http://yapcasia.org/2015/talk/show/bd04b86c-f9de-11e4-b996-8ab37d574c3a">Adventures in Refactoring</a></h2>

<p>GitHub の中の人による、リファクタリングの話。<br/>
とにかくためになった。</p>

<ul>
<li><p>正しい振る舞いを keep していくことが大切</p></li>
<li><p>コードを減らすのが、良いリファクタリング</p>

<ul>
<li>１０行減ったら、それだけバグが減る :hocho:</li>
</ul>
</li>
<li><p>リファクタリングの理由</p>

<ol>
<li>Developer の Happiness のため</li>
<li>性能向上</li>
<li>将来の作業に向けての自信を得る</li>
<li>developer の教育</li>
</ol>
</li>
<li><p>メソッド名（動詞）を名詞にしてクラスにするというアイデア</p></li>
<li><p>メソッド名にアンダースコアが入っていたら、それはオブジェクトにできるかもしれない</p>

<ul>
<li><code>pull.branch_valid?</code> -> <code>pull.branch.valid?</code></li>
</ul>
</li>
<li><p>既存のバグ</p>

<ul>
<li>リファクタリングをやっている時にバグを直すべきではない</li>
</ul>
</li>
<li><p>大きなリファクタリングはリスク</p>

<ul>
<li>細かく区切っていくことが大切</li>
</ul>
</li>
<li><p>Deprecate</p>

<ul>
<li>_oldとか作る</li>
<li>後方互換を持たせる</li>
<li>たとえば gmail が AB テストしている時に、古いデザインに戻れる機能をユーザに提供しているように</li>
<li><a href="https://github.com/github/scientist">github/scientist</a> を使う</li>
</ul>
</li>
<li><p>feature の開発とリファクタリング、どちらを優先するかの基準は？</p>

<ul>
<li>リファクタリングせずに、その feature の開発をすることに自信がもてるかどうかで、どちらを優先するか決まると思う</li>
</ul>
</li>
<li><p>テストが無い時は、まずテスト書いてからリファクタリングするべき</p></li>
</ul>


<h2><a href="http://yapcasia.org/2015/talk/show/6bde6c69-187a-11e5-aca1-525412004261">Profiling &amp; Optimizing in Go</a></h2>

<p>Google の中の人による Go の話。<br/>
emacs でコードを書いてターミナルでコマンド結果を見ながらの発表という感じだった。<br/>
自分の知識不足でわからないことが結構あって、 Go もっと勉強したいと思った。</p>

<ul>
<li>ベンチマークの取得

<ul>
<li>Go には <code>benchcmp</code> というコマンドが同梱されていて、それを使ってベンチマーク結果を比較してどれだけ改善したかを見れるらしい</li>
</ul>
</li>
</ul>


<h2><a href="http://yapcasia.org/2015/talk/show/69caedbd-1872-11e5-aca1-525412004261">Lightning Talks Day 2</a></h2>

<p>どれも面白くて、LTらしくて勢いがあって良かった。</p>

<h1>まとめ</h1>

<p>今年は1日目に参加しなかったので、昨年に比べて、あっという間に終わった感じだった。<br/>
今年は会場が東京ビッグサイトで、去年の慶応日吉キャンパスとはまた違う雰囲気だった。<br/>
YAPC::Asia 今年で最後ということで残念だけど、今年も楽しかったし、聴いたセッションは全てとても勉強になるものだったので満足。</p>

<p>最後に運営の皆様、本当にお疲れ様でした！</p>
]]></content>
  </entry>
  
</feed>
