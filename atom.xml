<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yuichi Takada]]></title>
  <link href="http://takady.github.io/atom.xml" rel="self"/>
  <link href="http://takady.github.io/"/>
  <updated>2015-03-27T00:51:11+09:00</updated>
  <id>http://takady.github.io/</id>
  <author>
    <name><![CDATA[Yuichi Takada]]></name>
    <email><![CDATA[takadyuichi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[標準出力のjson文字列を手軽にpretty printする]]></title>
    <link href="http://takady.github.io/blog/2015/03/27/json-pp/"/>
    <updated>2015-03-27T00:41:40+09:00</updated>
    <id>http://takady.github.io/blog/2015/03/27/json-pp</id>
    <content type="html"><![CDATA[<p><code>jq</code>使えばいいんですが，入ってない時とかに．</p>

<pre><code>$ echo '{ "foo": "bar", "test": 10 }' | python -mjson.tool
{
    "foo": "bar",
    "test": 10
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apache_log-parserを修正してBenchmarkをとってみた]]></title>
    <link href="http://takady.github.io/blog/2015/02/11/apache-log-parser-benchmark/"/>
    <updated>2015-02-11T16:53:46+09:00</updated>
    <id>http://takady.github.io/blog/2015/02/11/apache-log-parser-benchmark</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/takady/apache_log-parser">takady/apache_log-parser</a></p>

<p>先週，とある機会に，とあるエンジニアの方が，僕が作った<a href="https://github.com/takady/apache_log-parser">apache_log-parser</a>というrubyのgemに対してアドバイスをしてくれた．<br/>
「parseメソッド呼ぶ度に毎回Patternクラスのインスタンスとか作ったりしてるけど，Parserをクラスにして，最初にインスタンス作る時に1回だけやるようにした方が効率良いよ」みたいな指摘だった．確かにその通りだった．指摘ありがとうございます！<br/>
ついでに，修正する前と後でパフォーマンスどれだけ良くなったのかを，rubyの標準ライブラリのBenchmarkを使って計測してみた．</p>

<p>benchmark.rb自体はこんな感じで，100万行parseするのにかかる時間を計測している．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$LOAD_PATH</span><span class="o">.</span><span class="n">unshift</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../lib&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;apache_log/parser&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;benchmark&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">common_line</span> <span class="o">=</span> <span class="s1">&#39;127.0.0.1 - - [20/May/2014:20:04:04 +0900] &quot;GET /test/indx.html HTTP/1.1&quot; 200 4576&#39;</span>
</span><span class='line'><span class="n">combined_line</span> <span class="o">=</span> <span class="s1">&#39;192.168.0.1 - - [07/Jun/2014:14:58:55 +0900] &quot;GET /category/electronics HTTP/1.1&quot; 200 128 &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:9.0.1) Gecko/20100101 Firefox/9.0.1&quot;&#39;</span>
</span><span class='line'><span class="n">customized_line</span> <span class="o">=</span> <span class="s1">&#39;192.168.0.1 - - [07/Feb/2011:10:59:59 +0900] &quot;GET /x/i.cgi/net/0000/ HTTP/1.1&quot; 200 9891 &quot;-&quot; &quot;DoCoMo/2.0 P03B(c500;TB;W24H16)&quot; virtualhost.example.jp &quot;192.0.2.16794832933550&quot; &quot;09011112222333_xx.ezweb.ne.jp&quot; 533593&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">common_parser</span> <span class="o">=</span> <span class="no">ApacheLog</span><span class="o">::</span><span class="no">Parser</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;common&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">combined_parser</span> <span class="o">=</span> <span class="no">ApacheLog</span><span class="o">::</span><span class="no">Parser</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;combined&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">customized_parser</span> <span class="o">=</span> <span class="no">ApacheLog</span><span class="o">::</span><span class="no">Parser</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;combined&#39;</span><span class="p">,</span> <span class="sx">%w(vhost usertrack mobileid request_duration)</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="mi">1_000_000</span>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">bm</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s1">&#39;common:&#39;</span><span class="p">)</span>     <span class="p">{</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="n">common_parser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">common_line</span><span class="p">)}</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s1">&#39;combined:&#39;</span><span class="p">)</span>   <span class="p">{</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="n">combined_parser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">combined_line</span><span class="p">)}</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s1">&#39;customized:&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="n">customized_parser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">customized_line</span><span class="p">)}</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Before</h2>

<p>まず，修正前のコードでのベンチマーク．</p>

<pre><code>$ ruby benchmark.rb
                   user     system      total        real
common:      125.630000   0.180000 125.810000 (125.889122)
combined:    151.530000   0.440000 151.970000 (152.090644)
customized:  186.610000   0.460000 187.070000 (187.200379)
</code></pre>

<h2>After</h2>

<p>次に，修正後のコードでのベンチマーク．</p>

<pre><code>$ ruby benchmark.rb
                   user     system      total        real
common:       20.770000   0.020000  20.790000 ( 20.797196)
combined:     30.090000   0.050000  30.140000 ( 30.161369)
customized:   40.240000   0.070000  40.310000 ( 40.388290)
</code></pre>

<p>めちゃくちゃ改善された！！</p>

<h1>参考</h1>

<p><a href="http://a-newcomer.com/29">RubyでのBenchmarkの取り方をば。</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[embulk-plugin-sqlite3を作った]]></title>
    <link href="http://takady.github.io/blog/2015/02/08/embulk-plugin-sqlite3/"/>
    <updated>2015-02-08T22:17:00+09:00</updated>
    <id>http://takady.github.io/blog/2015/02/08/embulk-plugin-sqlite3</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/takady/embulk-plugin-sqlite3">takady/embulk-plugin-sqlite3</a></p>

<h1>embulkとは</h1>

<p>いわゆるbulk loaderと言われる並列にデータを移動させるためのプロダクトの一つ．embulkがユニークなのはinput/outputなどの部分がpluggableになっている点．<br/>
つまり，データの移動に際して発生するリソースへの接続処理の実装や，データのクレンジング・フォーマット変換，その他必要になる雑多な処理をプラグインという形で定義しておくことで，再利用しやすくなるというわけ．</p>

<h2>Fluentdとの違い</h2>

<p>同じくTreasure Data社が開発しているFluentdも，input/outputのpluginをrubyで書けるなど，一見同じ感じである．<br/>
ただ，Fluentdのユースケースは<strong>リアルタイム</strong>にlogを流すという部分であり，一方でembulkは<strong>バッチ処理</strong>でデータをimport/exportする用途にフォーカスしているというところに違いがある．</p>

<h1>導入</h1>

<p><a href="https://github.com/embulk/embulk">embulkのREADME.md</a>にはjarをdownloadしてきて使う方法だけが書かれているが，普通にrubygems.orgにリリースされているので<code>gem install</code>で入れられる．</p>

<pre><code>$ gem install embulk
</code></pre>

<p>そして，<code>embulk gem install</code>でpluginをinstallする．</p>

<pre><code>$ embulk gem install embulk-plugin-sqlite3
Fetching: jdbc-sqlite3-3.8.7.gem (100%)
Successfully installed jdbc-sqlite3-3.8.7
Fetching: embulk-plugin-sqlite3-0.0.1.gem (100%)
Successfully installed embulk-plugin-sqlite3-0.0.1
2 gems installed
</code></pre>

<h1>実行</h1>

<p>今回はexampleのcsvファイルを，sqlite3のテーブルにloadしてみる.</p>

<p>下記で，exampleのcsvファイルを生成する．</p>

<pre><code>$ embulk example /tmp
$ embulk guess /tmp/example.yml -o /tmp/config.yml
</code></pre>

<p><code>/tmp/config.yml</code>のoutputの設定を下記のように修正する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">out</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">sqlite3</span>
</span><span class='line'>  <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="s">&#39;/tmp/test.db&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">table</span><span class="p-Indicator">:</span> <span class="s">&#39;load01&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>embulk run</code>する．</p>

<pre><code>$ embulk run /tmp/config.yml
2015-02-08 22:29:38,623 [INFO]: main:org.embulk.standards.LocalFileInputPlugin: Listing local files with prefix '/tmp/csv'
2015-02-08 22:29:38,885 [INFO]: main:org.embulk.exec.LocalExecutor: Running 1 tasks using 8 local threads
2015-02-08 22:29:38,885 [INFO]: main:org.embulk.exec.LocalExecutor: {done:  0 / 1, running: 0}
2015-02-08 22:29:39,035 [INFO]: main:org.embulk.exec.LocalExecutor: {done:  1 / 1, running: 0}
Output finished. Commit reports = [{"records":4}]
2015-02-08 22:29:39,041 [INFO]: main:org.embulk.command.Runner: next config: {"in":{},"out":{}}
</code></pre>

<p>テーブルの中身を確認すると，insertできていることがわかる．</p>

<pre><code>$ sqlite3 /tmp/test.db
SQLite version 3.7.13 2012-07-17 17:46:21
Enter ".help" for instructions
Enter SQL statements terminated with a ";"
sqlite&gt; .schema load01
CREATE TABLE load01(`id` integer,`account` integer,`time` text,`purchase` text,`comment` text);
sqlite&gt; select * from load01;
1|32864|2015-01-27 19:23:49 UTC|2015-01-27 00:00:00 UTC|embulk
2|14824|2015-01-27 19:01:23 UTC|2015-01-27 00:00:00 UTC|embulk jruby
3|27559|2015-01-28 02:20:02 UTC|2015-01-28 00:00:00 UTC|embulk core
4|11270|2015-01-29 11:54:36 UTC|2015-01-29 00:00:00 UTC|Embulk "csv" parser plugin
sqlite&gt;
</code></pre>

<h1>まとめ</h1>

<p>embulk自体がjrubyで書かれており，pluginでC拡張のgemは使えないみたい．<br/>
なので，DB接続する場合はjdbc-sqlite3などのgemを使うことになる．(間違ってたら指摘お願いします)<br/>
あと，pluginの作り方のベスト・プラクティスがまだわからない．</p>

<h1>参考</h1>

<ul>
<li><a href="https://github.com/embulk/embulk">embulk/embulk</a></li>
<li><a href="http://dev.classmethod.jp/tool/embulk-ataglance/">Treasure Dataの新データ転送ツールEmbulkを触ってみた #dtm_meetup ｜ Developers.IO</a></li>
<li><a href="http://www.slideshare.net/frsyuki/embuk-making-data-integration-works-relaxed">Embulk, an open-source plugin-based parallel bulk data loader</a></li>
<li><a href="https://github.com/frsyuki/embulk-plugin-postgres-json">frsyuki/embulk-plugin-postgres-json</a></li>
<li><a href="https://github.com/takebayashi/embulk-plugin-input-hbase">takebayashi/embulk-plugin-input-hbase</a></li>
<li><a href="https://github.com/jruby/activerecord-jdbc-adapter">jruby/activerecord-jdbc-adapter</a></li>
<li><a href="https://bitbucket.org/xerial/sqlite-jdbc/overview">xerial / sqlite-jdbc — Bitbucket</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[はじめてのcoreos/rocket]]></title>
    <link href="http://takady.github.io/blog/2015/01/13/coreos-rocket/"/>
    <updated>2015-01-13T19:46:35+09:00</updated>
    <id>http://takady.github.io/blog/2015/01/13/coreos-rocket</id>
    <content type="html"><![CDATA[<p>rocketとは, CoreOS社が開発しているDockerのalternative実装で, まだprototypeという位置づけである.<br/>
<a href="https://github.com/coreos/rocket/blob/master/Documentation/getting-started-guide.md">rocket/getting-started-guide.md at master · coreos/rocket</a>を通して, rocketをCoreOS上で動かしてみた.</p>

<h1>vagrantでCoreOSのVMを用意</h1>

<p>まず, CoreOSの環境を用意する.</p>

<pre><code>$ git clone https://github.com/coreos/coreos-vagrant/
$ cd coreos-vagrant
$ vagrant up
$ vagrant ssh
Last login: Tue Jan 13 08:50:19 2015 from 10.0.2.2
CoreOS alpha (557.0.0)
core@core-01 ~ $
</code></pre>

<h1>rkt, actool, goのinstall</h1>

<h2>rkt</h2>

<pre><code>core@core-01 ~ $ wget https://github.com/coreos/rocket/releases/download/v0.1.1/rocket-v0.1.1.tar.gz
core@core-01 ~ $ tar zxf rocket-v0.1.1.tar.gz
</code></pre>

<h2>actool</h2>

<pre><code>core@core-01 ~ $ wget https://github.com/appc/spec/releases/download/v0.1.1/appc-spec-v0.1.1.tar.gz
core@core-01 ~ $ tar zxf appc-spec-v0.1.1.tar.gz
</code></pre>

<h2>go</h2>

<p><a href="http://qiita.com/hnakamur/items/8cda520807f571409f6c#4-1">OSX + Vagrant + CoreOSでKubernetesを試してみた - Qiita</a>を参考にした.<br/>
ちなみに, go1.4だと次のhello.goがうまくビルド出来くて, 断念して1.3系を入れた.(<a href="https://github.com/coreos/rocket/issues/270">参考</a>)</p>

<pre><code>core@core-01 ~ $ wget https://storage.googleapis.com/golang/go1.3.3.linux-amd64.tar.gz
core@core-01 ~ $ sudo mkdir /opt
core@core-01 ~ $ sudo tar zxf go1.3.3.linux-amd64.tar.gz -C /opt/
</code></pre>

<h2>GOPATH等の設定</h2>

<p>bash_profileはシムリンクを削除して実ファイルを用意した.</p>

<pre><code>core@core-01 ~ $ ls -l ~/.bash_profile
lrwxrwxrwx 1 core core 34 Jan  9 04:47 /home/core/.bash_profile -&gt; ../../usr/share/skel/.bash_profile
core@core-01 ~ $ rm ~/.bash_profile
core@core-01 ~ $ cat &lt;&lt;'EOF' &gt;&gt; ~/.bash_profile
&gt;
&gt; export GOROOT=/opt/go
&gt; export GOPATH=~/go
&gt; export PATH=$GOROOT/bin:$GOPATH/bin:$PATH
&gt; EOF

core@core-01 ~ $ mkdir ~/go
core@core-01 ~ $ exec $SHELL -l
core@core-01 ~ $ go version
go version go1.3.3 linux/amd64
</code></pre>

<h1>サンプルアプリケーション作成</h1>

<h2>hello.goの作成とビルド</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;log&quot;</span>
</span><span class='line'>    <span class="s">&quot;net/http&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">http</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;request from %v\n&quot;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">RemoteAddr</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">w</span><span class="p">.</span><span class="nx">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&quot;hello\n&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:5000&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ビルドする.</p>

<pre><code>core@core-01 ~ $ CGO_ENABLED=0 GOOS=linux go build -a -tags netgo -ldflags '-w' hello.go
</code></pre>

<h2>manifest.jsonの作成</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;acKind&quot;</span><span class="p">:</span> <span class="s2">&quot;ImageManifest&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;acVersion&quot;</span><span class="p">:</span> <span class="s2">&quot;0.1.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;coreos.com/hello&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;labels&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;version&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;val&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;arch&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;val&quot;</span><span class="p">:</span> <span class="s2">&quot;amd64&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;os&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;val&quot;</span><span class="p">:</span> <span class="s2">&quot;linux&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;app&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;user&quot;</span><span class="p">:</span> <span class="s2">&quot;root&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;group&quot;</span><span class="p">:</span> <span class="s2">&quot;root&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;exec&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="s2">&quot;/bin/hello&quot;</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>        <span class="nt">&quot;ports&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;www&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;protocol&quot;</span><span class="p">:</span> <span class="s2">&quot;tcp&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;port&quot;</span><span class="p">:</span> <span class="mi">5000</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>validationする.</p>

<pre><code>core@core-01 ~ $ ./appc-spec-v0.1.1/actool -debug validate manifest.json
manifest.json: valid ImageManifest
</code></pre>

<h1>App Container Image(ACI)のビルド</h1>

<pre><code>core@core-01 ~ $ mkdir -p hello-layout/rootfs/bin
core@core-01 ~ $ cp -i manifest.json hello-layout/manifest
core@core-01 ~ $ cp -i hello hello-layout/rootfs/bin/
core@core-01 ~ $ ./appc-spec-v0.1.1/actool build hello-layout/ hello.aci
core@core-01 ~ $ ./appc-spec-v0.1.1/actool -debug validate hello.aci
hello.aci: valid app container image
</code></pre>

<p>ちなみに, ACIはtarなので,下記で中身を確認できる.</p>

<pre><code>core@core-01 ~ $ tar tvf hello.aci
drwxr-xr-x 500/500           0 2015-01-13 10:26 rootfs
drwxr-xr-x 500/500           0 2015-01-13 10:26 rootfs/bin
-rwxr-xr-x 500/500     4383427 2015-01-13 10:26 rootfs/bin/hello
-rw-r--r-- root/root       510 2015-01-13 10:27 manifest
</code></pre>

<h1>ACIの起動</h1>

<p>ここでcontainerを起動し, helloアプリがhttpリクエストを受けられる状態になる.<br/>
ちなみに, containerを落としたい時は<code>ctrl-]</code>を3回押す.</p>

<pre><code>core@core-01 ~ $ sudo ./rocket-v0.1.1/rkt --debug run hello.aci
2015/01/13 10:27:43 Unpacking stage1 rootfs
2015/01/13 10:27:43 Writing stage1 init
2015/01/13 10:27:43 Wrote filesystem to /var/lib/rkt/containers/5c59cdfd-648a-421f-8390-74f8cea7306c
2015/01/13 10:27:43 Loading image sha256-9454dfc3433953623bbe91fe09608a4dd44a7d21dbb9da093adb2f9d44f97005
2015/01/13 10:27:43 Writing container manifest
2015/01/13 10:27:43 Pivoting to filesystem /var/lib/rkt/containers/5c59cdfd-648a-421f-8390-74f8cea7306c
2015/01/13 10:27:43 Execing stage1/init
Spawning container stage1 on /var/lib/rkt/containers/5c59cdfd-648a-421f-8390-74f8cea7306c/stage1.
Press ^] three times within 1s to kill container.
Timezone UTC does not exist in container, not updating container timezone.
systemd 215 running in system mode. (-PAM -AUDIT -SELINUX +IMA -SYSVINIT +LIBCRYPTSETUP -GCRYPT -ACL -XZ +SECCOMP -APPARMOR)
Detected virtualization 'systemd-nspawn'.
Detected architecture 'x86-64'.

Welcome to Linux!

Initializing machine ID from container UUID.
[  OK  ] Created slice -.slice.
[  OK  ] Created slice system.slice.
         Starting Graceful exit watcher...
[  OK  ] Started Graceful exit watcher.
         Starting coreos.com/hello...
[  OK  ] Started coreos.com/hello.
[  OK  ] Reached target Rocket apps target.
</code></pre>

<h2>アクセスしてみる</h2>

<pre><code>core@core-01 ~ $ curl 127.0.0.1:5000
hello
</code></pre>

<h2>アクセスログが表示される</h2>

<pre><code>2015/01/13 10:31:30 request from 127.0.0.1:36742
</code></pre>

<h1>環境</h1>

<h2>OSX</h2>

<ul>
<li>OSX 10.9.5</li>
<li>Vagrant 1.6.5</li>
</ul>


<h2>CoreOS</h2>

<ul>
<li>CoreOS alpha (557.0.0)</li>
<li>go 1.3.3</li>
</ul>


<h1>参考</h1>

<ul>
<li><a href="https://github.com/coreos/rocket/blob/master/Documentation/getting-started-guide.md">rocket/getting-started-guide.md at master · coreos/rocket</a></li>
<li><a href="https://github.com/kelseyhightower/rocket-tutorial">kelseyhightower/rocket-tutorial</a></li>
<li><a href="http://qiita.com/mopemope/items/9f163e4715a8bb5846e9">CoreOS - はじめてのRocket - Qiita</a></li>
<li><a href="http://qiita.com/mopemope/items/fa9424b094aae3eac580">CoreOS 入門 - Qiita</a></li>
<li><a href="http://qiita.com/gom/items/0bfc1925a7fddfcdfdaf">Vagrant + CoreOS + Docker でコンテナ環境体験 - Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014年まとめ]]></title>
    <link href="http://takady.github.io/blog/2014/12/31/2014-summary/"/>
    <updated>2014-12-31T19:26:56+09:00</updated>
    <id>http://takady.github.io/blog/2014/12/31/2014-summary</id>
    <content type="html"><![CDATA[<p>今年はコードを書く楽しさを知った１年だった<br/>
去年までのコードをほとんど書いてなかった時間が悔やまれるけど、来年も前向きにいきたい</p>

<h1>よかったこと</h1>

<ul>
<li>rubygems.orgに4つgemを出した

<ul>
<li><a href="https://rubygems.org/profiles/takady">https://rubygems.org/profiles/takady</a></li>
</ul>
</li>
<li>テストコード書くようになった</li>
<li>ruby/railsを業務で使う機会を得られた</li>
<li>会社のCI環境を整えた</li>
<li>勉強会に参加するようになった(YAPC::Asia、RubyKaigi、RubyWorld Conference、他)</li>
<li>Ruby Advent Calenderに当日飛び入り参加した

<ul>
<li><a href="http://takady.github.io/blog/2014/12/07/file-safe-logger/">rubyのloggerをnewした後にログファイルを削除するとどうなるのか | Yuichi Takada</a></li>
</ul>
</li>
</ul>


<h1>わるかったこと</h1>

<ul>
<li>勉強会は、聞く側としてしか参加できなかった</li>
</ul>


<h2>1月</h2>

<ul>
<li>Hadoopでデータ処理するチームから、webアプリを書けるチームに移った</li>
<li>会社の都合でここから3ヶ月間仙台での生活が始まった</li>
<li><a href="http://rebuild.fm/">rebuild.fm</a>を発見してハマった、毎日聞いた、今も何回も繰り返し聞いてる</li>
</ul>


<h2>2月</h2>

<ul>
<li>1年かけて、何か一つ言語をまともに書けるようになりたいと思い、仙台の本屋で平積みされていたパーフェクトRubyという本を買った</li>
<li><a href="http://tagomoris.hatenablog.com/entry/2014/02/25/091607">あるブログエントリ</a>を読んで、<a href="https://github.com/takady">githubアカウント</a>を作り直した</li>
</ul>


<h2>3月</h2>

<ul>
<li>業務で始めてrubyでスクリプト書いた</li>
<li>macbook air買った</li>
<li>jenkinsをチームに導入した</li>
<li>認定スクラムマスターという研修を受けて認定を取得した</li>
</ul>


<h2>4月</h2>

<ul>
<li>仙台から東京に戻った</li>
<li><a href="http://regional.rubykaigi.org/oedo04/">大江戸Ruby会議04</a>に参加して、みんな楽しそうと思った</li>
<li>良い目標が思いついた
  <blockquote class="twitter-tweet" lang="ja"><p>今年の目標は、たくさん失敗することだ … <a href="http://t.co/Cy4xjffowl"><a href="http://t.co/Cy4xjffowl">http://t.co/Cy4xjffowl</a></a></p>&mdash; takady (@takady7) <a href="https://twitter.com/takady7/status/458937108955004928">2014, 4月 23</a></blockquote></li>
</ul>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2>5月</h2>

<ul>
<li>いくつか勉強会行った

<ul>
<li><a href="http://takady7.tumblr.com/post/85298039456/rails-why-choose-ruby-on-rails">【Railsセミナー】Why choose Ruby on Rails ? に行ってきた</a></li>
<li><a href="http://takady7.tumblr.com/post/85727186336/gree-tech-talk-05">GREE Tech Talk #05 : 並行/並列プログラミング</a></li>
<li><a href="http://takady7.tumblr.com/post/86500885716/heroku-meetup-12">Heroku Meetup #12 に行ってきた</a></li>
</ul>
</li>
</ul>


<h2>6月</h2>

<ul>
<li>27歳になっちゃった</li>
<li>始めてrubygemsにgemを出した

<ul>
<li><a href="http://qiita.com/takady/items/a4858c09b56e2b185814">apache logをパースするgemを作ってrubygems.orgに公開してみた - Qiita</a></li>
</ul>
</li>
<li>hipchat、hubotをチームに導入した</li>
</ul>


<h2>7月</h2>

<ul>
<li>会社のでかめのプロジェクトのリリースが無事終わった</li>
<li>組織の色々があった
  <blockquote class="twitter-tweet" lang="ja"><p>やっぱ言いたいこととか疑問とかはちゃんとぶつけた方がいいな&#10;それで相入れなくても、かげで文句言ってるよりもいいと思う</p>&mdash; takady (@takady7) <a href="https://twitter.com/takady7/status/486426378556813313">2014, 7月 8</a></blockquote></li>
</ul>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<ul>
<li>勉強会行った

<ul>
<li><a href="http://takady7.tumblr.com/post/91457205306/api-meetup-tokyo-1">API Meetup Tokyo #1</a></li>
<li><a href="http://takady7.tumblr.com/post/92888711266/2-ruby-on-rails">第2回「Ruby on Rails チュートリアル」ハンズオンセミナー</a></li>
</ul>
</li>
</ul>


<h2>8月</h2>

<ul>
<li>自分のgemを更新したり、新しく出したりした</li>
<li>テストコードの良さを身を持って実感し始めた</li>
<li>有給取ってYAPC::Asia行って、最高に楽しかった

<ul>
<li><a href="http://takady7.tumblr.com/post/96242359616/yapc-asia-tokyo-2014">YAPC::Asia Tokyo 2014</a></li>
</ul>
</li>
</ul>


<h2>9月</h2>

<ul>
<li>有給取ってrubyKaigiに行った

<ul>
<li><a href="http://takady7.tumblr.com/post/98302265911/rubykaigi2014">RubyKaigi2014に行ってきた</a></li>
</ul>
</li>
<li>terminal環境を整えて、emacsを使いはじめる

<ul>
<li><a href="http://takady7.tumblr.com/post/98303277811/zsh-ghq-peco-tmux">zsh、ghq、peco、tmuxなどについて</a></li>
</ul>
</li>
<li>社内rubyコミュニティの集まりに顔を出してみた

<ul>
<li><a href="http://takady7.tumblr.com/post/98803250651/meetup-1-20140930-issue-1-aoyokorb-aoyoko-rb">meetup #1 20140930 · Issue #1 · Aoyokorb/Aoyoko.rb&hellip;</a></li>
</ul>
</li>
</ul>


<h2>10月</h2>

<ul>
<li>会社のrails案件でコードたくさん書いた</li>
</ul>


<h2>11月</h2>

<ul>
<li>会社のrails案件でコードたくさん書いた</li>
<li>会社のPCもmacにしてもらえた</li>
<li>RubyWorld Conferenceで初めて島根に行った</li>
<li>blogをtumblrからoctopress on github pagesに変えた</li>
<li>Goに興味を持ち始める</li>
<li>Go Conferenceにも行った</li>
</ul>


<h2>12月</h2>

<ul>
<li>会社のrails案件でコードたくさん書いた</li>
<li>12/07のRuby Advent Calenderが当日に急遽空いた事に気づいたので、僭越ながら書かせてもらった

<ul>
<li><a href="http://takady.github.io/blog/2014/12/07/file-safe-logger/">rubyのloggerをnewした後にログファイルを削除するとどうなるのか | Yuichi Takada</a></li>
</ul>
</li>
<li>もっと一次情報を得たいと思い、Feedlyで海外を含めたblogポストをチェックするようになった</li>
</ul>


<h1>来年について</h1>

<ul>
<li>LTするとか、今年よりもっとアウトプットしたい</li>
<li>英語の記事も読んで情報をもっと早く得る</li>
<li>毎週何か作って出すくらいの勢いでOSS活動する</li>
<li>githubで100スターくらい取れるようなものを作る</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[facebook graph apiのAccess Tokenを取得するまで]]></title>
    <link href="http://takady.github.io/blog/2014/12/29/facebook-graph-api-oauth-flow/"/>
    <updated>2014-12-29T17:45:20+09:00</updated>
    <id>http://takady.github.io/blog/2014/12/29/facebook-graph-api-oauth-flow</id>
    <content type="html"><![CDATA[<p>OAuth2について、わかってたつもりでわかってないので、<br/>
<a href="https://github.com/nov/fb_graph">nov/fb_graph</a>を通して、facebook graph apiでAccess Tokenを発行するところまでを追ってみた</p>

<h1>TL;DR</h1>

<p>この面倒なtoken生成作業は、<a href="https://developers.facebook.com/">https://developers.facebook.com/</a>のTools > Graph API Explorerで、<br/>
Get Access Tokenとボタンを押すと生成できるので、すぐtokenを生成したいのなら、下記を読まずにそこから生成するのが楽で良い</p>

<h1>1.まずfacebookにappを登録</h1>

<p><a href="https://developers.facebook.com/">https://developers.facebook.com/</a>のApps > Add a New Appで作成できる<br/>
この時、リダイレクト先URLも下記から設定しておくこと<br/>
Settings > Advanced > Security > Valid OAuth redirect URIs</p>

<h1>2.App IDとApp Secretを確認</h1>

<p>先ほど作成したAppのDashboardに行って確認できる</p>

<h1>3.client_idとredirect_url付きのGETリクエストを送信</h1>

<p>下記のようにリクエストする</p>

<pre><code>GET https://graph.facebook.com/oauth/authorize?client_id=&lt;Your App ID&gt;&amp;redirect_uri=&lt;Your Redirect URL&gt;
</code></pre>

<h1>4.リダイレクトされたurlのAuthorization Codeパラメータの値を確認</h1>

<p>下記のような感じである</p>

<pre><code>http://example.com?code=&lt;Your Authorization Code&gt;
</code></pre>

<h1>5.POSTリクエストを送信してAccess Tokenを取得</h1>

<p>取得したAuthorization Codeを含め、パラメータとして下記をセットしてPOSTでリクエストする</p>

<pre><code>POST https://graph.facebook.com/oauth/access_token

 grant_type: authorization_code
 code: &lt;Your Authorization Code&gt;
 redirect_uri: &lt;Your Redirect URL&gt;
 client_id: &lt;Your App ID&gt;
 client_secret: &lt;Your App Secret&gt;
</code></pre>

<p>レスポンスのbodyは下記のようになっている</p>

<pre><code>access_token=&lt;Your Access Token&gt;  
</code></pre>

<p>この生成されたaccess_tokenを使って、facebook graph apiを利用する事ができる</p>

<h1>6.Access Tokenの有効期限を伸ばす</h1>

<p>facebook graph apiの場合、このままだとAccess Tokenの有効期限が短すぎる<br/>
下記のGETリクエストを送ることで、有効期限を60日間に伸ばす事ができる</p>

<pre><code>GET https://graph.facebook.com/oauth/access_token?grant_type=fb_exchange_token&amp;client_id=&lt;Your App ID&gt;&amp;client_secret=&lt;Your App Secret&gt;&amp;fb_exchange_token=&lt;Your Access Token&gt;  
</code></pre>

<h1>まとめ</h1>

<p>OAuth2、Access Token取得後はそれだけでAPIとやりとりできるからシンプルで良いけど、Access Tokenを取得するまでがめんどくさい<br/>
ブラウザ無しでtoken発行やりたかった(<a href="https://github.com/nov/fb_graph/wiki/Authentication#javascript-sdk">Javascript SDK</a>使ったらできるのか?)<br/>
Facebookでは上記フローだが、twitterとかgithubとか他のサービスもまったく同じなわけじゃないので、他も触ってみたい</p>

<h1>参考</h1>

<p><a href="http://stackoverflow.com/questions/21978728/obtaining-a-facebook-auth-token-for-a-command-line-desktop-application">ruby - Obtaining a Facebook auth token for a command-line (desktop) application - Stack Overflow</a><br/>
<a href="http://rebuild.fm/43/">Rebuild: 43: Kent is More Professional (Kenn Ejima)</a><br/>
<a href="https://github.com/nov/fb_graph/wiki">Home · nov/fb_graph Wiki</a><br/>
<a href="http://morizyun.github.io/blog/facebook-event-api-ruby-fb_graph/">公開中のFacebook EventをGraph APIから取得する - 酒と泪とRubyとRailsと</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rubyのloggerをnewした後にログファイルを削除するとどうなるのか]]></title>
    <link href="http://takady.github.io/blog/2014/12/07/file-safe-logger/"/>
    <updated>2014-12-07T18:01:52+09:00</updated>
    <id>http://takady.github.io/blog/2014/12/07/file-safe-logger</id>
    <content type="html"><![CDATA[<p><strong>この投稿は<a href="http://qiita.com/advent-calendar/2014/ruby">Ruby Advent Calendar 2014</a>の7日目の記事です。</strong></p>

<p>rubyには標準添付ライブラリにloggerクラスがある。<br/>
そのloggerクラス、newした後に出力先のログファイルが削除された時の挙動について調べた。<br/>
そして、<a href="https://github.com/takady/file_safe_logger">file_safe_logger</a>というgemを作った。</p>

<h1>検証</h1>

<p>下記のようにして、<code>Logger.new</code>と<code>logger.info</code>の間でファイルを削除してみる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;logger&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;fileutils&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">logfile</span> <span class="o">=</span> <span class="s1">&#39;test.log&#39;</span>
</span><span class='line'><span class="n">logger</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">logfile</span><span class="p">)</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">rm</span><span class="p">(</span><span class="n">logfile</span><span class="p">)</span>
</span><span class='line'><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;this is test&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは、結果としてはエラーにはならず正常終了するが、test.logというファイルはカレントディレクトリに存在せず、もちろん<code>this is test</code>というlogも残っていない。</p>

<h1>FileSafeLogger</h1>

<p>ファイルが削除されるとlogging出来ないというのが困る時がある。<br/>
なので、<a href="https://github.com/takady/file_safe_logger">file_safe_logger</a>というgemを作った。<br/>
やってることはいたって単純で、<a href="https://github.com/ruby/ruby/blob/trunk/lib/logger.rb#L593-L612">Logger::LogDevice.#write</a>メソッドをoverrideして、ファイルが存在しない場合は作成しているだけである。<br/>
<a href="https://github.com/takady/file_safe_logger">file_safe_logger</a>を使って、先ほどのlogging処理と同じ処理をやってみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;file_safe_logger&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;fileutils&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">logfile</span> <span class="o">=</span> <span class="s1">&#39;test.log&#39;</span>
</span><span class='line'><span class="n">logger</span> <span class="o">=</span> <span class="no">FileSafeLogger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">logfile</span><span class="p">)</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">rm</span><span class="p">(</span><span class="n">logfile</span><span class="p">)</span>
</span><span class='line'><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;this is test&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これの実行後、カレントディレクトリには<code>test.log</code>が存在し、下記のようにlogが書き出されている。</p>

<pre><code>$ cat test.log
# Logfile created on 2014-12-06 17:07:53 +0900 by logger.rb/44203
I, [2014-12-06T17:07:53.884806 #1547]  INFO -- : this is test
</code></pre>

<h1>参考</h1>

<p><a href="https://github.com/sonots/process_safe_logger">sonots/process_safe_logger</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[チームで情報をスタックするためのwikiの運用で気をつけていること]]></title>
    <link href="http://takady.github.io/blog/2014/12/03/documentation/"/>
    <updated>2014-12-03T21:14:11+09:00</updated>
    <id>http://takady.github.io/blog/2014/12/03/documentation</id>
    <content type="html"><![CDATA[<p>僕のいるチームでは<a href="https://www.atlassian.com/ja/software/confluence">Confluence</a>を使っているが、一般的なwikiのようなものであれば適用できる話だと思う。<br/>
ちなみにこれは個人的に気をつけていることであって、他のメンバーに強制してるとかはない。<br/>
twitterとかblogのようなフローの情報ではなく、スタックするタイプの情報管理は、下記のようなことを意識してないと結構すぐに破綻する気がしてる。</p>

<h1>階層を深くしすぎない</h1>

<p>wikiはサイト全体をツリー構造に構築するものだが、だいたい３~4階層までにしときたい。<br/>
深すぎると辿っていくような遷移をする時に面倒だから。<br/>
wiki全体の階層構造としては、大体下記くらいの深さ&amp;粒度が良い気がしてる。</p>

<pre><code>-- Installation
   |-- moduleA
   |-- moduleB
   |-- :
   `-- :
-- FYI
   |-- rails tips
   |-- git tips
   |-- LGTM images
   |-- :
   `-- :
-- Dev&amp;Ops
   |-- CI
   |-- source code management policy
   |-- trouble shoot
   |-- :
   `-- :
-- Minutes
   |-- daily scrum
   |   |-- 2014-01
   |   |-- 2014-02
   |   |-- 2014-03
   |   |-- :
   |   `-- :
   |-- :
   `-- :
</code></pre>

<h1>ページを細かく分けて増やし過ぎない</h1>

<p>何か書こうと思った時には、新しいページを作りたくなるんだが、ページが分かれすぎてると見る人が大変になる。<br/>
なるべく同じページ内で章を分けたりして、ページが乱立するのを避ける。<br/>
開発関連のドキュメントの場合は、一つのページが縦に長くなっていても、そんなに気にならないと個人的には感じている。</p>

<h1>別のページをincludeはなるべくしない</h1>

<p>なんか、includeしてるorginのページを編集するのがすごく面倒だから、includeはなるべく使わないようにしている。<br/>
たいていはリンク貼っておくだけで全然問題ない。</p>

<h1>検索可能にする</h1>

<p>当たり前だけど、文字なら文字として書く。<br/>
confluenceには&#8221;この階層以下を検索&#8221;とかって機能があって、結構それ使って検索することがある。<br/>
画像貼っただけのページとかだと、キーワード検索で引っかからなくてつらかったりする。</p>

<h1>英語と日本語の両方で書く</h1>

<p>チームには日本人もいるし外国人もいるので、下記のように英語と日本語に両方で書いてる。</p>

<pre><code>We use rspec version3.(私たちはrspec3を使います。)
Should keep code coverage 100%.(テストのコードカバレッジは100%を保ちましょう。)
</code></pre>

<h1>メンテする</h1>

<p>これが一番難しくて今でも困ってるんだが、ドキュメントは時間が経つと腐っていくので、適宜内容は更新していかないといけない。<br/>
APIドキュメントとかならコードから機械的に生成するとかもやったりしているが、<br/>
機械的に生成出来ない類のドキュメントもあるし、これはもう定期的にチェックしていくしかないかなーという気がしてる。<br/>
賞味期限を設けて、それを超えるとアラートするとかすると辛くなりそうだしなぁ。</p>

<h1>まとめ</h1>

<p>いろいろ書いたけど結局のところ、メンバーが見やすく探しやすく書きやすい状態を保っときたいという話でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[development環境だけbefore_actionをスキップする]]></title>
    <link href="http://takady.github.io/blog/2014/12/03/skip-before-action-on-development-env/"/>
    <updated>2014-12-03T21:02:25+09:00</updated>
    <id>http://takady.github.io/blog/2014/12/03/skip-before-action-on-development-env</id>
    <content type="html"><![CDATA[<p>最近railsでapi開発をしていて、もちろんテストコード書いてるんだけど、<br/>
たまにブラウザからGETリクエスト送ってサクッとjsonの中を見たいって時に、認証があって見れない。。。ってパターンがかなりある。<br/>
開発環境では、認証しなくていいやと思った。<br/>
下記のようにすることで、before_actionをdevelopment環境ではスキップさせられる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:authenticate</span> <span class="k">unless</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">development?</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">authenticate</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>参考</h1>

<p><a href="http://memo.yomukaku.net/entries/127">Rails.env.development?でdevelopment環境かどうかを判定できる - memo.yomukaku.net</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[railsでmysqlのbooleanなカラムをエイリアスで扱う時の注意事]]></title>
    <link href="http://takady.github.io/blog/2014/12/02/rails-mysql-boolean/"/>
    <updated>2014-12-02T18:07:11+09:00</updated>
    <id>http://takady.github.io/blog/2014/12/02/rails-mysql-boolean</id>
    <content type="html"><![CDATA[<p>rails+mysqlな環境では、booleanで定義したカラムはtinyint(1)で作られ、中身はtrue/falseではなく、0/1が入る。<br/>
そして、railsアプリケーション上でmysqlのtinyint(1)型データを扱う時、値は自動的にtrue/falseとして扱われる。<br/>
そこまでは知っていたんだけど、<code>select('foobar_flg as fb_flg')</code>というふうに、カラム名をエイリアスして取り出すと値が0/1なのは知らなかった。</p>

<p>具体的には下記のとおりである。</p>

<pre><code>pry(main)&gt; p = User.select(:foobar_flg)
  User Load (10.5ms)  SELECT  `users`.`foobar_flg` FROM `users`
=&gt; [#&lt;User id: nil, foobar_flg: false&gt;]
pry(main)&gt; p.first.foobar_flg
=&gt; false

pry(main)&gt; p = User.select('foobar_flg as fb_flg')
  User Load (5.8ms)  SELECT  foobar_flg as fb_flg FROM `users`
=&gt; [#&lt;User id: nil&gt;]
pry(main)&gt; p.first.fb_flg
=&gt; 0
</code></pre>

<p>ちなみに、selectメソッドの引数に文字列を指定したから0/1が返ってくるというわけではない。<br/>
下記のようにエイリアス無しなら、文字列で指定してもtrue/falseに解釈される。</p>

<pre><code>pry(main)&gt; p = User.select('foobar_flg')
  User Load (10.0ms)  SELECT  `users`.`foobar_flg` FROM `users`
=&gt; [#&lt;User id: nil, foobar_flg: false&gt;]
pry(main)&gt; p.first.foobar_flg
=&gt; false
</code></pre>

<p>このままだと結構困る。<br/>
結論としては、<strong>as使わない</strong>で済むならそれが最善手だと思う。<br/>
が、それが無理なら、例えば下記のようにModelのattributeメソッドをoverrideしちゃうのが良さそう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">fb_flg</span>
</span><span class='line'>  <span class="n">read_attribute</span><span class="p">(</span><span class="ss">:fb_flg</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>参考</h1>

<p><a href="http://stackoverflow.com/questions/373731/override-activerecord-attribute-methods">ruby on rails - Override ActiveRecord attribute methods - Stack Overflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[turnipを使ってシナリオテストを自動化]]></title>
    <link href="http://takady.github.io/blog/2014/11/26/turnip/"/>
    <updated>2014-11-26T19:17:48+09:00</updated>
    <id>http://takady.github.io/blog/2014/11/26/turnip</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/jnicklas/turnip">turnip</a>は、シナリオテストを自然言語風のDSLで記述・実行させることができるruby製のツールです。<br/>
ここでは、wikipediaを開いて「カブ」を検索するというシナリオを例にしてみます。</p>

<h1>事前に</h1>

<p>webページの操作には<a href="https://github.com/jnicklas/capybara">Capybara</a>を使います。<br/>
今回はrackアプリではないので、HTTP通信を行うためのdriverを別途用意する必要があります。<br/>
今回は比較的導入が楽でありHeadless(GUIを必要としない)ドライバであるPhantomJSを利用します。<br/>
OSXであれば、下記でインストールできます。</p>

<pre><code>$ brew install phantomjs
</code></pre>

<h1>準備</h1>

<p>まずディレクトリを用意しましょう。<br/>
今回は、railsなどとは組み合わせず、シンプルにturnipだけを使います。</p>

<pre><code>$ mkdir turnip_sample
$ cd !$

$ bundle init
</code></pre>

<p>Gemfileに下記を記載し、<code>bundle install</code>を実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s2">&quot;https://rubygems.org&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;turnip&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;capybara&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;poltergeist&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>rspecとturnipの設定ファイルを用意します。</p>

<pre><code>$ rspec init
$ echo '-r turnip/rspec' &gt;&gt; .rspec
</code></pre>

<p><code>spec/turnip_helper.rb</code>を下記の内容で作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;turnip/capybara&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara/poltergeist&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">default_driver</span> <span class="o">=</span> <span class="ss">:poltergeist</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&quot;spec/**/*steps.rb&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="nb">load</span> <span class="n">f</span><span class="p">,</span> <span class="kp">true</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、turnipでwebアプリのシナリオテストを書く準備が整いました。</p>

<h1>featureファイル</h1>

<p>featureファイルを下記の内容で作成します。</p>

<p>spec/features/sample.feature</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Text'><span class='line'>Feature: 検索する
</span><span class='line'>
</span><span class='line'>  Scenario: wikipediaでカブを検索する
</span><span class='line'>    Given wikipediaトップページにアクセスする
</span><span class='line'>    When wikipediaトップページを表示する
</span><span class='line'>    Then ウィキペディアへようこそと表示されている
</span><span class='line'>    And searchにカブを入力する
</span><span class='line'>    And searchButtonボタンをクリックする
</span><span class='line'>    Then アブラナ科アブラナ属の越年草と表示されている
</span></code></pre></td></tr></table></div></figure>


<p>featureファイルは、いわゆるテストシナリオの定義ファイルです。<br/>
自然言語で書ける(日本語にも対応している)ため、非エンジニアにとっても理解しやすいと思います。</p>

<h1>stepファイル</h1>

<p>stepファイルを下記の内容で作成します。</p>

<p>spec/steps/sample_step.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">step</span> <span class="s1">&#39;wikipediaトップページにアクセスする&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Capybara</span><span class="o">.</span><span class="n">app_host</span> <span class="o">=</span> <span class="s2">&quot;http://ja.wikipedia.org&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">step</span> <span class="s1">&#39;wikipediaトップページを表示する&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">visit</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">step</span> <span class="sx">%(:textと表示されている)</span> <span class="k">do</span> <span class="o">|</span><span class="n">text</span><span class="o">|</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">step</span> <span class="sx">%(:fieldに:valueを入力する)</span> <span class="k">do</span> <span class="o">|</span><span class="n">field</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>  <span class="n">fill_in</span> <span class="n">field</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="n">value</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">step</span> <span class="sx">%(:textボタンをクリックする)</span> <span class="k">do</span> <span class="o">|</span><span class="n">text</span><span class="o">|</span>
</span><span class='line'>  <span class="n">click_button</span> <span class="n">text</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>テスト実行</h1>

<p>無事にテストが通過するはずです。</p>

<pre><code>$ rspec
JQMIGRATE: Logging is active
JQMIGRATE: Logging is active
.

Finished in 5.6 seconds (files took 0.29979 seconds to load)
1 example, 0 failures
</code></pre>

<h1>featureファイルとstepファイルの関係</h1>

<p>featureファイルが自然言語風なDSLなのでイメージしにくいかもしれませんが、featureファイルから、stepファイルに定義したメソッド(実際にはstep)を呼び出している、と考えるとわかりやすいかと思います。<br/>
上記の例ですと、<br/>
featureファイルの<code>Then ウィキペディアへようこそと表示されている</code>という記述で、stepファイルの、<code>step %(:textと表示されている)</code>のstepが呼ばれます。<br/>
<code>:text</code>とすることで、そこに入る文字列を動的に指定出来て汎用的になります。</p>

<h1>参考</h1>

<p><a href="http://magazine.rubyist.net/?0042-FromCucumberToTurnip">Rubyist Magazine - エンドツーエンドテストの自動化は Cucumber から Turnip へ</a><br/>
<a href="http://techracho.bpsinc.jp/hachi8833/2014_06_26/18068">[RSpec][Turnip] 一般的に使えるTurnipステップ集 | TechRacho</a><br/>
<a href="http://gongo.hatenablog.com/entry/2013/05/29/223218">Turnip について (1) / まずは動かす - Thanks Driven Life</a><br/>
<a href="http://orangain.hatenablog.com/entry/turnip">Ruby製アプリじゃなくてもTurnipで自動受け入れテストがしたい - orangain flavor</a><br/>
<a href="http://qiita.com/moriyaman/items/af2a0264adbaaa0d2029">Rails + Turnip + Capybara + poltergeistでBDDテスト - Qiita</a><br/>
<a href="http://tmpla.info/installation-of-capybara-webkit/">Capybara WebkitをCentOSで使えるようにする方法 – 日本の天ぷら情報</a><br/>
<a href="http://qiita.com/take/items/779747e0981355e569ad">poltergeist - Capybaraを使う際に知っておきたいこと - Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rubyのloggerでlogのヘッダを出力しない]]></title>
    <link href="http://takady.github.io/blog/2014/11/22/disable-ruby-log-header/"/>
    <updated>2014-11-22T13:11:18+09:00</updated>
    <id>http://takady.github.io/blog/2014/11/22/disable-ruby-log-header</id>
    <content type="html"><![CDATA[<p>rubyのLoggerを使っていると、Logger.newした際に生成されるlogファイルには、デフォルトで下記のようなヘッダが出力される。<br/>
<code># Logfile created on 2014-11-22 13:15:26 +0900 by logger.rb/44203</code></p>

<p>これを出したくない場合は、下記のようにヘッダをつける<a href="https://github.com/ruby/ruby/blob/trunk/lib/logger.rb#L649-L653">Logger::LogDevice#add_log_header</a>メソッドを空にoverrideすると良い。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Logger</span><span class="o">::</span><span class="no">LogDevice</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_log_header</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">log</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;info.log&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>参考</h1>

<p><a href="http://stackoverflow.com/questions/4096336/can-i-disable-the-log-header-for-ruby-logger">Can I disable the log header for ruby logger? - Stack Overflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[railsで、複数の出力先にlogを出力する]]></title>
    <link href="http://takady.github.io/blog/2014/11/21/rails-logger-broadcast/"/>
    <updated>2014-11-21T18:57:07+09:00</updated>
    <id>http://takady.github.io/blog/2014/11/21/rails-logger-broadcast</id>
    <content type="html"><![CDATA[<p>railsアプリケーションで、error以上のレベルのログだけ、２箇所にログを出力したいと思った。</p>

<h1>前提</h1>

<p>ruby 2.1.2<br/>
rails 4.1.4</p>

<h1>方法</h1>

<p>まず、複数の出力先にロギングするには、<a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/logger.rb#L10-L42">ActiveSupport::Logger.#broadcast</a>というメソッドが使える。<br/>
config/application.rbのMyapp::Applicationクラス内に下記のように書いてみた。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">logger</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">config</span><span class="o">.</span><span class="n">paths</span><span class="o">[</span><span class="s2">&quot;log&quot;</span><span class="o">].</span><span class="n">first</span><span class="p">)</span>
</span><span class='line'><span class="n">error_logger</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;log/error.log&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">error_logger</span><span class="o">.</span><span class="n">level</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">::</span><span class="no">ERROR</span>
</span><span class='line'><span class="n">logger</span><span class="o">.</span><span class="n">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Logger</span><span class="o">.</span><span class="n">broadcast</span><span class="p">(</span><span class="n">error_logger</span><span class="p">)</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">logger</span> <span class="o">=</span> <span class="n">logger</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、複数箇所にログが出力されるようにはなった。<br/>
しかし、今回やりたかったのは、<strong>ERROR以上の時だけ</strong>２箇所にロギングしたいというもので、上記のようにconfig/application.rbでextendした場合、error_loggerのlevelをERRORにセットしていても、Rails.loggerのlevelと同じlevelでのloggingになってしまう。<br/>
全く同じエラーログを複数箇所に吐かせたいというだけであれば、上記の方法で良いと思う。(その際、上記の<code>error_logger.level = Logger::ERROR</code>は意味が無いので消した方が良い)</p>

<p>error_logger.levelの指定が効くようにするには、<code>run Rails.application</code>よりも後で、error_loggerをRails.loggerにextendすると良い。<br/>
config.ruに下記を追記する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">run</span> <span class="no">Rails</span><span class="o">.</span><span class="n">application</span>
</span><span class='line'>
</span><span class='line'><span class="n">error_logger</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;log/error.log&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">error_logger</span><span class="o">.</span><span class="n">level</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">::</span><span class="no">ERROR</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Logger</span><span class="o">.</span><span class="n">broadcast</span><span class="p">(</span><span class="n">error_logger</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、log/error.logへは、ERRORレベル以上のログだけが出力されるようになった。<br/>
もちろん、log/development.logには、これまでどおりDEBUGレベルまで含めた全てのlogが出ている。</p>

<h1>参考</h1>

<p><a href="http://blog.livedoor.jp/sonots/archives/38927788.html">[Ruby] 例えば、Rails の標準ログを止める - sonots:blog</a><br/>
<a href="http://railsdoc.eiel.info/active_support/logger/">RailsDoc - ActiveSupport::Logger</a><br/>
<a href="http://mitsu877.hatenablog.com/entry/2014/11/15/193547">【Rails】バッチの実行ログを専用のログファイルと標準出力の両方に出す - おどるダメ人間</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress]]></title>
    <link href="http://takady.github.io/blog/2014/11/15/fist-of-octopress/"/>
    <updated>2014-11-15T15:52:35+09:00</updated>
    <id>http://takady.github.io/blog/2014/11/15/fist-of-octopress</id>
    <content type="html"><![CDATA[<p>今更ながら、octopress使ってみる。<br/>
markdownで書いて、投稿がterminalからできるってのが良いです。</p>
]]></content>
  </entry>
  
</feed>
