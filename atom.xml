<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yuichi Takada]]></title>
  <link href="http://takady.github.io/atom.xml" rel="self"/>
  <link href="http://takady.github.io/"/>
  <updated>2014-11-22T13:29:10+09:00</updated>
  <id>http://takady.github.io/</id>
  <author>
    <name><![CDATA[Yuichi Takada]]></name>
    <email><![CDATA[takadyuichi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rubyのloggerでlogのヘッダを出力しない]]></title>
    <link href="http://takady.github.io/blog/2014/11/22/disable-ruby-log-header/"/>
    <updated>2014-11-22T13:11:18+09:00</updated>
    <id>http://takady.github.io/blog/2014/11/22/disable-ruby-log-header</id>
    <content type="html"><![CDATA[<p>rubyのLoggerを使っていると、Logger.newした際に生成されるlogファイルには、デフォルトで下記のようなヘッダが出力される。<br/>
<code># Logfile created on 2014-11-22 13:15:26 +0900 by logger.rb/44203</code></p>

<p>これを出したくない場合は、下記のようにヘッダをつける<a href="https://github.com/ruby/ruby/blob/trunk/lib/logger.rb#L649-L653">Logger::LogDevice#add_log_header</a>メソッドを空にoverrideすると良い。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Logger</span><span class="o">::</span><span class="no">LogDevice</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_log_header</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">log</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;info.log&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>参考</h1>

<p><a href="http://stackoverflow.com/questions/4096336/can-i-disable-the-log-header-for-ruby-logger">Can I disable the log header for ruby logger? - Stack Overflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[railsで、複数の出力先にlogを出力する]]></title>
    <link href="http://takady.github.io/blog/2014/11/21/rails-logger-broadcast/"/>
    <updated>2014-11-21T18:57:07+09:00</updated>
    <id>http://takady.github.io/blog/2014/11/21/rails-logger-broadcast</id>
    <content type="html"><![CDATA[<p>railsアプリケーションで、error以上のレベルのログだけ、２箇所にログを出力したいと思った。</p>

<h1>前提</h1>

<p>ruby 2.1.2<br/>
rails 4.1.4</p>

<h1>方法</h1>

<p>まず、複数の出力先にロギングするには、<a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/logger.rb#L10-L42">ActiveSupport::Logger.#broadcast</a>というメソッドが使える。<br/>
config/application.rbのMyapp::Applicationクラス内に下記のように書いてみた。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">logger</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">config</span><span class="o">.</span><span class="n">paths</span><span class="o">[</span><span class="s2">&quot;log&quot;</span><span class="o">].</span><span class="n">first</span><span class="p">)</span>
</span><span class='line'><span class="n">error_logger</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;log/error.log&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">error_logger</span><span class="o">.</span><span class="n">level</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">::</span><span class="no">ERROR</span>
</span><span class='line'><span class="n">logger</span><span class="o">.</span><span class="n">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Logger</span><span class="o">.</span><span class="n">broadcast</span><span class="p">(</span><span class="n">error_logger</span><span class="p">)</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">logger</span> <span class="o">=</span> <span class="n">logger</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、複数箇所にログが出力されるようにはなった。<br/>
しかし、今回やりたかったのは、<strong>ERROR以上の時だけ</strong>２箇所にロギングしたいというもので、上記のようにconfig/application.rbでextendした場合、error_loggerのlevelをERRORにセットしていても、Rails.loggerのlevelと同じlevelでのloggingになってしまう。<br/>
全く同じエラーログを複数箇所に吐かせたいというだけであれば、上記の方法で良いと思う。(その際、上記の<code>error_logger.level = Logger::ERROR</code>は意味が無いので消した方が良い)</p>

<p>error_logger.levelの指定が効くようにするには、<code>run Rails.application</code>よりも後で、error_loggerをRails.loggerにextendすると良い。<br/>
config.ruに下記を追記する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">run</span> <span class="no">Rails</span><span class="o">.</span><span class="n">application</span>
</span><span class='line'>
</span><span class='line'><span class="n">error_logger</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;log/error.log&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">error_logger</span><span class="o">.</span><span class="n">level</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">::</span><span class="no">ERROR</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Logger</span><span class="o">.</span><span class="n">broadcast</span><span class="p">(</span><span class="n">error_logger</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、log/error.logへは、ERRORレベル以上のログだけが出力されるようになった。<br/>
もちろん、log/development.logには、これまでどおりDEBUGレベルまで含めた全てのlogが出ている。</p>

<h1>参考</h1>

<p><a href="http://blog.livedoor.jp/sonots/archives/38927788.html">[Ruby] 例えば、Rails の標準ログを止める - sonots:blog</a><br/>
<a href="http://railsdoc.eiel.info/active_support/logger/">RailsDoc - ActiveSupport::Logger</a><br/>
<a href="http://mitsu877.hatenablog.com/entry/2014/11/15/193547">【Rails】バッチの実行ログを専用のログファイルと標準出力の両方に出す - おどるダメ人間</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress]]></title>
    <link href="http://takady.github.io/blog/2014/11/15/fist-of-octopress/"/>
    <updated>2014-11-15T15:52:35+09:00</updated>
    <id>http://takady.github.io/blog/2014/11/15/fist-of-octopress</id>
    <content type="html"><![CDATA[<p>今更ながら、octopress使ってみる。<br/>
markdownで書いて、投稿がterminalからできるってのが良いです。</p>
]]></content>
  </entry>
  
</feed>
