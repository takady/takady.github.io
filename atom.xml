<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yuichi Takada]]></title>
  <link href="http://takady.github.io/atom.xml" rel="self"/>
  <link href="http://takady.github.io/"/>
  <updated>2015-10-11T21:51:15+09:00</updated>
  <id>http://takady.github.io/</id>
  <author>
    <name><![CDATA[Yuichi Takada]]></name>
    <email><![CDATA[takadyuichi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[情熱プログラマーを読んだ]]></title>
    <link href="http://takady.github.io/blog/2015/10/11/the-passionate-programmer/"/>
    <updated>2015-10-11T21:01:24+09:00</updated>
    <id>http://takady.github.io/blog/2015/10/11/the-passionate-programmer</id>
    <content type="html"><![CDATA[<p>良い本だった。<br/>
さすが半谷さんオススメ本。<br/>
<br /></p>

<ul>
<li><p>4: 一番の下手くそでいよう</p></li>
<li><p>13: 師匠を探す<br/>
手本となる人物の特長10個を重要度で並べて、その10項目それぞれに対して、師匠は自分に10点中何点をつけるか考える。重要度から自分の評価点数を引いた値が高いものから順に、今すぐ始められる具体的なリストをまとめていく。</p></li>
<li><p>15: 一に練習、ニに練習</p></li>
<li><p>27: 保守作業の真価を知る<br/>
測定、改善、測定。そのうちゲームみたいに楽しくなってくるだろう。</p></li>
<li><p>38: 世界を変えよう<br/>
職場で自分が目撃した聖戦をリストにまとめる。まるで使命を帯びているように見えた人はいなかっただろうか。</p></li>
<li><p>39: 業界で名前を売ろう<br/>
ブログを始めよう。10分か20分で書けそうな話題で。</p></li>
<li><p>48: 市場に気を配る<br/>
今後1年間、アルファギークの仲間入りをすべく努力してみよう。あるいは、少なくともアルファギークの友達を一人作ろう。</p></li>
</ul>


<p>意外とキャリア戦略的な要素も入ってた。<br/>
あと、米国とインドの話と、Jave と .NET の話がちょいちょい出てきたのが印象に残った。<br/>
たまに読み返すのが良さそう。<br/>
<br /></p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&o=9&p=8&l=as1&asins=4274067939&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[#isucon 5 予選で惨敗してきました]]></title>
    <link href="http://takady.github.io/blog/2015/09/29/isucon5-qualifier/"/>
    <updated>2015-09-29T00:05:00+09:00</updated>
    <id>http://takady.github.io/blog/2015/09/29/isucon5-qualifier</id>
    <content type="html"><![CDATA[<p>isucon5 予選で惨敗しました。</p>

<h1>出場の動機</h1>

<p>isucon というものの存在を知ってから、とにかく出てみたいと思っていた。<br/>
年初くらいには <a href="https://twitter.com/tatsuyaoiw">@tatsuyaoiw</a> に声を掛け快諾してくれていた。</p>

<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/takady7">@takady7</a> 出ましょう！ってまだだいぶ先じゃない？</p>&mdash; Tatsuya Oiwa (@tatsuyaoiw) <a href="https://twitter.com/tatsuyaoiw/status/565119787735330816">2015, 2月 10</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><br></p>

<p>予選の募集が始まった頃、あと一人誰誘おうと話してて、<a href="https://twitter.com/tatsuyaoiw">@tatsuyaoiw</a> が <a href="https://twitter.com/muratayusuke">@muratayusuke</a> を誘って、前職の同期3人で出ることが決定。<br/>
ちなみにチーム名の「八潮パークタウン」は、前職の会社の近くのバス停に停まるバスの行き先の名前で、たぶん3人の誰も実際に行ったことはない。</p>

<h1>準備期間</h1>

<p>予選のちょうど1週間前の土曜日に一度集まって、その時に主に isucon 関連の知見を晒し合った。<br/>
あと google cloud platform を触ってみたり、過去問をやったりした。<br/>
その後の1週間は、 bitbucket のリポジトリに各々が調べた sysctl やら tcpdump やら mysql やら nginx やらの設定やコマンドなどを md ファイルでとにかく上げて集めていった。この過程で、カーネルやネットワーク、DB 関連の知識が結構増えた。<br/>
このリポジトリを当日もかなり参考にしながら作業をしたので、とても役立った。<br/>
連絡は slack でとっていた。<br/>
個人的な反省点としては、いわゆる定石な実装をもっと試しておけば良かったと思っている。<br/>
例えば mysql にデータを入れている処理を redis に載せ替える実装とか、一度過去問でやっておけば当日もやれたはずだけど、当日はその辺自信なく積極的に担当出来なかった。</p>

<h1>予選当日の朝</h1>

<p><a href="https://twitter.com/tatsuyaoiw">@tatsuyaoiw</a> 邸に集まって作業した。<br/>
最寄り駅に着いた頃に、開始が１時間遅れる事がアナウンスされた。</p>

<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr">準備の兼ね合いで開始を1時間遅らせて11時開始、19時終了とします。寸前で申し訳ないですが宜しくお願いします。 <a href="https://twitter.com/hashtag/isucon?src=hash">#isucon</a></p>&mdash; くしい (@941) <a href="https://twitter.com/941/status/647570963026935808">2015, 9月 26</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>ちなみに、完璧な環境を用意してくれてた。</p>

<p><img src="http://takady.github.io/images/posts/image4.png" width="400" alt="" /></p>

<h1>予選</h1>

<p>開始前にちょろっと最初に手を付けることをお互い話してて、git init やら nginx の設定やら mysql のスロークエリの設定を分担してやった。<br/>
ちなみに、最初 <code>/etc/my.cnf</code> が読み込まれなくて地味に設定に手間取った。<br/>
結果的に、 <code>/etc/mysql/conf.d/my.cnf</code> を作りそこに設定を書いた。<br/>
終了後に知ったけど、 AppArmor の設定のせいだった。</p>

<p><br>
<img src="http://takady.github.io/images/posts/image2.png" width="600" alt="" /><br/>
<br></p>

<p>お題の web アプリは、<code>ISUxi</code> という mixi のようなサービスだった。</p>

<p><br>
<img src="http://takady.github.io/images/posts/image3.png" width="600" alt="" /><br/>
<br></p>

<p>最初の ruby 実装のスコアは200ちょっとくらい。<br/>
最初のベンチが走った後は、出力された slow query を mysqldumpslow でサマって時間食ってるクエリを見て、「ここ index はるね」とか言って貼ったりして、スコアは 400 くらいに。<br/>
あと <a href="https://twitter.com/tatsuyaoiw">@tatsuyaoiw</a> による nginx 関連の設定、静的ファイルを nginx から返す設定などが入った。<br/>
ここで <a href="https://twitter.com/muratayusuke">@muratayusuke</a> が unicorn の worker 数を 8 に増やしたところスコアが 2000 まで上がる。ここで暫定4位に！</p>

<p>そのあと、重いクエリの内、footprints （あしあと）テーブルへのクエリが遅いということで、コードを読み、カレントユーザーID と来訪ユーザーID をつなげたものをキーにして、来訪時間を値に持っておけば redis に持たせられるよねって話しをして、 <a href="https://twitter.com/muratayusuke">@muratayusuke</a> が実装に取り掛かる。</p>

<p>nginx の access.log を解析したところトップページが重いということで、<code>index.erb</code> で n+1 な処理になっているところがいくつかあったので解消するように修正する作業にとりかかる。</p>

<p>先に footprints の redis 化が終わり、ベンチマークを回したところスコアが一気に 7000 までに上がる。この時点で暫定3位に！「いけるのでは？？」という期待がチームの中に高まる。</p>

<p>ちなみに n+1 対応は結果あまり効果なし。（しかもバグってて後で revert した 🙇）</p>

<p><code>ORDER BY created_at</code> としている部分は <code>ORDER BY id</code> で良いじゃん！って事でスコアアップを期待して修正したが、さほどスコア伸びず。</p>

<p>その後、トップページの html を非同期に生成して redis に入れておくという実装に <a href="https://twitter.com/muratayusuke">@muratayusuke</a> がチャレンジしている間、1番のスロークエリであるトップページの最新のコメントを取ってくる SELECT 文をどうにか出来ないか試行錯誤してた。</p>

<p>17時を過ぎた頃に、インスタンス再起動しても問題無く動くかを <a href="https://twitter.com/tatsuyaoiw">@tatsuyaoiw</a> が確認。<br/>
ちなみに、なぜか再起動前に 10000 を超えていたスコアが、再起動後は 8500 くらいになる。（再起動直後はキャッシュが温まってなかったのか？）</p>

<p>一応、序盤から気になっていた mysql との接続を port から unixソケットに変える修正をするが効果は +100 くらい。<br/>
もういっちょ気になってた session ストアを cookie から redis に変える修正もやって、 +1000 くらいでスコアは 9700 くらいに。</p>

<p>終了時刻が迫ってきていて、他チームのスコアがどんどん上がっている中、やはり1番のスロークエリをなんとかするしかないという事で、 <a href="https://twitter.com/tatsuyaoiw">@tatsuyaoiw</a> と話す中で、 join を無くすためにテーブルスキーマを非正規化する方法を思いつく。ここで残り30分。<br/>
本番機と別のインスタンスでカラム追加とコード修正して OK そうだということで、「頼む〜」とか言いながら期待しつつ本番機にデプロイしてベンチを回すと、スコア 200 とかになって膝から崩れ落ちそうになる。（追加したカラムに初期データを入れてあげないといけなかったのかな多分。）<br/>
結局 revert して、残り10分くらいで <a href="https://twitter.com/muratayusuke">@muratayusuke</a> のトップページの html の非同期生成の実装が出来上がりデプロイ。が、ベンチが fail してしまう。<br/>
残り2分ほどになり、旧コードに戻してベンチを掛けるが、19時になり、ベンチが間に合ったか不明。</p>

<h1>まとめ</h1>

<p>めちゃくちゃ楽しかったけど、めちゃくちゃ悔しい。<br/>
自分の対応があまりスコアアップに貢献出来なくて残念だった。<br/>
あとローカルでコードを動かせる環境を用意するのが初期データの点からも かなりめんどくさそうだったので、サーバ上でコード修正したりしたけど複数人で並行してやるのは結構気を使ったし、手元で動かせないと動くかの確認が出来なかったり、サーバにはいつもの git コマンドの alias が無くてイラッとしたり、エディタも vim で辛かったりした。この辺上手くできたら良かったな。</p>

<p>今回は力不足を感じたけど、腕を磨いて来年またチャレンジしたい。</p>

<p>ちなみに土曜日の予選には131組371人が参加してたらしい。<br/>
運営の方々、決勝も残っていますが、ひとまずお疲れ様でした！ありがとうございました！<br/>
<a href="https://twitter.com/tatsuyaoiw">@tatsuyaoiw</a> <a href="https://twitter.com/muratayusuke">@muratayusuke</a> ありがとう！</p>

<h1>2015/10/10 追記</h1>

<p>2015/10/06(火) に <a href="http://eventdots.jp/event/569858">ISUCON5予選報告会 in GCPUG Tokyo</a> で isucon5 予選の話を LT してきました。</p>

<div style="width: 65%">
  <script async class="speakerdeck-embed" data-id="d19476b7e9584f139cc5db92b7dd37f2" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WEB+DB PRESS plus の DB 本 3冊を読んで index を学んだ]]></title>
    <link href="http://takady.github.io/blog/2015/09/24/read-books-about-database/"/>
    <updated>2015-09-24T18:43:39+09:00</updated>
    <id>http://takady.github.io/blog/2015/09/24/read-books-about-database</id>
    <content type="html"><![CDATA[<p>シルバーウィークに、この3冊を読んだ。</p>

<ul>
<li><p><a href="http://www.amazon.co.jp/gp/product/4774150207/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4774150207&amp;linkCode=as2&amp;tag=takadayuichi-22">Webエンジニアのための データベース技術[実践]入門 (Software Design plus)</a></p>

<ul>
<li>RDBMS としては mysql を題材にしている。</li>
<li>インデックスから my.cnf の項目の説明や mysql のソースコードを読む所まで、 mysql をメインに書かれている。</li>
</ul>
</li>
<li><p><a href="http://www.amazon.co.jp/gp/product/4774171972/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4774171972&amp;linkCode=as2&amp;tag=takadayuichi-22">理論から学ぶデータベース実践入門 ~リレーショナルモデルによる効率的なSQL (WEB+DB PRESS plus)</a></p>

<ul>
<li>RDBMS の構造や設計についても書かれていて、正規化理論や NULL について、またインデックスの設計戦略までカバーされている。</li>
<li>個別の RDBMS 製品に偏った記載はほぼ無い。</li>
<li>著者は、<a href="http://nippondanji.blogspot.jp/">漢(オトコ)のコンピュータ道</a> の人。</li>
</ul>
</li>
<li><p><a href="http://www.amazon.co.jp/gp/product/4774173010/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4774173010&amp;linkCode=as2&amp;tag=takadayuichi-22">SQL実践入門──高速でわかりやすいクエリの書き方 (WEB+DB PRESS plus)</a></p>

<ul>
<li>SQL と実行計画を主軸に、効果的な SQL の書き方、実行計画の見方などについて書かれている。</li>
<li>クエリと実行計画のサンプルには、 Oracle と PostgresQL のものが使われている。</li>
</ul>
</li>
</ul>


<p>特に index について知りたかったのでその辺まとめとく。</p>

<h1>B+Tree</h1>

<p>RDBMS の index で最も使われている。<br/>
データ構造が木みたいに、ルート、ブランチ、リーフから成っている。<br/>
B+Tree は B-Tree と違って、必ずリーフノードに値を持つ。ブランチノードがコンパクトになり、検索の効率が良いらしい。</p>

<h1>index を貼ることのデメリット</h1>

<ul>
<li>更新処理が遅くなる</li>
<li>データ量が増える</li>
</ul>


<h1>index をはらない方が良いケース</h1>

<ul>
<li><p>データ件数が少ないテーブル</p>

<ul>
<li>index を参照してからデータ領域を参照することになるので、データ件数が少ない場合は逆にテーブルフルスキャンの方が速い。</li>
</ul>
</li>
<li><p>値のばらつきが少ないカラム</p>

<ul>
<li>boolean なカラムのように取りうる値にバラつきが少ないカラムや、大半のレコードに同じ値が入っているカラムには、 index を貼っても効果が少ない。逆に、1件に絞り込めるような値が入っているカラムは、インデックスが有効に作用する。</li>
<li>値のバラつきのことをカーディナリティ（集合の濃度）という。</li>
</ul>
</li>
</ul>


<h1>index は前方一致に対してのみ有効</h1>

<p>これは index 有効。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">WHERE</span> <span class="n">name</span> <span class="k">LIKE</span> <span class="s1">&#39;高田%&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは index 効かない。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">WHERE</span> <span class="n">name</span> <span class="k">LIKE</span> <span class="s1">&#39;%祐一&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>演算や関数にかけてしまうと index は効かない</h1>

<p>col1 に index を貼っていても、下記のクエリは index が効かない。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">WHERE</span> <span class="n">col1</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">&gt;</span> <span class="mi">123</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>index を効かせたい場合は、こうする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">WHERE</span> <span class="n">col1</span> <span class="o">&gt;</span> <span class="mi">123</span> <span class="o">/</span> <span class="mi">10</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>マルチカラムインデックスでは、カラムの順番も意味がある</h1>

<p>下記のクエリに対して効果的な index は、(col1, col2) ではなく (col2, col1) な index である。<br/>
index が前方一致な事を思い出す。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">WHERE</span> <span class="n">col1</span> <span class="o">&gt;</span> <span class="mi">100</span> <span class="k">AND</span> <span class="n">col2</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>index オンリースキャン</h1>

<p>index を貼ると、index を見てから、データ領域を参照する事になる。<br/>
しかし、index の参照だけで取得できるようなクエリだと、データ領域への参照が必要無いのでさらに高速になる。<br/>
(col1, col2) というindex を貼ってあるテーブル tbl に対して、下記のクエリを発行すると、index の参照だけで済む。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">col1</span><span class="p">,</span> <span class="n">col2</span> <span class="k">FROM</span> <span class="n">tbl</span> <span class="k">WHERE</span> <span class="n">col1</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">AND</span> <span class="n">col2</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>集計関数の場合も、うまく使えば index だけで済ませられる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">tbl</span> <span class="k">WHERE</span> <span class="n">col1</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">AND</span> <span class="n">col2</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>B+Tree はキーの順にソートされて格納されている</h1>

<p>index のキーはソートされているので、name に index があるテーブルに、下記のようなクエリを発行すると範囲検索とソートの両方にインデックスが使われるので高速。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">tbl</span> <span class="k">WHERE</span> <span class="n">name</span> <span class="k">LIKE</span> <span class="s1">&#39;高田%&#39;</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>まとめ</h1>

<p>index という概念が導入される前の hiveQL を長年使っていたので、 SQL は書けるけど index に対しては理解弱かったので、勉強になった。<br/>
頭の中で B+Tree をイメージすると、効果的な index をイメージしやすい気がする。<br/>
あと、前方一致の特徴などからも やはり index は、本の索引をイメージするとわかりやすい。</p>

<p><br>
<br>
<br></p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&o=9&p=8&l=as1&asins=4774150207&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>




<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&o=9&p=8&l=as1&asins=4774171972&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>




<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&o=9&p=8&l=as1&asins=4774173010&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[個人情報保護士認定試験を受験した]]></title>
    <link href="http://takady.github.io/blog/2015/09/14/kojin-joho-hogo-shi/"/>
    <updated>2015-09-14T22:59:40+09:00</updated>
    <id>http://takady.github.io/blog/2015/09/14/kojin-joho-hogo-shi</id>
    <content type="html"><![CDATA[<p><a href="http://www.joho-gakushu.or.jp/piip/piip.html">個人情報保護士認定試験</a></p>

<p>会社で必要になったので、9/13(日)に受験した。<br/>
下記の流れで2週間ほど勉強した。<br/>
<br></p>

<ol>
<li><a href="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=4820748866&amp;ref=qf_sp_asin_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr">公式テキスト</a>を読む</li>
<li><a href="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=4820748408&amp;ref=tf_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr">公式精選過去問題集</a>を解く</li>
<li>協会から送られてくる前回テストの問題を解く</li>
</ol>


<h1>公式テキストを読む</h1>

<p>僕はただ読むだけでは覚えられなかったので、大事そうな所や覚えにくい所はノートに書いた。<br/>
章末の「過去問チェック」まで解いたら、公式精選過去問集へ。</p>

<h1>公式精選過去問集を解く</h1>

<p>公式テキストで読んだ章に対応する問題を解く。<br/>
この問題集は、問題と解答が別の冊子に分かれてなくて、1問づつ問題と答えと解説が書いてあるので、使いやすかった。<br/>
間違えたり理解が完全でない問題は後で繰り返し解くために印を付けておいた。</p>

<h1>前回テストの問題を解く</h1>

<p>試験の1週間前くらいに協会から家に届いた。<br/>
試験前日に、時間を測って本番を想定して解いた。<br/>
この時点でちょうど8割くらい取れてる感じだった。<br/>
120分の試験時間に対して、90分くらいで解き終わった。</p>

<h1>当日</h1>

<p>問題文の日本語をよく読むことで解ける問題も結構あると感じていたので、落ち着いて解答した。<br/>
120分の試験時間に対して、70分くらいで終わって、残り時間は見直しを入念にした。</p>

<h1>感想</h1>

<p>試験は120分100問で、課題1が40問、課題2が60問ある。<br/>
課題1は、個人情報保護の総論といって、個人情報保護法とかJIS Q 15001 とかの理解度を問われるんだが、これが結構自分は難しかった。<br/>
課題2は、個人情報保護の対策で、自分がソフトウェアエンジニアなのもあると思うが、一般的な会社員としての知識で解ける問題が結構ある印象だった。</p>

<p><br>
<br>
<br></p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&o=9&p=8&l=as1&asins=4820748866&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>




<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&o=9&p=8&l=as1&asins=4820748408&ref=tf_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAPC::Asia 2015 に行ってきた]]></title>
    <link href="http://takady.github.io/blog/2015/08/22/yapc-asia-2015/"/>
    <updated>2015-08-22T21:00:19+09:00</updated>
    <id>http://takady.github.io/blog/2015/08/22/yapc-asia-2015</id>
    <content type="html"><![CDATA[<p><a href="http://yapcasia.org/2015/">YAPC::Asia 2015</a> の前夜祭と2日目に行ってきた。</p>

<h1>前夜祭</h1>

<h2><a href="http://yapcasia.org/2015/talk/show/7d62caf8-12f4-11e5-881c-d9f87d574c3a">技術ブログを書くことについて語るときに僕の語ること</a></h2>

<p>ブログでブクマ数を稼ぐには、という話だった。<br/>
なるほど、という感じでとてもおもしろかった。</p>

<ul>
<li><p>ブログはタイトルが大事</p></li>
<li><p>投稿タイミングも大事</p>

<ul>
<li>平日の朝が良い

<ul>
<li>金曜の夜にテンション高く書き上げても、すぐに公開せずに一旦寝かせる</li>
</ul>
</li>
</ul>
</li>
</ul>


<h1>1日目</h1>

<p>不参加</p>

<h1>2日目</h1>

<h2><a href="http://yapcasia.org/2015/talk/show/86ebd212-fab3-11e4-8f5a-8ab37d574c3a">ISUCONの勝ち方</a></h2>

<p>isucon のための tips や チューニング方法についてのお話。<br/>
とても勉強になった。isucon 出たい。</p>

<ul>
<li><p>準備</p>

<ul>
<li>同僚や元同僚など、一緒に働いたことがあるエンジニア同士でチームを組んだ方が良い</li>
<li>sysctl.conf や my.cnf などの秘伝のタレは、どこかに手順と一緒にまとめておくなりして、すぐに適用できるようにしておく</li>
<li>できればプライベートリポジトリを用意しておく</li>
</ul>
</li>
<li><p>当日について</p>

<ul>
<li>7時間は意外と短い</li>
<li>最初の1時間は、課題、レギュレーション、アプリケーションを理解し、戦略を立てることに使う</li>
<li>最後の30分で、サーバを再起動しても動作する事を確認しておく</li>
<li>最初の状態をまず git に push しておく</li>
<li>こまめに commit して、問題が起きたらすぐに戻れるようにしておく</li>
<li>諦めたら、そこで終了ですよ</li>
</ul>
</li>
<li><p>チューニング</p>

<ul>
<li>sysctl の修正は基本的に最初にやっちゃう</li>
<li>web サーバのログを解析して、ベンチマークツールの動きを知る

<ul>
<li>アクセスが少ないポイントを頑張ってチューニングしても効果は少ない</li>
<li>どれだけエラーは許容されるのかを把握する</li>
</ul>
</li>
<li>mysql のデータ構造 B+Tree を頭でイメージする</li>
<li>strace, tcpdump, top, iftop, iotop などのコマンドを使えるようになっておく</li>
<li>特にスペックの低めなマシンの場合は、 apache よりも nginx の方が CPU のコンテキストスイッチが少なく済むので向いている</li>
</ul>
</li>
</ul>


<h2><a href="http://yapcasia.org/2015/talk/show/f2816038-10ec-11e5-89bf-d7f07d574c3a">我々はどのように冗長化を失敗したのか</a></h2>

<p>式年遷宮アーキテクチャの思想を持ってシステム構築して、最終的にどうなったのか、という話。<br/>
試行錯誤した体験を発表されていて、すごく良い話だった。<br/>
インフラの話は本当におもしろい。</p>

<p><a href="https://speakerdeck.com/kenjiskywalker/yapcasia2015">Speaker Deck</a> にすでにスライドが上がってるので、それが詳しい。</p>

<h2><a href="http://yapcasia.org/2015/talk/show/bd04b86c-f9de-11e4-b996-8ab37d574c3a">Adventures in Refactoring</a></h2>

<p>GitHub の中の人による、リファクタリングの話。<br/>
とにかくためになった。</p>

<ul>
<li><p>正しい振る舞いを keep していくことが大切</p></li>
<li><p>コードを減らすのが、良いリファクタリング</p>

<ul>
<li>１０行減ったら、それだけバグが減る :hocho:</li>
</ul>
</li>
<li><p>リファクタリングの理由</p>

<ol>
<li>Developer の Happiness のため</li>
<li>性能向上</li>
<li>将来の作業に向けての自信を得る</li>
<li>developer の教育</li>
</ol>
</li>
<li><p>メソッド名（動詞）を名詞にしてクラスにするというアイデア</p></li>
<li><p>メソッド名にアンダースコアが入っていたら、それはオブジェクトにできるかもしれない</p>

<ul>
<li><code>pull.branch_valid?</code> -> <code>pull.branch.valid?</code></li>
</ul>
</li>
<li><p>既存のバグ</p>

<ul>
<li>リファクタリングをやっている時にバグを直すべきではない</li>
</ul>
</li>
<li><p>大きなリファクタリングはリスク</p>

<ul>
<li>細かく区切っていくことが大切</li>
</ul>
</li>
<li><p>Deprecate</p>

<ul>
<li>_oldとか作る</li>
<li>後方互換を持たせる</li>
<li>たとえば gmail が AB テストしている時に、古いデザインに戻れる機能をユーザに提供しているように</li>
<li><a href="https://github.com/github/scientist">github/scientist</a> を使う</li>
</ul>
</li>
<li><p>feature の開発とリファクタリング、どちらを優先するかの基準は？</p>

<ul>
<li>リファクタリングせずに、その feature の開発をすることに自信がもてるかどうかで、どちらを優先するか決まると思う</li>
</ul>
</li>
<li><p>テストが無い時は、まずテスト書いてからリファクタリングするべき</p></li>
</ul>


<h2><a href="http://yapcasia.org/2015/talk/show/6bde6c69-187a-11e5-aca1-525412004261">Profiling &amp; Optimizing in Go</a></h2>

<p>Google の中の人による Go の話。<br/>
emacs でコードを書いてターミナルでコマンド結果を見ながらの発表という感じだった。<br/>
自分の知識不足でわからないことが結構あって、 Go もっと勉強したいと思った。</p>

<ul>
<li>ベンチマークの取得

<ul>
<li>Go には <code>benchcmp</code> というコマンドが同梱されていて、それを使ってベンチマーク結果を比較してどれだけ改善したかを見れるらしい</li>
</ul>
</li>
</ul>


<h2><a href="http://yapcasia.org/2015/talk/show/69caedbd-1872-11e5-aca1-525412004261">Lightning Talks Day 2</a></h2>

<p>どれも面白くて、LTらしくて勢いがあって良かった。</p>

<h1>まとめ</h1>

<p>今年は1日目に参加しなかったので、昨年に比べて、あっという間に終わった感じだった。<br/>
今年は会場が東京ビッグサイトで、去年の慶応日吉キャンパスとはまた違う雰囲気だった。<br/>
YAPC::Asia 今年で最後ということで残念だけど、今年も楽しかったし、聴いたセッションは全てとても勉強になるものだったので満足。</p>

<p>最後に運営の皆様、本当にお疲れ様でした！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rebuild Meetup に行ってきた]]></title>
    <link href="http://takady.github.io/blog/2015/08/19/rebuild-meetup/"/>
    <updated>2015-08-19T23:35:36+09:00</updated>
    <id>http://takady.github.io/blog/2015/08/19/rebuild-meetup</id>
    <content type="html"><![CDATA[<p><a href="http://connpass.com/event/18099/">Rebuild Meetup 2015 - connpass</a></p>

<p>昨年のはじめに仙台に出張してる時から rebuild.fm 聴くようになって、プログラミング好きになって、仕事でも web アプリ書けるところに異動して、その後今の会社に転職したので、感慨深かった。</p>

<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr">Matz きたー <a href="https://twitter.com/hashtag/rebuildfm?src=hash">#rebuildfm</a> <a href="http://t.co/nPX9OxAsh9">pic.twitter.com/nPX9OxAsh9</a></p>&mdash; takady (@takady7) <a href="https://twitter.com/takady7/status/633967560505978880">2015, 8月 19</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[転職して１ヶ月経った]]></title>
    <link href="http://takady.github.io/blog/2015/07/05/join-a-new-company-and-past-a-month/"/>
    <updated>2015-07-05T20:37:26+09:00</updated>
    <id>http://takady.github.io/blog/2015/07/05/join-a-new-company-and-past-a-month</id>
    <content type="html"><![CDATA[<p>5月12日に転職して、1ヶ月くらい経った。<br/>
一万人規模の会社から、百人規模の会社に来たので、色々なものごとの距離感の近さが新鮮に感じられる。<br/>
さすがのスピード感で、入社して3日目から本格的にPRを出すなどの開発に入り、それから毎日頑張ってついて行っている間に1ヶ月経ったという感じだった。<br/>
周囲のメンバーと切磋琢磨しながら、自分もサービスに貢献していきたいと思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bundle openでtmuxのpaneを開く]]></title>
    <link href="http://takady.github.io/blog/2015/04/24/bundle-open-tmux/"/>
    <updated>2015-04-24T13:11:11+09:00</updated>
    <id>http://takady.github.io/blog/2015/04/24/bundle-open-tmux</id>
    <content type="html"><![CDATA[<p><code>bundle open</code>でgemのソースをエディタで開いたり，<code>bundle show</code>でgemのパスを見たりすることができるので，gemの挙動を知りたくてコードを見たい時にこれらのコマンドをよく使ってる．<br/>
便利なんだけど，gemのディレクトリがtmuxのペインで開いてくれるともっと使いやすいと思って，やってみた．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">BUNDLER_EDITOR</span><span class="o">=</span><span class="s2">&quot;tmux split-window -c&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記を<code>~/.zshrc</code>あたりに定義して，コマンドラインで<code>bundle open</code>を実行すれば，tmuxのpaneが開いてそのgemのディレクトリを見ることができる．</p>

<pre><code>$ bundle open activerecord
</code></pre>

<h1>bundle openを上書きしたくない場合</h1>

<p><code>bundle open</code>の挙動はそのまま残したいという場合には，<code>BUNDLER_EDITOR</code>で設定するのではなく，下記のような関数を別途定義して使うと良い．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="k">function</span> bundle_open_tmux<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> -n <span class="s2">&quot;$1&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>        <span class="nb">local </span><span class="nv">dir</span><span class="o">=</span><span class="k">$(</span>bundle show <span class="s2">&quot;$1&quot;</span><span class="k">)</span>
</span><span class='line'>        tmux split-window -c <span class="s2">&quot;$dir&quot;</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下記のように実行すると，同じように動作する．</p>

<pre><code>$ bundle_open_tmux activerecord
</code></pre>

<h1>参考</h1>

<ul>
<li><a href="http://rebuild.fm/41/">Rebuild: 41: Kids These Days Don&rsquo;t Know Shell (Naoya Ito)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tmuxにpowerlineを導入した]]></title>
    <link href="http://takady.github.io/blog/2015/04/20/powerline-config/"/>
    <updated>2015-04-20T16:54:18+09:00</updated>
    <id>http://takady.github.io/blog/2015/04/20/powerline-config</id>
    <content type="html"><![CDATA[<h1>powerlineの導入</h1>

<p>下記の記事を参考にした．<br/>
<a href="http://qiita.com/tkhr/items/8cc17c02dea1803be9c6">tmux - Powerline導入例 - Qiita</a></p>

<h2>フォントが綺麗に表示されない場合</h2>

<p>自分の環境では，<code>brew reinstall --powerline --vim-powerline ricty</code>でpowerline用のRictyを入れても綺麗に表示されなかったので，自分でfontを合成した．</p>

<pre><code>$ git clone https://github.com/yascentur/Ricty.git
$ cd Ricty

$ git clone https://github.com/powerline/fonts.git

$ wget http://sourceforge.jp/frs/redir.php\?m\=jaist\&amp;f\=%2Fmix-mplus-ipa%2F59022%2Fmigu-1m-20130617.zip -O migu-1m-20130617.zip
$ unzip migu-1m-20130617.zip
$ ./ricty_generator.sh fonts/Inconsolata/Inconsolata\ for\ Powerline.otf migu-1m-20130617/migu-1m-regular.ttf migu-1m-20130617/migu-1m-bold.ttf

$ cp -f ./Ricty*.ttf ~/Library/Fonts
$ fc-cache -vf
</code></pre>

<h1>カスタマイズ</h1>

<p>デフォルトは水色．<br/>
<img src="http://takady.github.io/images/powerline_config_01.png" alt="before" /></p>

<p><a href="https://github.com/powerline/powerline/blob/develop/docs/source/configuration.rst">powerline/configuration.rst</a>に設定方法は書いてある．<br/>
カスタマイズしたいconfigファイルを<code>powerline/config_files</code>から<code>~/.config/powerline</code>以下にパスそのままにコピーしてきて，それを編集する．</p>

<pre><code>$ mkdir -p ~/.config/powerline/colorschemes/tmux
$ cp -i powerline/config_files/colorschemes/tmux/default.json ~/.config/powerline/colorschemes/tmux/.
</code></pre>

<h2>~/.config/powerline/colorschemes/tmux/default.json</h2>

<p>例えば色を変えてみる．<br/>
色は<code>powerline/config_files/colors.json</code>に定義されているものも使える．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;groups&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;active_window_status&quot;</span><span class="p">:</span> <span class="p">{</span><span class="nt">&quot;fg&quot;</span><span class="p">:</span> <span class="s2">&quot;gray70&quot;</span><span class="p">,</span> <span class="nt">&quot;bg&quot;</span><span class="p">:</span> <span class="s2">&quot;gray0&quot;</span><span class="p">,</span>       <span class="nt">&quot;attrs&quot;</span><span class="p">:</span> <span class="p">[]},</span>
</span><span class='line'>    <span class="nt">&quot;window:current&quot;</span><span class="p">:</span>       <span class="p">{</span><span class="nt">&quot;fg&quot;</span><span class="p">:</span> <span class="s2">&quot;black&quot;</span><span class="p">,</span>  <span class="nt">&quot;bg&quot;</span><span class="p">:</span> <span class="s2">&quot;brightgreen&quot;</span><span class="p">,</span> <span class="nt">&quot;attrs&quot;</span><span class="p">:</span> <span class="p">[]},</span>
</span><span class='line'>    <span class="nt">&quot;window_name&quot;</span><span class="p">:</span>          <span class="p">{</span><span class="nt">&quot;fg&quot;</span><span class="p">:</span> <span class="s2">&quot;black&quot;</span><span class="p">,</span>  <span class="nt">&quot;bg&quot;</span><span class="p">:</span> <span class="s2">&quot;brightgreen&quot;</span><span class="p">,</span> <span class="nt">&quot;attrs&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;bold&quot;</span><span class="p">]},</span>
</span><span class='line'>    <span class="nt">&quot;session:prefix&quot;</span><span class="p">:</span>       <span class="p">{</span><span class="nt">&quot;fg&quot;</span><span class="p">:</span> <span class="s2">&quot;black&quot;</span><span class="p">,</span>  <span class="nt">&quot;bg&quot;</span><span class="p">:</span> <span class="s2">&quot;brightgreen&quot;</span><span class="p">,</span> <span class="nt">&quot;attrs&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;bold&quot;</span><span class="p">]}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>修正後</h3>

<p><img src="http://takady.github.io/images/powerline_config_02.png" alt="after" /></p>

<h1>その他</h1>

<p>ちなみに，tmuxの設定をreloadするために毎回tmuxを再起動するのは面倒なので，<code>.tmux.conf</code>に下記のように設定を再読み込みするよう定義しておくと捗る．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>bind C-r source-file &quot;${HOME}/.tmux.conf&quot;
</span></code></pre></td></tr></table></div></figure>


<h1>まとめ</h1>

<p>もっとこだわるなら表示する情報とかもカスタマイズできるので，やりたくなったらやるつもり．</p>

<h1>参考</h1>

<ul>
<li><a href="https://github.com/powerline/powerline/blob/develop/docs/source/configuration.rst">powerline/configuration.rst at develop · powerline/powerline</a></li>
<li><a href="https://github.com/takady/dotfiles">takady/dotfiles</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rubygems.orgに公開しているgemの名前を変更する]]></title>
    <link href="http://takady.github.io/blog/2015/03/27/how-to-rename-gem/"/>
    <updated>2015-03-27T00:56:07+09:00</updated>
    <id>http://takady.github.io/blog/2015/03/27/how-to-rename-gem</id>
    <content type="html"><![CDATA[<p>必要になったので調べてみた．<br/>
結論からいうと，renameはできない．ちなみにgithubのrepositoryはrenameできる．<br/>
調べた結果，自分は下記の方法をとった．</p>

<ol>
<li>新しい名前のgemのコードを用意する．既存repositoryをrenameする場合は，.gemspecなど漏れなく修正する．</li>
<li>新しい名前のgemを<code>rake release</code>する．</li>
<li><code>gem yank</code>で古い名前のgemをindexから外す．</li>
</ol>


<p><code>gem yank</code>してもrubygems.org上のページは残るのでその点注意．</p>

<h1>参考</h1>

<ul>
<li><p><a href="http://help.rubygems.org/kb/gemcutter/removing-a-published-rubygem">Removing a published RubyGem / Gemcutter / Knowledge Base - RubyGems.org Support</a></p></li>
<li><p><a href="http://blog.s21g.com/articles/1755">公開した gem を削除する方法 - ヽ( ・∀・)ノくまくまー - s21g</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[標準出力のjson文字列を手軽にpretty printする]]></title>
    <link href="http://takady.github.io/blog/2015/03/27/json-pp/"/>
    <updated>2015-03-27T00:41:40+09:00</updated>
    <id>http://takady.github.io/blog/2015/03/27/json-pp</id>
    <content type="html"><![CDATA[<p><code>jq</code>使えばいいんですが，入ってない時とかに．</p>

<pre><code>$ echo '{ "foo": "bar", "test": 10 }' | python -mjson.tool
{
    "foo": "bar",
    "test": 10
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apache_log-parserを修正してBenchmarkをとってみた]]></title>
    <link href="http://takady.github.io/blog/2015/02/11/apache-log-parser-benchmark/"/>
    <updated>2015-02-11T16:53:46+09:00</updated>
    <id>http://takady.github.io/blog/2015/02/11/apache-log-parser-benchmark</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/takady/apache_log-parser">takady/apache_log-parser</a></p>

<p>先週，とある機会に，とあるエンジニアの方が，僕が作った<a href="https://github.com/takady/apache_log-parser">apache_log-parser</a>というrubyのgemに対してアドバイスをしてくれた．<br/>
「parseメソッド呼ぶ度に毎回Patternクラスのインスタンスとか作ったりしてるけど，Parserをクラスにして，最初にインスタンス作る時に1回だけやるようにした方が効率良いよ」みたいな指摘だった．確かにその通りだった．指摘ありがとうございます！<br/>
ついでに，修正する前と後でパフォーマンスどれだけ良くなったのかを，rubyの標準ライブラリのBenchmarkを使って計測してみた．</p>

<p>benchmark.rb自体はこんな感じで，100万行parseするのにかかる時間を計測している．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$LOAD_PATH</span><span class="o">.</span><span class="n">unshift</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../lib&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;apache_log/parser&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;benchmark&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">common_line</span> <span class="o">=</span> <span class="s1">&#39;127.0.0.1 - - [20/May/2014:20:04:04 +0900] &quot;GET /test/indx.html HTTP/1.1&quot; 200 4576&#39;</span>
</span><span class='line'><span class="n">combined_line</span> <span class="o">=</span> <span class="s1">&#39;192.168.0.1 - - [07/Jun/2014:14:58:55 +0900] &quot;GET /category/electronics HTTP/1.1&quot; 200 128 &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:9.0.1) Gecko/20100101 Firefox/9.0.1&quot;&#39;</span>
</span><span class='line'><span class="n">customized_line</span> <span class="o">=</span> <span class="s1">&#39;192.168.0.1 - - [07/Feb/2011:10:59:59 +0900] &quot;GET /x/i.cgi/net/0000/ HTTP/1.1&quot; 200 9891 &quot;-&quot; &quot;DoCoMo/2.0 P03B(c500;TB;W24H16)&quot; virtualhost.example.jp &quot;192.0.2.16794832933550&quot; &quot;09011112222333_xx.ezweb.ne.jp&quot; 533593&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">common_parser</span> <span class="o">=</span> <span class="no">ApacheLog</span><span class="o">::</span><span class="no">Parser</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;common&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">combined_parser</span> <span class="o">=</span> <span class="no">ApacheLog</span><span class="o">::</span><span class="no">Parser</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;combined&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">customized_parser</span> <span class="o">=</span> <span class="no">ApacheLog</span><span class="o">::</span><span class="no">Parser</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;combined&#39;</span><span class="p">,</span> <span class="sx">%w(vhost usertrack mobileid request_duration)</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="mi">1_000_000</span>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">bm</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s1">&#39;common:&#39;</span><span class="p">)</span>     <span class="p">{</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="n">common_parser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">common_line</span><span class="p">)}</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s1">&#39;combined:&#39;</span><span class="p">)</span>   <span class="p">{</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="n">combined_parser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">combined_line</span><span class="p">)}</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s1">&#39;customized:&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="n">customized_parser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">customized_line</span><span class="p">)}</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Before</h2>

<p>まず，修正前のコードでのベンチマーク．</p>

<pre><code>$ ruby benchmark.rb
                   user     system      total        real
common:      125.630000   0.180000 125.810000 (125.889122)
combined:    151.530000   0.440000 151.970000 (152.090644)
customized:  186.610000   0.460000 187.070000 (187.200379)
</code></pre>

<h2>After</h2>

<p>次に，修正後のコードでのベンチマーク．</p>

<pre><code>$ ruby benchmark.rb
                   user     system      total        real
common:       20.770000   0.020000  20.790000 ( 20.797196)
combined:     30.090000   0.050000  30.140000 ( 30.161369)
customized:   40.240000   0.070000  40.310000 ( 40.388290)
</code></pre>

<p>めちゃくちゃ改善された！！</p>

<h1>参考</h1>

<p><a href="http://a-newcomer.com/29">RubyでのBenchmarkの取り方をば。</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[embulk-plugin-sqlite3を作った]]></title>
    <link href="http://takady.github.io/blog/2015/02/08/embulk-plugin-sqlite3/"/>
    <updated>2015-02-08T22:17:00+09:00</updated>
    <id>http://takady.github.io/blog/2015/02/08/embulk-plugin-sqlite3</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/takady/embulk-plugin-sqlite3">takady/embulk-plugin-sqlite3</a></p>

<h1>embulkとは</h1>

<p>いわゆるbulk loaderと言われる並列にデータを移動させるためのプロダクトの一つ．embulkがユニークなのはinput/outputなどの部分がpluggableになっている点．<br/>
つまり，データの移動に際して発生するリソースへの接続処理の実装や，データのクレンジング・フォーマット変換，その他必要になる雑多な処理をプラグインという形で定義しておくことで，再利用しやすくなるというわけ．</p>

<h2>Fluentdとの違い</h2>

<p>同じくTreasure Data社が開発しているFluentdも，input/outputのpluginをrubyで書けるなど，一見同じ感じである．<br/>
ただ，Fluentdのユースケースは<strong>リアルタイム</strong>にlogを流すという部分であり，一方でembulkは<strong>バッチ処理</strong>でデータをimport/exportする用途にフォーカスしているというところに違いがある．</p>

<h1>導入</h1>

<p><a href="https://github.com/embulk/embulk">embulkのREADME.md</a>にはjarをdownloadしてきて使う方法だけが書かれているが，普通にrubygems.orgにリリースされているので<code>gem install</code>で入れられる．</p>

<pre><code>$ gem install embulk
</code></pre>

<p>そして，<code>embulk gem install</code>でpluginをinstallする．</p>

<pre><code>$ embulk gem install embulk-plugin-sqlite3
Fetching: jdbc-sqlite3-3.8.7.gem (100%)
Successfully installed jdbc-sqlite3-3.8.7
Fetching: embulk-plugin-sqlite3-0.0.1.gem (100%)
Successfully installed embulk-plugin-sqlite3-0.0.1
2 gems installed
</code></pre>

<h1>実行</h1>

<p>今回はexampleのcsvファイルを，sqlite3のテーブルにloadしてみる.</p>

<p>下記で，exampleのcsvファイルを生成する．</p>

<pre><code>$ embulk example /tmp
$ embulk guess /tmp/example.yml -o /tmp/config.yml
</code></pre>

<p><code>/tmp/config.yml</code>のoutputの設定を下記のように修正する．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">out</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">sqlite3</span>
</span><span class='line'>  <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="s">&#39;/tmp/test.db&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">table</span><span class="p-Indicator">:</span> <span class="s">&#39;load01&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>embulk run</code>する．</p>

<pre><code>$ embulk run /tmp/config.yml
2015-02-08 22:29:38,623 [INFO]: main:org.embulk.standards.LocalFileInputPlugin: Listing local files with prefix '/tmp/csv'
2015-02-08 22:29:38,885 [INFO]: main:org.embulk.exec.LocalExecutor: Running 1 tasks using 8 local threads
2015-02-08 22:29:38,885 [INFO]: main:org.embulk.exec.LocalExecutor: {done:  0 / 1, running: 0}
2015-02-08 22:29:39,035 [INFO]: main:org.embulk.exec.LocalExecutor: {done:  1 / 1, running: 0}
Output finished. Commit reports = [{"records":4}]
2015-02-08 22:29:39,041 [INFO]: main:org.embulk.command.Runner: next config: {"in":{},"out":{}}
</code></pre>

<p>テーブルの中身を確認すると，insertできていることがわかる．</p>

<pre><code>$ sqlite3 /tmp/test.db
SQLite version 3.7.13 2012-07-17 17:46:21
Enter ".help" for instructions
Enter SQL statements terminated with a ";"
sqlite&gt; .schema load01
CREATE TABLE load01(`id` integer,`account` integer,`time` text,`purchase` text,`comment` text);
sqlite&gt; select * from load01;
1|32864|2015-01-27 19:23:49 UTC|2015-01-27 00:00:00 UTC|embulk
2|14824|2015-01-27 19:01:23 UTC|2015-01-27 00:00:00 UTC|embulk jruby
3|27559|2015-01-28 02:20:02 UTC|2015-01-28 00:00:00 UTC|embulk core
4|11270|2015-01-29 11:54:36 UTC|2015-01-29 00:00:00 UTC|Embulk "csv" parser plugin
sqlite&gt;
</code></pre>

<h1>まとめ</h1>

<p>embulk自体がjrubyで書かれており，pluginでC拡張のgemは使えないみたい．<br/>
なので，DB接続する場合はjdbc-sqlite3などのgemを使うことになる．(間違ってたら指摘お願いします)<br/>
あと，pluginの作り方のベスト・プラクティスがまだわからない．</p>

<h1>参考</h1>

<ul>
<li><a href="https://github.com/embulk/embulk">embulk/embulk</a></li>
<li><a href="http://dev.classmethod.jp/tool/embulk-ataglance/">Treasure Dataの新データ転送ツールEmbulkを触ってみた #dtm_meetup ｜ Developers.IO</a></li>
<li><a href="http://www.slideshare.net/frsyuki/embuk-making-data-integration-works-relaxed">Embulk, an open-source plugin-based parallel bulk data loader</a></li>
<li><a href="https://github.com/frsyuki/embulk-plugin-postgres-json">frsyuki/embulk-plugin-postgres-json</a></li>
<li><a href="https://github.com/takebayashi/embulk-plugin-input-hbase">takebayashi/embulk-plugin-input-hbase</a></li>
<li><a href="https://github.com/jruby/activerecord-jdbc-adapter">jruby/activerecord-jdbc-adapter</a></li>
<li><a href="https://bitbucket.org/xerial/sqlite-jdbc/overview">xerial / sqlite-jdbc — Bitbucket</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[はじめてのcoreos/rocket]]></title>
    <link href="http://takady.github.io/blog/2015/01/13/coreos-rocket/"/>
    <updated>2015-01-13T19:46:35+09:00</updated>
    <id>http://takady.github.io/blog/2015/01/13/coreos-rocket</id>
    <content type="html"><![CDATA[<p>rocketとは, CoreOS社が開発しているDockerのalternative実装で, まだprototypeという位置づけである.<br/>
<a href="https://github.com/coreos/rocket/blob/master/Documentation/getting-started-guide.md">rocket/getting-started-guide.md at master · coreos/rocket</a>を通して, rocketをCoreOS上で動かしてみた.</p>

<h1>vagrantでCoreOSのVMを用意</h1>

<p>まず, CoreOSの環境を用意する.</p>

<pre><code>$ git clone https://github.com/coreos/coreos-vagrant/
$ cd coreos-vagrant
$ vagrant up
$ vagrant ssh
Last login: Tue Jan 13 08:50:19 2015 from 10.0.2.2
CoreOS alpha (557.0.0)
core@core-01 ~ $
</code></pre>

<h1>rkt, actool, goのinstall</h1>

<h2>rkt</h2>

<pre><code>core@core-01 ~ $ wget https://github.com/coreos/rocket/releases/download/v0.1.1/rocket-v0.1.1.tar.gz
core@core-01 ~ $ tar zxf rocket-v0.1.1.tar.gz
</code></pre>

<h2>actool</h2>

<pre><code>core@core-01 ~ $ wget https://github.com/appc/spec/releases/download/v0.1.1/appc-spec-v0.1.1.tar.gz
core@core-01 ~ $ tar zxf appc-spec-v0.1.1.tar.gz
</code></pre>

<h2>go</h2>

<p><a href="http://qiita.com/hnakamur/items/8cda520807f571409f6c#4-1">OSX + Vagrant + CoreOSでKubernetesを試してみた - Qiita</a>を参考にした.<br/>
ちなみに, go1.4だと次のhello.goがうまくビルド出来くて, 断念して1.3系を入れた.(<a href="https://github.com/coreos/rocket/issues/270">参考</a>)</p>

<pre><code>core@core-01 ~ $ wget https://storage.googleapis.com/golang/go1.3.3.linux-amd64.tar.gz
core@core-01 ~ $ sudo mkdir /opt
core@core-01 ~ $ sudo tar zxf go1.3.3.linux-amd64.tar.gz -C /opt/
</code></pre>

<h2>GOPATH等の設定</h2>

<p>bash_profileはシムリンクを削除して実ファイルを用意した.</p>

<pre><code>core@core-01 ~ $ ls -l ~/.bash_profile
lrwxrwxrwx 1 core core 34 Jan  9 04:47 /home/core/.bash_profile -&gt; ../../usr/share/skel/.bash_profile
core@core-01 ~ $ rm ~/.bash_profile
core@core-01 ~ $ cat &lt;&lt;'EOF' &gt;&gt; ~/.bash_profile
&gt;
&gt; export GOROOT=/opt/go
&gt; export GOPATH=~/go
&gt; export PATH=$GOROOT/bin:$GOPATH/bin:$PATH
&gt; EOF

core@core-01 ~ $ mkdir ~/go
core@core-01 ~ $ exec $SHELL -l
core@core-01 ~ $ go version
go version go1.3.3 linux/amd64
</code></pre>

<h1>サンプルアプリケーション作成</h1>

<h2>hello.goの作成とビルド</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;log&quot;</span>
</span><span class='line'>    <span class="s">&quot;net/http&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">http</span><span class="p">.</span><span class="nx">HandleFunc</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;request from %v\n&quot;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">RemoteAddr</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">w</span><span class="p">.</span><span class="nx">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&quot;hello\n&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">ListenAndServe</span><span class="p">(</span><span class="s">&quot;:5000&quot;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ビルドする.</p>

<pre><code>core@core-01 ~ $ CGO_ENABLED=0 GOOS=linux go build -a -tags netgo -ldflags '-w' hello.go
</code></pre>

<h2>manifest.jsonの作成</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;acKind&quot;</span><span class="p">:</span> <span class="s2">&quot;ImageManifest&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;acVersion&quot;</span><span class="p">:</span> <span class="s2">&quot;0.1.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;coreos.com/hello&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;labels&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;version&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;val&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;arch&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;val&quot;</span><span class="p">:</span> <span class="s2">&quot;amd64&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;os&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;val&quot;</span><span class="p">:</span> <span class="s2">&quot;linux&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;app&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;user&quot;</span><span class="p">:</span> <span class="s2">&quot;root&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;group&quot;</span><span class="p">:</span> <span class="s2">&quot;root&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;exec&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="s2">&quot;/bin/hello&quot;</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>        <span class="nt">&quot;ports&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;www&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;protocol&quot;</span><span class="p">:</span> <span class="s2">&quot;tcp&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;port&quot;</span><span class="p">:</span> <span class="mi">5000</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>validationする.</p>

<pre><code>core@core-01 ~ $ ./appc-spec-v0.1.1/actool -debug validate manifest.json
manifest.json: valid ImageManifest
</code></pre>

<h1>App Container Image(ACI)のビルド</h1>

<pre><code>core@core-01 ~ $ mkdir -p hello-layout/rootfs/bin
core@core-01 ~ $ cp -i manifest.json hello-layout/manifest
core@core-01 ~ $ cp -i hello hello-layout/rootfs/bin/
core@core-01 ~ $ ./appc-spec-v0.1.1/actool build hello-layout/ hello.aci
core@core-01 ~ $ ./appc-spec-v0.1.1/actool -debug validate hello.aci
hello.aci: valid app container image
</code></pre>

<p>ちなみに, ACIはtarなので,下記で中身を確認できる.</p>

<pre><code>core@core-01 ~ $ tar tvf hello.aci
drwxr-xr-x 500/500           0 2015-01-13 10:26 rootfs
drwxr-xr-x 500/500           0 2015-01-13 10:26 rootfs/bin
-rwxr-xr-x 500/500     4383427 2015-01-13 10:26 rootfs/bin/hello
-rw-r--r-- root/root       510 2015-01-13 10:27 manifest
</code></pre>

<h1>ACIの起動</h1>

<p>ここでcontainerを起動し, helloアプリがhttpリクエストを受けられる状態になる.<br/>
ちなみに, containerを落としたい時は<code>ctrl-]</code>を3回押す.</p>

<pre><code>core@core-01 ~ $ sudo ./rocket-v0.1.1/rkt --debug run hello.aci
2015/01/13 10:27:43 Unpacking stage1 rootfs
2015/01/13 10:27:43 Writing stage1 init
2015/01/13 10:27:43 Wrote filesystem to /var/lib/rkt/containers/5c59cdfd-648a-421f-8390-74f8cea7306c
2015/01/13 10:27:43 Loading image sha256-9454dfc3433953623bbe91fe09608a4dd44a7d21dbb9da093adb2f9d44f97005
2015/01/13 10:27:43 Writing container manifest
2015/01/13 10:27:43 Pivoting to filesystem /var/lib/rkt/containers/5c59cdfd-648a-421f-8390-74f8cea7306c
2015/01/13 10:27:43 Execing stage1/init
Spawning container stage1 on /var/lib/rkt/containers/5c59cdfd-648a-421f-8390-74f8cea7306c/stage1.
Press ^] three times within 1s to kill container.
Timezone UTC does not exist in container, not updating container timezone.
systemd 215 running in system mode. (-PAM -AUDIT -SELINUX +IMA -SYSVINIT +LIBCRYPTSETUP -GCRYPT -ACL -XZ +SECCOMP -APPARMOR)
Detected virtualization 'systemd-nspawn'.
Detected architecture 'x86-64'.

Welcome to Linux!

Initializing machine ID from container UUID.
[  OK  ] Created slice -.slice.
[  OK  ] Created slice system.slice.
         Starting Graceful exit watcher...
[  OK  ] Started Graceful exit watcher.
         Starting coreos.com/hello...
[  OK  ] Started coreos.com/hello.
[  OK  ] Reached target Rocket apps target.
</code></pre>

<h2>アクセスしてみる</h2>

<pre><code>core@core-01 ~ $ curl 127.0.0.1:5000
hello
</code></pre>

<h2>アクセスログが表示される</h2>

<pre><code>2015/01/13 10:31:30 request from 127.0.0.1:36742
</code></pre>

<h1>環境</h1>

<h2>OSX</h2>

<ul>
<li>OSX 10.9.5</li>
<li>Vagrant 1.6.5</li>
</ul>


<h2>CoreOS</h2>

<ul>
<li>CoreOS alpha (557.0.0)</li>
<li>go 1.3.3</li>
</ul>


<h1>参考</h1>

<ul>
<li><a href="https://github.com/coreos/rocket/blob/master/Documentation/getting-started-guide.md">rocket/getting-started-guide.md at master · coreos/rocket</a></li>
<li><a href="https://github.com/kelseyhightower/rocket-tutorial">kelseyhightower/rocket-tutorial</a></li>
<li><a href="http://qiita.com/mopemope/items/9f163e4715a8bb5846e9">CoreOS - はじめてのRocket - Qiita</a></li>
<li><a href="http://qiita.com/mopemope/items/fa9424b094aae3eac580">CoreOS 入門 - Qiita</a></li>
<li><a href="http://qiita.com/gom/items/0bfc1925a7fddfcdfdaf">Vagrant + CoreOS + Docker でコンテナ環境体験 - Qiita</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014年まとめ]]></title>
    <link href="http://takady.github.io/blog/2014/12/31/2014-summary/"/>
    <updated>2014-12-31T19:26:56+09:00</updated>
    <id>http://takady.github.io/blog/2014/12/31/2014-summary</id>
    <content type="html"><![CDATA[<p>今年はコードを書く楽しさを知った１年だった<br/>
去年までのコードをほとんど書いてなかった時間が悔やまれるけど、来年も前向きにいきたい</p>

<h1>よかったこと</h1>

<ul>
<li>rubygems.orgに4つgemを出した

<ul>
<li><a href="https://rubygems.org/profiles/takady">https://rubygems.org/profiles/takady</a></li>
</ul>
</li>
<li>テストコード書くようになった</li>
<li>ruby/railsを業務で使う機会を得られた</li>
<li>会社のCI環境を整えた</li>
<li>勉強会に参加するようになった(YAPC::Asia、RubyKaigi、RubyWorld Conference、他)</li>
<li>Ruby Advent Calenderに当日飛び入り参加した

<ul>
<li><a href="http://takady.github.io/blog/2014/12/07/file-safe-logger/">rubyのloggerをnewした後にログファイルを削除するとどうなるのか | Yuichi Takada</a></li>
</ul>
</li>
</ul>


<h1>わるかったこと</h1>

<ul>
<li>勉強会は、聞く側としてしか参加できなかった</li>
</ul>


<h2>1月</h2>

<ul>
<li>Hadoopでデータ処理するチームから、webアプリを書けるチームに移った</li>
<li>会社の都合でここから3ヶ月間仙台での生活が始まった</li>
<li><a href="http://rebuild.fm/">rebuild.fm</a>を発見してハマった、毎日聞いた、今も何回も繰り返し聞いてる</li>
</ul>


<h2>2月</h2>

<ul>
<li>1年かけて、何か一つ言語をまともに書けるようになりたいと思い、仙台の本屋で平積みされていたパーフェクトRubyという本を買った</li>
<li><a href="http://tagomoris.hatenablog.com/entry/2014/02/25/091607">あるブログエントリ</a>を読んで、<a href="https://github.com/takady">githubアカウント</a>を作り直した</li>
</ul>


<h2>3月</h2>

<ul>
<li>業務で始めてrubyでスクリプト書いた</li>
<li>macbook air買った</li>
<li>jenkinsをチームに導入した</li>
<li>認定スクラムマスターという研修を受けて認定を取得した</li>
</ul>


<h2>4月</h2>

<ul>
<li>仙台から東京に戻った</li>
<li><a href="http://regional.rubykaigi.org/oedo04/">大江戸Ruby会議04</a>に参加して、みんな楽しそうと思った</li>
<li>良い目標が思いついた
  <blockquote class="twitter-tweet" lang="ja"><p>今年の目標は、たくさん失敗することだ … <a href="http://t.co/Cy4xjffowl"><a href="http://t.co/Cy4xjffowl">http://t.co/Cy4xjffowl</a></a></p>&mdash; takady (@takady7) <a href="https://twitter.com/takady7/status/458937108955004928">2014, 4月 23</a></blockquote></li>
</ul>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2>5月</h2>

<ul>
<li>いくつか勉強会行った

<ul>
<li><a href="http://takady7.tumblr.com/post/85298039456/rails-why-choose-ruby-on-rails">【Railsセミナー】Why choose Ruby on Rails ? に行ってきた</a></li>
<li><a href="http://takady7.tumblr.com/post/85727186336/gree-tech-talk-05">GREE Tech Talk #05 : 並行/並列プログラミング</a></li>
<li><a href="http://takady7.tumblr.com/post/86500885716/heroku-meetup-12">Heroku Meetup #12 に行ってきた</a></li>
</ul>
</li>
</ul>


<h2>6月</h2>

<ul>
<li>27歳になっちゃった</li>
<li>始めてrubygemsにgemを出した

<ul>
<li><a href="http://qiita.com/takady/items/a4858c09b56e2b185814">apache logをパースするgemを作ってrubygems.orgに公開してみた - Qiita</a></li>
</ul>
</li>
<li>hipchat、hubotをチームに導入した</li>
</ul>


<h2>7月</h2>

<ul>
<li>会社のでかめのプロジェクトのリリースが無事終わった</li>
<li>組織の色々があった
  <blockquote class="twitter-tweet" lang="ja"><p>やっぱ言いたいこととか疑問とかはちゃんとぶつけた方がいいな&#10;それで相入れなくても、かげで文句言ってるよりもいいと思う</p>&mdash; takady (@takady7) <a href="https://twitter.com/takady7/status/486426378556813313">2014, 7月 8</a></blockquote></li>
</ul>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<ul>
<li>勉強会行った

<ul>
<li><a href="http://takady7.tumblr.com/post/91457205306/api-meetup-tokyo-1">API Meetup Tokyo #1</a></li>
<li><a href="http://takady7.tumblr.com/post/92888711266/2-ruby-on-rails">第2回「Ruby on Rails チュートリアル」ハンズオンセミナー</a></li>
</ul>
</li>
</ul>


<h2>8月</h2>

<ul>
<li>自分のgemを更新したり、新しく出したりした</li>
<li>テストコードの良さを身を持って実感し始めた</li>
<li>有給取ってYAPC::Asia行って、最高に楽しかった

<ul>
<li><a href="http://takady7.tumblr.com/post/96242359616/yapc-asia-tokyo-2014">YAPC::Asia Tokyo 2014</a></li>
</ul>
</li>
</ul>


<h2>9月</h2>

<ul>
<li>有給取ってrubyKaigiに行った

<ul>
<li><a href="http://takady7.tumblr.com/post/98302265911/rubykaigi2014">RubyKaigi2014に行ってきた</a></li>
</ul>
</li>
<li>terminal環境を整えて、emacsを使いはじめる

<ul>
<li><a href="http://takady7.tumblr.com/post/98303277811/zsh-ghq-peco-tmux">zsh、ghq、peco、tmuxなどについて</a></li>
</ul>
</li>
<li>社内rubyコミュニティの集まりに顔を出してみた

<ul>
<li><a href="http://takady7.tumblr.com/post/98803250651/meetup-1-20140930-issue-1-aoyokorb-aoyoko-rb">meetup #1 20140930 · Issue #1 · Aoyokorb/Aoyoko.rb&hellip;</a></li>
</ul>
</li>
</ul>


<h2>10月</h2>

<ul>
<li>会社のrails案件でコードたくさん書いた</li>
</ul>


<h2>11月</h2>

<ul>
<li>会社のrails案件でコードたくさん書いた</li>
<li>会社のPCもmacにしてもらえた</li>
<li>RubyWorld Conferenceで初めて島根に行った</li>
<li>blogをtumblrからoctopress on github pagesに変えた</li>
<li>Goに興味を持ち始める</li>
<li>Go Conferenceにも行った</li>
</ul>


<h2>12月</h2>

<ul>
<li>会社のrails案件でコードたくさん書いた</li>
<li>12/07のRuby Advent Calenderが当日に急遽空いた事に気づいたので、僭越ながら書かせてもらった

<ul>
<li><a href="http://takady.github.io/blog/2014/12/07/file-safe-logger/">rubyのloggerをnewした後にログファイルを削除するとどうなるのか | Yuichi Takada</a></li>
</ul>
</li>
<li>もっと一次情報を得たいと思い、Feedlyで海外を含めたblogポストをチェックするようになった</li>
</ul>


<h1>来年について</h1>

<ul>
<li>LTするとか、今年よりもっとアウトプットしたい</li>
<li>英語の記事も読んで情報をもっと早く得る</li>
<li>毎週何か作って出すくらいの勢いでOSS活動する</li>
<li>githubで100スターくらい取れるようなものを作る</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[facebook graph apiのAccess Tokenを取得するまで]]></title>
    <link href="http://takady.github.io/blog/2014/12/29/facebook-graph-api-oauth-flow/"/>
    <updated>2014-12-29T17:45:20+09:00</updated>
    <id>http://takady.github.io/blog/2014/12/29/facebook-graph-api-oauth-flow</id>
    <content type="html"><![CDATA[<p>OAuth2について、わかってたつもりでわかってないので、<br/>
<a href="https://github.com/nov/fb_graph">nov/fb_graph</a>を通して、facebook graph apiでAccess Tokenを発行するところまでを追ってみた</p>

<h1>TL;DR</h1>

<p>この面倒なtoken生成作業は、<a href="https://developers.facebook.com/">https://developers.facebook.com/</a>のTools > Graph API Explorerで、<br/>
Get Access Tokenとボタンを押すと生成できるので、すぐtokenを生成したいのなら、下記を読まずにそこから生成するのが楽で良い</p>

<h1>1.まずfacebookにappを登録</h1>

<p><a href="https://developers.facebook.com/">https://developers.facebook.com/</a>のApps > Add a New Appで作成できる<br/>
この時、リダイレクト先URLも下記から設定しておくこと<br/>
Settings > Advanced > Security > Valid OAuth redirect URIs</p>

<h1>2.App IDとApp Secretを確認</h1>

<p>先ほど作成したAppのDashboardに行って確認できる</p>

<h1>3.client_idとredirect_url付きのGETリクエストを送信</h1>

<p>下記のようにリクエストする</p>

<pre><code>GET https://graph.facebook.com/oauth/authorize?client_id=&lt;Your App ID&gt;&amp;redirect_uri=&lt;Your Redirect URL&gt;
</code></pre>

<h1>4.リダイレクトされたurlのAuthorization Codeパラメータの値を確認</h1>

<p>下記のような感じである</p>

<pre><code>http://example.com?code=&lt;Your Authorization Code&gt;
</code></pre>

<h1>5.POSTリクエストを送信してAccess Tokenを取得</h1>

<p>取得したAuthorization Codeを含め、パラメータとして下記をセットしてPOSTでリクエストする</p>

<pre><code>POST https://graph.facebook.com/oauth/access_token

 grant_type: authorization_code
 code: &lt;Your Authorization Code&gt;
 redirect_uri: &lt;Your Redirect URL&gt;
 client_id: &lt;Your App ID&gt;
 client_secret: &lt;Your App Secret&gt;
</code></pre>

<p>レスポンスのbodyは下記のようになっている</p>

<pre><code>access_token=&lt;Your Access Token&gt;  
</code></pre>

<p>この生成されたaccess_tokenを使って、facebook graph apiを利用する事ができる</p>

<h1>6.Access Tokenの有効期限を伸ばす</h1>

<p>facebook graph apiの場合、このままだとAccess Tokenの有効期限が短すぎる<br/>
下記のGETリクエストを送ることで、有効期限を60日間に伸ばす事ができる</p>

<pre><code>GET https://graph.facebook.com/oauth/access_token?grant_type=fb_exchange_token&amp;client_id=&lt;Your App ID&gt;&amp;client_secret=&lt;Your App Secret&gt;&amp;fb_exchange_token=&lt;Your Access Token&gt;  
</code></pre>

<h1>まとめ</h1>

<p>OAuth2、Access Token取得後はそれだけでAPIとやりとりできるからシンプルで良いけど、Access Tokenを取得するまでがめんどくさい<br/>
ブラウザ無しでtoken発行やりたかった(<a href="https://github.com/nov/fb_graph/wiki/Authentication#javascript-sdk">Javascript SDK</a>使ったらできるのか?)<br/>
Facebookでは上記フローだが、twitterとかgithubとか他のサービスもまったく同じなわけじゃないので、他も触ってみたい</p>

<h1>参考</h1>

<p><a href="http://stackoverflow.com/questions/21978728/obtaining-a-facebook-auth-token-for-a-command-line-desktop-application">ruby - Obtaining a Facebook auth token for a command-line (desktop) application - Stack Overflow</a><br/>
<a href="http://rebuild.fm/43/">Rebuild: 43: Kent is More Professional (Kenn Ejima)</a><br/>
<a href="https://github.com/nov/fb_graph/wiki">Home · nov/fb_graph Wiki</a><br/>
<a href="http://morizyun.github.io/blog/facebook-event-api-ruby-fb_graph/">公開中のFacebook EventをGraph APIから取得する - 酒と泪とRubyとRailsと</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rubyのloggerをnewした後にログファイルを削除するとどうなるのか]]></title>
    <link href="http://takady.github.io/blog/2014/12/07/file-safe-logger/"/>
    <updated>2014-12-07T18:01:52+09:00</updated>
    <id>http://takady.github.io/blog/2014/12/07/file-safe-logger</id>
    <content type="html"><![CDATA[<p><strong>この投稿は<a href="http://qiita.com/advent-calendar/2014/ruby">Ruby Advent Calendar 2014</a>の7日目の記事です。</strong></p>

<p>rubyには標準添付ライブラリにloggerクラスがある。<br/>
そのloggerクラス、newした後に出力先のログファイルが削除された時の挙動について調べた。<br/>
そして、<a href="https://github.com/takady/file_safe_logger">file_safe_logger</a>というgemを作った。</p>

<h1>検証</h1>

<p>下記のようにして、<code>Logger.new</code>と<code>logger.info</code>の間でファイルを削除してみる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;logger&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;fileutils&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">logfile</span> <span class="o">=</span> <span class="s1">&#39;test.log&#39;</span>
</span><span class='line'><span class="n">logger</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">logfile</span><span class="p">)</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">rm</span><span class="p">(</span><span class="n">logfile</span><span class="p">)</span>
</span><span class='line'><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;this is test&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは、結果としてはエラーにはならず正常終了するが、test.logというファイルはカレントディレクトリに存在せず、もちろん<code>this is test</code>というlogも残っていない。</p>

<h1>FileSafeLogger</h1>

<p>ファイルが削除されるとlogging出来ないというのが困る時がある。<br/>
なので、<a href="https://github.com/takady/file_safe_logger">file_safe_logger</a>というgemを作った。<br/>
やってることはいたって単純で、<a href="https://github.com/ruby/ruby/blob/trunk/lib/logger.rb#L593-L612">Logger::LogDevice.#write</a>メソッドをoverrideして、ファイルが存在しない場合は作成しているだけである。<br/>
<a href="https://github.com/takady/file_safe_logger">file_safe_logger</a>を使って、先ほどのlogging処理と同じ処理をやってみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;file_safe_logger&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;fileutils&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">logfile</span> <span class="o">=</span> <span class="s1">&#39;test.log&#39;</span>
</span><span class='line'><span class="n">logger</span> <span class="o">=</span> <span class="no">FileSafeLogger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">logfile</span><span class="p">)</span>
</span><span class='line'><span class="no">FileUtils</span><span class="o">.</span><span class="n">rm</span><span class="p">(</span><span class="n">logfile</span><span class="p">)</span>
</span><span class='line'><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;this is test&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これの実行後、カレントディレクトリには<code>test.log</code>が存在し、下記のようにlogが書き出されている。</p>

<pre><code>$ cat test.log
# Logfile created on 2014-12-06 17:07:53 +0900 by logger.rb/44203
I, [2014-12-06T17:07:53.884806 #1547]  INFO -- : this is test
</code></pre>

<h1>参考</h1>

<p><a href="https://github.com/sonots/process_safe_logger">sonots/process_safe_logger</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[チームで情報をスタックするためのwikiの運用で気をつけていること]]></title>
    <link href="http://takady.github.io/blog/2014/12/03/documentation/"/>
    <updated>2014-12-03T21:14:11+09:00</updated>
    <id>http://takady.github.io/blog/2014/12/03/documentation</id>
    <content type="html"><![CDATA[<p>僕のいるチームでは<a href="https://www.atlassian.com/ja/software/confluence">Confluence</a>を使っているが、一般的なwikiのようなものであれば適用できる話だと思う。<br/>
ちなみにこれは個人的に気をつけていることであって、他のメンバーに強制してるとかはない。<br/>
twitterとかblogのようなフローの情報ではなく、スタックするタイプの情報管理は、下記のようなことを意識してないと結構すぐに破綻する気がしてる。</p>

<h1>階層を深くしすぎない</h1>

<p>wikiはサイト全体をツリー構造に構築するものだが、だいたい３~4階層までにしときたい。<br/>
深すぎると辿っていくような遷移をする時に面倒だから。<br/>
wiki全体の階層構造としては、大体下記くらいの深さ&amp;粒度が良い気がしてる。</p>

<pre><code>-- Installation
   |-- moduleA
   |-- moduleB
   |-- :
   `-- :
-- FYI
   |-- rails tips
   |-- git tips
   |-- LGTM images
   |-- :
   `-- :
-- Dev&amp;Ops
   |-- CI
   |-- source code management policy
   |-- trouble shoot
   |-- :
   `-- :
-- Minutes
   |-- daily scrum
   |   |-- 2014-01
   |   |-- 2014-02
   |   |-- 2014-03
   |   |-- :
   |   `-- :
   |-- :
   `-- :
</code></pre>

<h1>ページを細かく分けて増やし過ぎない</h1>

<p>何か書こうと思った時には、新しいページを作りたくなるんだが、ページが分かれすぎてると見る人が大変になる。<br/>
なるべく同じページ内で章を分けたりして、ページが乱立するのを避ける。<br/>
開発関連のドキュメントの場合は、一つのページが縦に長くなっていても、そんなに気にならないと個人的には感じている。</p>

<h1>別のページをincludeはなるべくしない</h1>

<p>なんか、includeしてるorginのページを編集するのがすごく面倒だから、includeはなるべく使わないようにしている。<br/>
たいていはリンク貼っておくだけで全然問題ない。</p>

<h1>検索可能にする</h1>

<p>当たり前だけど、文字なら文字として書く。<br/>
confluenceには&#8221;この階層以下を検索&#8221;とかって機能があって、結構それ使って検索することがある。<br/>
画像貼っただけのページとかだと、キーワード検索で引っかからなくてつらかったりする。</p>

<h1>英語と日本語の両方で書く</h1>

<p>チームには日本人もいるし外国人もいるので、下記のように英語と日本語に両方で書いてる。</p>

<pre><code>We use rspec version3.(私たちはrspec3を使います。)
Should keep code coverage 100%.(テストのコードカバレッジは100%を保ちましょう。)
</code></pre>

<h1>メンテする</h1>

<p>これが一番難しくて今でも困ってるんだが、ドキュメントは時間が経つと腐っていくので、適宜内容は更新していかないといけない。<br/>
APIドキュメントとかならコードから機械的に生成するとかもやったりしているが、<br/>
機械的に生成出来ない類のドキュメントもあるし、これはもう定期的にチェックしていくしかないかなーという気がしてる。<br/>
賞味期限を設けて、それを超えるとアラートするとかすると辛くなりそうだしなぁ。</p>

<h1>まとめ</h1>

<p>いろいろ書いたけど結局のところ、メンバーが見やすく探しやすく書きやすい状態を保っときたいという話でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[development環境だけbefore_actionをスキップする]]></title>
    <link href="http://takady.github.io/blog/2014/12/03/skip-before-action-on-development-env/"/>
    <updated>2014-12-03T21:02:25+09:00</updated>
    <id>http://takady.github.io/blog/2014/12/03/skip-before-action-on-development-env</id>
    <content type="html"><![CDATA[<p>最近railsでapi開発をしていて、もちろんテストコード書いてるんだけど、<br/>
たまにブラウザからGETリクエスト送ってサクッとjsonの中を見たいって時に、認証があって見れない。。。ってパターンがかなりある。<br/>
開発環境では、認証しなくていいやと思った。<br/>
下記のようにすることで、before_actionをdevelopment環境ではスキップさせられる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:authenticate</span> <span class="k">unless</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">development?</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">authenticate</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>参考</h1>

<p><a href="http://memo.yomukaku.net/entries/127">Rails.env.development?でdevelopment環境かどうかを判定できる - memo.yomukaku.net</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[railsでmysqlのbooleanなカラムをエイリアスで扱う時の注意事]]></title>
    <link href="http://takady.github.io/blog/2014/12/02/rails-mysql-boolean/"/>
    <updated>2014-12-02T18:07:11+09:00</updated>
    <id>http://takady.github.io/blog/2014/12/02/rails-mysql-boolean</id>
    <content type="html"><![CDATA[<p>rails+mysqlな環境では、booleanで定義したカラムはtinyint(1)で作られ、中身はtrue/falseではなく、0/1が入る。<br/>
そして、railsアプリケーション上でmysqlのtinyint(1)型データを扱う時、値は自動的にtrue/falseとして扱われる。<br/>
そこまでは知っていたんだけど、<code>select('foobar_flg as fb_flg')</code>というふうに、カラム名をエイリアスして取り出すと値が0/1なのは知らなかった。</p>

<p>具体的には下記のとおりである。</p>

<pre><code>pry(main)&gt; p = User.select(:foobar_flg)
  User Load (10.5ms)  SELECT  `users`.`foobar_flg` FROM `users`
=&gt; [#&lt;User id: nil, foobar_flg: false&gt;]
pry(main)&gt; p.first.foobar_flg
=&gt; false

pry(main)&gt; p = User.select('foobar_flg as fb_flg')
  User Load (5.8ms)  SELECT  foobar_flg as fb_flg FROM `users`
=&gt; [#&lt;User id: nil&gt;]
pry(main)&gt; p.first.fb_flg
=&gt; 0
</code></pre>

<p>ちなみに、selectメソッドの引数に文字列を指定したから0/1が返ってくるというわけではない。<br/>
下記のようにエイリアス無しなら、文字列で指定してもtrue/falseに解釈される。</p>

<pre><code>pry(main)&gt; p = User.select('foobar_flg')
  User Load (10.0ms)  SELECT  `users`.`foobar_flg` FROM `users`
=&gt; [#&lt;User id: nil, foobar_flg: false&gt;]
pry(main)&gt; p.first.foobar_flg
=&gt; false
</code></pre>

<p>このままだと結構困る。<br/>
結論としては、<strong>as使わない</strong>で済むならそれが最善手だと思う。<br/>
が、それが無理なら、例えば下記のようにModelのattributeメソッドをoverrideしちゃうのが良さそう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">fb_flg</span>
</span><span class='line'>  <span class="n">read_attribute</span><span class="p">(</span><span class="ss">:fb_flg</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>参考</h1>

<p><a href="http://stackoverflow.com/questions/373731/override-activerecord-attribute-methods">ruby on rails - Override ActiveRecord attribute methods - Stack Overflow</a></p>
]]></content>
  </entry>
  
</feed>
