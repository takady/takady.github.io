<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yuichi Takada]]></title>
  <link href="http://takady.github.io/atom.xml" rel="self"/>
  <link href="http://takady.github.io/"/>
  <updated>2014-12-03T23:25:02+09:00</updated>
  <id>http://takady.github.io/</id>
  <author>
    <name><![CDATA[Yuichi Takada]]></name>
    <email><![CDATA[takadyuichi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[チームで情報をスタックするためのwikiの運用で気をつけていること]]></title>
    <link href="http://takady.github.io/blog/2014/12/03/documentation/"/>
    <updated>2014-12-03T21:14:11+09:00</updated>
    <id>http://takady.github.io/blog/2014/12/03/documentation</id>
    <content type="html"><![CDATA[<p>僕のいるチームでは<a href="https://www.atlassian.com/ja/software/confluence">Confluence</a>を使っているが、一般的なwikiのようなものであれば適用できる話だと思う。<br/>
ちなみにこれは個人的に気をつけていることであって、他のメンバーに強制してるとかはない。<br/>
twitterとかblogのようなフローの情報ではなく、スタックするタイプの情報管理は、下記のようなことを意識してないと結構すぐに破綻する気がしてる。</p>

<h1>階層を深くしすぎない</h1>

<p>wikiはサイト全体をツリー構造に構築するものだが、だいたい３~4階層までにしときたい。<br/>
深すぎると辿っていくような遷移をする時に面倒だから。<br/>
wiki全体の階層構造としては、大体下記くらいの深さ&amp;粒度が良い気がしてる。</p>

<pre><code>-- Installation
   |-- moduleA
   |-- moduleB
   |-- :
   `-- :
-- FYI
   |-- rails tips
   |-- git tips
   |-- LGTM images
   |-- :
   `-- :
-- Dev&amp;Ops
   |-- CI
   |-- source code management policy
   |-- trouble shoot
   |-- :
   `-- :
-- Minutes
   |-- daily scrum
   |   |-- 2014-01
   |   |-- 2014-02
   |   |-- 2014-03
   |   |-- :
   |   `-- :
   |-- :
   `-- :
</code></pre>

<h1>ページを細かく分けて増やし過ぎない</h1>

<p>何か書こうと思った時には、新しいページを作りたくなるんだが、ページが分かれすぎてると見る人が大変になる。<br/>
なるべく同じページ内で章を分けたりして、ページが乱立するのを避ける。<br/>
開発関連のドキュメントの場合は、一つのページが縦に長くなっていても、そんなに気にならないと個人的には感じている。</p>

<h1>別のページをincludeはなるべくしない</h1>

<p>なんか、includeしてるorginのページを編集するのがすごく面倒だから、includeはなるべく使わないようにしている。<br/>
たいていはリンク貼っておくだけで全然問題ない。</p>

<h1>検索可能にする</h1>

<p>当たり前だけど、文字なら文字として書く。<br/>
confluenceには&#8221;この階層以下を検索&#8221;とかって機能があって、結構それ使って検索することがある。<br/>
画像貼っただけのページとかだと、キーワード検索で引っかからなくてつらかったりする。</p>

<h1>英語と日本語の両方で書く</h1>

<p>チームには日本人もいるし外国人もいるので、下記のように英語と日本語に両方で書いてる。</p>

<pre><code>We use rspec version3.(私たちはrspec3を使います。)
Should keep code coverage 100%.(テストのコードカバレッジは100%を保ちましょう。)
</code></pre>

<h1>メンテする</h1>

<p>これが一番難しくて今でも困ってるんだが、ドキュメントは時間が経つと腐っていくので、適宜内容は更新していかないといけない。<br/>
APIドキュメントとかならコードから機械的に生成するとかもやったりしているが、<br/>
機械的に生成出来ない類のドキュメントもあるし、これはもう定期的にチェックしていくしかないかなーという気がしてる。<br/>
賞味期限を設けて、それを超えるとアラートするとかすると辛くなりそうだしなぁ。</p>

<h1>まとめ</h1>

<p>いろいろ書いたけど結局のところ、メンバーが見やすく探しやすく書きやすい状態を保っときたいという話でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[development環境だけbefore_actionをスキップする]]></title>
    <link href="http://takady.github.io/blog/2014/12/03/skip-before-action-on-development-env/"/>
    <updated>2014-12-03T21:02:25+09:00</updated>
    <id>http://takady.github.io/blog/2014/12/03/skip-before-action-on-development-env</id>
    <content type="html"><![CDATA[<p>最近railsでapi開発をしていて、もちろんテストコード書いてるんだけど、<br/>
たまにブラウザからGETリクエスト送ってサクッとjsonの中を見たいって時に、認証があって見れない。。。ってパターンがかなりある。<br/>
開発環境では、認証しなくていいやと思った。<br/>
下記のようにすることで、before_actionをdevelopment環境ではスキップさせられる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:authenticate</span> <span class="k">unless</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">development?</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">authenticate</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>参考</h1>

<p><a href="http://memo.yomukaku.net/entries/127">Rails.env.development?でdevelopment環境かどうかを判定できる - memo.yomukaku.net</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[railsでmysqlのbooleanなカラムをエイリアスで扱う時の注意事]]></title>
    <link href="http://takady.github.io/blog/2014/12/02/rails-mysql-boolean/"/>
    <updated>2014-12-02T18:07:11+09:00</updated>
    <id>http://takady.github.io/blog/2014/12/02/rails-mysql-boolean</id>
    <content type="html"><![CDATA[<p>rails+mysqlな環境では、booleanで定義したカラムはtinyint(1)で作られ、中身はtrue/falseではなく、0/1が入る。<br/>
そして、railsアプリケーション上でmysqlのtinyint(1)型データを扱う時、値は自動的にtrue/falseとして扱われる。<br/>
そこまでは知っていたんだけど、<code>select('foobar_flg as fb_flg')</code>というふうに、カラム名をエイリアスして取り出すと値が0/1なのは知らなかった。</p>

<p>具体的には下記のとおりである。</p>

<pre><code>pry(main)&gt; p = User.select(:foobar_flg)
  User Load (10.5ms)  SELECT  `users`.`foobar_flg` FROM `users`
=&gt; [#&lt;User id: nil, foobar_flg: false&gt;]
pry(main)&gt; p.first.foobar_flg
=&gt; false

pry(main)&gt; p = User.select('foobar_flg as fb_flg')
  User Load (5.8ms)  SELECT  foobar_flg as fb_flg FROM `users`
=&gt; [#&lt;User id: nil&gt;]
pry(main)&gt; p.first.fb_flg
=&gt; 0
</code></pre>

<p>ちなみに、selectメソッドの引数に文字列を指定したから0/1が返ってくるというわけではない。<br/>
下記のようにエイリアス無しなら、文字列で指定してもtrue/falseに解釈される。</p>

<pre><code>pry(main)&gt; p = User.select('foobar_flg')
  User Load (10.0ms)  SELECT  `users`.`foobar_flg` FROM `users`
=&gt; [#&lt;User id: nil, foobar_flg: false&gt;]
pry(main)&gt; p.first.foobar_flg
=&gt; false
</code></pre>

<p>このままだと結構困る。<br/>
結論としては、<strong>as使わない</strong>で済むならそれが最善手だと思う。<br/>
が、それが無理なら、例えば下記のようにModelのattributeメソッドをoverrideしちゃうのが良さそう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">fb_flg</span>
</span><span class='line'>  <span class="n">read_attribute</span><span class="p">(</span><span class="ss">:fb_flg</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>参考</h1>

<p><a href="http://stackoverflow.com/questions/373731/override-activerecord-attribute-methods">ruby on rails - Override ActiveRecord attribute methods - Stack Overflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[turnipを使ってシナリオテストを自動化]]></title>
    <link href="http://takady.github.io/blog/2014/11/26/turnip/"/>
    <updated>2014-11-26T19:17:48+09:00</updated>
    <id>http://takady.github.io/blog/2014/11/26/turnip</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/jnicklas/turnip">turnip</a>は、シナリオテストを自然言語風のDSLで記述・実行させることができるruby製のツールです。<br/>
ここでは、wikipediaを開いて「カブ」を検索するというシナリオを例にしてみます。</p>

<h1>事前に</h1>

<p>webページの操作には<a href="https://github.com/jnicklas/capybara">Capybara</a>を使います。<br/>
今回はrackアプリではないので、HTTP通信を行うためのdriverを別途用意する必要があります。<br/>
今回は比較的導入が楽でありHeadless(GUIを必要としない)ドライバであるPhantomJSを利用します。<br/>
OSXであれば、下記でインストールできます。</p>

<pre><code>$ brew install phantomjs
</code></pre>

<h1>準備</h1>

<p>まずディレクトリを用意しましょう。<br/>
今回は、railsなどとは組み合わせず、シンプルにturnipだけを使います。</p>

<pre><code>$ mkdir turnip_sample
$ cd !$

$ bundle init
</code></pre>

<p>Gemfileに下記を記載し、<code>bundle install</code>を実行します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s2">&quot;https://rubygems.org&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;turnip&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;capybara&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;poltergeist&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>rspecとturnipの設定ファイルを用意します。</p>

<pre><code>$ rspec init
$ echo '-r turnip/rspec' &gt;&gt; .rspec
</code></pre>

<p><code>spec/turnip_helper.rb</code>を下記の内容で作成します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;turnip/capybara&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara/poltergeist&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">default_driver</span> <span class="o">=</span> <span class="ss">:poltergeist</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&quot;spec/**/*steps.rb&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="nb">load</span> <span class="n">f</span><span class="p">,</span> <span class="kp">true</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、turnipでwebアプリのシナリオテストを書く準備が整いました。</p>

<h1>featureファイル</h1>

<p>featureファイルを下記の内容で作成します。</p>

<p>spec/features/sample.feature</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='Text'><span class='line'>Feature: 検索する
</span><span class='line'>
</span><span class='line'>  Scenario: wikipediaでカブを検索する
</span><span class='line'>    Given wikipediaトップページにアクセスする
</span><span class='line'>    When wikipediaトップページを表示する
</span><span class='line'>    Then ウィキペディアへようこそと表示されている
</span><span class='line'>    And searchにカブを入力する
</span><span class='line'>    And searchButtonボタンをクリックする
</span><span class='line'>    Then アブラナ科アブラナ属の越年草と表示されている
</span></code></pre></td></tr></table></div></figure>


<p>featureファイルは、いわゆるテストシナリオの定義ファイルです。<br/>
自然言語で書ける(日本語にも対応している)ため、非エンジニアにとっても理解しやすいと思います。</p>

<h1>stepファイル</h1>

<p>stepファイルを下記の内容で作成します。</p>

<p>spec/steps/sample_step.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">step</span> <span class="s1">&#39;wikipediaトップページにアクセスする&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Capybara</span><span class="o">.</span><span class="n">app_host</span> <span class="o">=</span> <span class="s2">&quot;http://ja.wikipedia.org&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">step</span> <span class="s1">&#39;wikipediaトップページを表示する&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">visit</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">step</span> <span class="sx">%(:textと表示されている)</span> <span class="k">do</span> <span class="o">|</span><span class="n">text</span><span class="o">|</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="n">page</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">step</span> <span class="sx">%(:fieldに:valueを入力する)</span> <span class="k">do</span> <span class="o">|</span><span class="n">field</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>  <span class="n">fill_in</span> <span class="n">field</span><span class="p">,</span> <span class="ss">with</span><span class="p">:</span> <span class="n">value</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">step</span> <span class="sx">%(:textボタンをクリックする)</span> <span class="k">do</span> <span class="o">|</span><span class="n">text</span><span class="o">|</span>
</span><span class='line'>  <span class="n">click_button</span> <span class="n">text</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>テスト実行</h1>

<p>無事にテストが通過するはずです。</p>

<pre><code>$ rspec
JQMIGRATE: Logging is active
JQMIGRATE: Logging is active
.

Finished in 5.6 seconds (files took 0.29979 seconds to load)
1 example, 0 failures
</code></pre>

<h1>featureファイルとstepファイルの関係</h1>

<p>featureファイルが自然言語風なDSLなのでイメージしにくいかもしれませんが、featureファイルから、stepファイルに定義したメソッド(実際にはstep)を呼び出している、と考えるとわかりやすいかと思います。<br/>
上記の例ですと、<br/>
featureファイルの<code>Then ウィキペディアへようこそと表示されている</code>という記述で、stepファイルの、<code>step %(:textと表示されている)</code>のstepが呼ばれます。<br/>
<code>:text</code>とすることで、そこに入る文字列を動的に指定出来て汎用的になります。</p>

<h1>参考</h1>

<p><a href="http://magazine.rubyist.net/?0042-FromCucumberToTurnip">Rubyist Magazine - エンドツーエンドテストの自動化は Cucumber から Turnip へ</a><br/>
<a href="http://techracho.bpsinc.jp/hachi8833/2014_06_26/18068">[RSpec][Turnip] 一般的に使えるTurnipステップ集 | TechRacho</a><br/>
<a href="http://gongo.hatenablog.com/entry/2013/05/29/223218">Turnip について (1) / まずは動かす - Thanks Driven Life</a><br/>
<a href="http://orangain.hatenablog.com/entry/turnip">Ruby製アプリじゃなくてもTurnipで自動受け入れテストがしたい - orangain flavor</a><br/>
<a href="http://qiita.com/moriyaman/items/af2a0264adbaaa0d2029">Rails + Turnip + Capybara + poltergeistでBDDテスト - Qiita</a><br/>
<a href="http://tmpla.info/installation-of-capybara-webkit/">Capybara WebkitをCentOSで使えるようにする方法 – 日本の天ぷら情報</a><br/>
<a href="http://qiita.com/take/items/779747e0981355e569ad">poltergeist - Capybaraを使う際に知っておきたいこと - Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rubyのloggerでlogのヘッダを出力しない]]></title>
    <link href="http://takady.github.io/blog/2014/11/22/disable-ruby-log-header/"/>
    <updated>2014-11-22T13:11:18+09:00</updated>
    <id>http://takady.github.io/blog/2014/11/22/disable-ruby-log-header</id>
    <content type="html"><![CDATA[<p>rubyのLoggerを使っていると、Logger.newした際に生成されるlogファイルには、デフォルトで下記のようなヘッダが出力される。<br/>
<code># Logfile created on 2014-11-22 13:15:26 +0900 by logger.rb/44203</code></p>

<p>これを出したくない場合は、下記のようにヘッダをつける<a href="https://github.com/ruby/ruby/blob/trunk/lib/logger.rb#L649-L653">Logger::LogDevice#add_log_header</a>メソッドを空にoverrideすると良い。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Logger</span><span class="o">::</span><span class="no">LogDevice</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_log_header</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">log</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;info.log&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>参考</h1>

<p><a href="http://stackoverflow.com/questions/4096336/can-i-disable-the-log-header-for-ruby-logger">Can I disable the log header for ruby logger? - Stack Overflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[railsで、複数の出力先にlogを出力する]]></title>
    <link href="http://takady.github.io/blog/2014/11/21/rails-logger-broadcast/"/>
    <updated>2014-11-21T18:57:07+09:00</updated>
    <id>http://takady.github.io/blog/2014/11/21/rails-logger-broadcast</id>
    <content type="html"><![CDATA[<p>railsアプリケーションで、error以上のレベルのログだけ、２箇所にログを出力したいと思った。</p>

<h1>前提</h1>

<p>ruby 2.1.2<br/>
rails 4.1.4</p>

<h1>方法</h1>

<p>まず、複数の出力先にロギングするには、<a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/logger.rb#L10-L42">ActiveSupport::Logger.#broadcast</a>というメソッドが使える。<br/>
config/application.rbのMyapp::Applicationクラス内に下記のように書いてみた。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">logger</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">config</span><span class="o">.</span><span class="n">paths</span><span class="o">[</span><span class="s2">&quot;log&quot;</span><span class="o">].</span><span class="n">first</span><span class="p">)</span>
</span><span class='line'><span class="n">error_logger</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;log/error.log&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">error_logger</span><span class="o">.</span><span class="n">level</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">::</span><span class="no">ERROR</span>
</span><span class='line'><span class="n">logger</span><span class="o">.</span><span class="n">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Logger</span><span class="o">.</span><span class="n">broadcast</span><span class="p">(</span><span class="n">error_logger</span><span class="p">)</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">logger</span> <span class="o">=</span> <span class="n">logger</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、複数箇所にログが出力されるようにはなった。<br/>
しかし、今回やりたかったのは、<strong>ERROR以上の時だけ</strong>２箇所にロギングしたいというもので、上記のようにconfig/application.rbでextendした場合、error_loggerのlevelをERRORにセットしていても、Rails.loggerのlevelと同じlevelでのloggingになってしまう。<br/>
全く同じエラーログを複数箇所に吐かせたいというだけであれば、上記の方法で良いと思う。(その際、上記の<code>error_logger.level = Logger::ERROR</code>は意味が無いので消した方が良い)</p>

<p>error_logger.levelの指定が効くようにするには、<code>run Rails.application</code>よりも後で、error_loggerをRails.loggerにextendすると良い。<br/>
config.ruに下記を追記する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">run</span> <span class="no">Rails</span><span class="o">.</span><span class="n">application</span>
</span><span class='line'>
</span><span class='line'><span class="n">error_logger</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;log/error.log&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">error_logger</span><span class="o">.</span><span class="n">level</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">::</span><span class="no">ERROR</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Logger</span><span class="o">.</span><span class="n">broadcast</span><span class="p">(</span><span class="n">error_logger</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、log/error.logへは、ERRORレベル以上のログだけが出力されるようになった。<br/>
もちろん、log/development.logには、これまでどおりDEBUGレベルまで含めた全てのlogが出ている。</p>

<h1>参考</h1>

<p><a href="http://blog.livedoor.jp/sonots/archives/38927788.html">[Ruby] 例えば、Rails の標準ログを止める - sonots:blog</a><br/>
<a href="http://railsdoc.eiel.info/active_support/logger/">RailsDoc - ActiveSupport::Logger</a><br/>
<a href="http://mitsu877.hatenablog.com/entry/2014/11/15/193547">【Rails】バッチの実行ログを専用のログファイルと標準出力の両方に出す - おどるダメ人間</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress]]></title>
    <link href="http://takady.github.io/blog/2014/11/15/fist-of-octopress/"/>
    <updated>2014-11-15T15:52:35+09:00</updated>
    <id>http://takady.github.io/blog/2014/11/15/fist-of-octopress</id>
    <content type="html"><![CDATA[<p>今更ながら、octopress使ってみる。<br/>
markdownで書いて、投稿がterminalからできるってのが良いです。</p>
]]></content>
  </entry>
  
</feed>
