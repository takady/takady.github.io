<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: book | Yuichi Takada]]></title>
  <link href="http://blog.takady.net/blog/categories/book/atom.xml" rel="self"/>
  <link href="http://blog.takady.net/"/>
  <updated>2017-03-19T18:26:19+09:00</updated>
  <id>http://blog.takady.net/</id>
  <author>
    <name><![CDATA[Yuichi Takada]]></name>
    <email><![CDATA[takadyuichi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SOFT SKILLS ソフトウェア開発者の人生マニュアル を読んだ]]></title>
    <link href="http://blog.takady.net/blog/2016/07/23/soft-skills/"/>
    <updated>2016-07-23T10:33:25+09:00</updated>
    <id>http://blog.takady.net/blog/2016/07/23/soft-skills</id>
    <content type="html"><![CDATA[<p>先月、日本語版が発売された直後に買って読んだ。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&o=9&p=8&l=as1&asins=B01GDS0994&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>ソフトウェアエンジニアとして、キャリアの事から健康や心の事まで、まさに人生マニュアルといった内容で、とてもおもしろかった。<br/>
責任範囲を増やすことが自分にとってどういうメリットがあるのかとか、プロというのはどういうものかとか、なんなんだろうと思っていた事が語られていて、そういう事か〜っていう納得感が僕にはあった。<br/>
読んで1ヶ月経って、ハイライトしたところなど読みなおしていたけど、改めて良い本だと思いました。</p>

<p>何度も読みなおすのが良さそう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10年後の仕事のカタチ10のヒント を読んだ]]></title>
    <link href="http://blog.takady.net/blog/2016/07/23/hints-of-work-style-after-a-decade/"/>
    <updated>2016-07-23T09:14:15+09:00</updated>
    <id>http://blog.takady.net/blog/2016/07/23/hints-of-work-style-after-a-decade</id>
    <content type="html"><![CDATA[<p><a href="http://tango-ruby.hatenablog.com/entry/2015/11/04/172930">こちらのブログ記事</a> でオススメされていたので読んでみた。<br/>
対話形式になっている。ボリュームが多くないのでさくっと2時間くらいで読めて価格もお手頃。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&o=9&p=8&l=as1&asins=B00HOTLXKQ&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<h1>感想</h1>

<p>印象に残ってるところ。</p>

<h2>会社以外でのプロジェクト</h2>

<ul>
<li>「自分で決める、自分でリスクを背負う」っていうのは、会社で言われてことをやるのとは全く違うんです。</li>
</ul>


<h2>東京とベトナムのピザ屋の話</h2>

<ul>
<li>東京だともうすでに美味しいピザのお店がたくさんあって競合が多いし、初期の設備投資のお金もたくさん必要。</li>
<li>ベトナムにはまだ本格的なピザを食べられるお店があまりなかったので、同じくらいの実力でもベトナムでトップになれた。</li>
<li>トップになって儲かり始めるので、もっとクオリティが良くなり、飛び抜けていく。</li>
</ul>


<h2>日本の中のものさしで測って怖がらない</h2>

<ul>
<li>イチローとか松井とか、安定した日本球界でのキャリアよりも大リーグに挑戦したのも、未知のものにトライするとワクワクするから。</li>
<li>なんとかなる。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10年戦えるデータ分析入門 SQLを武器にデータ活用時代を生き抜く を読んだ]]></title>
    <link href="http://blog.takady.net/blog/2016/05/22/introduction-to-data-analysis-book/"/>
    <updated>2016-05-22T10:38:56+09:00</updated>
    <id>http://blog.takady.net/blog/2016/05/22/introduction-to-data-analysis-book</id>
    <content type="html"><![CDATA[<p>読んだ。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&o=9&p=8&l=as1&asins=4797376279&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>最近またデータ活用的なところをやる機会が来るかもなので、今ってその辺どんな感じなんだろうというのを知りたくて本書を手にとった。ボリューム自体は重くなく、数時間で読めた。</p>

<h1>感想</h1>

<p>第1部の SQL 初級入門な章は流し読みした。</p>

<p>第2部以降、下記のような話が網羅されていて参考になった。</p>

<ul>
<li>データソース層、DWH層、データマート層の3層構造</li>
<li>オンプレミスとクラウドサービス利用のトレードオフ</li>
<li>ディメンションテーブル（スタースキーマ）</li>
<li>ETL と ELT</li>
<li>DWH 向けデータベース製品のそれぞれの特長の説明（BigQueryやHadoop含む）</li>
<li>データ構築のバッチは処理の粒度を細かくして冪等に作ろうって話</li>
<li>差分更新・全件更新の話</li>
</ul>


<p>あとテストの話も書いてはあるが、SQLが正常に動くことや件数が正しいことのテストだった。<br/>
実際にデータの内容が正しいかのテストがデータ基盤のテストとしては最も重要だけど方法として確立されたものは聞いたことがないので、その辺についてなにか書いてくれてることを期待してた。この本に載っていないということは、まだそういうテスト手法は出てきてないのかもしれない。</p>

<h1>その他</h1>

<p>2011年から2013年くらいまでひたすらバッチで Hadoop にデータを入れてそれを HiveQL で集計・抽出という業務をやっていた時期があって、その時に感じていたことやみんなで考えていたような事が書かれていたりして懐かしく思ったし、当時の自分たちの方法が肯定される記述も多くて良かったと思った。<br/>
当時はこういう大規模データ運用現場に関する知見があまり出回ってなかった気がする。（Hadoop とかビックデータという言葉はやたらバズっていたが。<br/>
あの時この本読んでたらなーとも思った。</p>

<p>データ分析基盤を作っている人やこれから作っていこうとしている人にとって本書はとても良いものだとおもいました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[オブジェクト指向における再利用のためのデザインパターン を読んだ]]></title>
    <link href="http://blog.takady.net/blog/2015/11/04/gof-design-pattern/"/>
    <updated>2015-11-04T20:45:35+09:00</updated>
    <id>http://blog.takady.net/blog/2015/11/04/gof-design-pattern</id>
    <content type="html"><![CDATA[<p>いわゆる GoF 本を読んだ。</p>

<p><br /></p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&o=9&p=8&l=as1&asins=4797311126&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<h1>動機</h1>

<p>こういう設計に関する本は今まで読んだことがなくて、なんとなくそういうことは本で勉強するより実践から身につけるものなんだろうという考えがあったんだけど、チームリーダーからそういう本も読んでみたらいいよと言われたこともあり、どうせ読むなら一番ベタなやつをということでこの本を選んだ。</p>

<h1>感想</h1>

<p>書いてあるパターンには、よく知っているものから、よくわからないものまであった。<br/>
今までなんとなく書いていた書き方に、oo パターンという名前が付いたような感じ。<br/>
ただ、違いがいまいち理解出来ないものもあったりして、引き続き勉強しないとなと思った。</p>

<p>役に立ちそうなところとか、良かったと思ったことはこの辺だろうか。</p>

<ul>
<li><p>共通の設計用語が身につく</p>

<ul>
<li>oo パターンという名前によって伝えられるので、他の人にも伝えやすい。</li>
<li>他の開発者とのコミュニケーションの助けになると思う。</li>
</ul>
</li>
<li><p>先人の知恵を借りられる</p>

<ul>
<li>実践の中でぼんやりと見えてくるであろう良い設計というものが、この本を読むことで学べた。かもしれない。</li>
</ul>
</li>
<li><p>リファクタリングの道すじを考えやすくなる</p>

<ul>
<li>そもそも最初からデザインパターンを適用して設計すれば、リファクタリングの必要性すら減るのかもしれない。</li>
<li>既存のコードに対してリファクタリングをする際には、デザインパターンを適用出来ないか検討してみたい。拡張・保守しやすいものにするために。</li>
<li>もちろんそれを振りかざしてはいけないと思う。</li>
</ul>
</li>
</ul>


<p>実際に開発をするときには rails などのフレームワークを使うことがほぼ 100% なわけで、そのフレームワークが自然に求める書き方をするべきだと思っている。そうしないとそのフレームワークを選ぶ意味が無いから。同じように言語自体の特性というものもあるだろう。<br/>
言語、フレームワークとデザインパターンを上手く使いこなしていきたいし、アイデアの引き出しを増やす意味でもこの本を読んだ意味があったと思う。</p>

<h1>その他</h1>

<p>サンプルが C++ なのがつらくて、Ruby で書いてあるものを探したら <a rel="nofollow" href="http://www.amazon.co.jp/gp/product/4894712857/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4894712857&linkCode=as2&tag=takadayuichi-22">Rubyによるデザインパターン</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=takadayuichi-22&l=as2&o=9&a=4894712857" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> という本が見つかったが、残念ながら絶版になっていた。<br/>
web 上の記事としては <a href="http://morizyun.github.io/blog/ruby-design-pattern-matome-mokuzi/">Ruby 2.0.0で学ぶ、14個のデザインパターンを作りました[GoF][Design Pattern] - 酒と泪とRubyとRailsと</a> がかなり参考になった。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[情熱プログラマー を読んだ]]></title>
    <link href="http://blog.takady.net/blog/2015/10/11/the-passionate-programmer/"/>
    <updated>2015-10-11T21:01:24+09:00</updated>
    <id>http://blog.takady.net/blog/2015/10/11/the-passionate-programmer</id>
    <content type="html"><![CDATA[<p>良い本だった。<br/>
さすが半谷さんオススメ本。<br/>
<br /></p>

<ul>
<li><p>4: 一番の下手くそでいよう</p></li>
<li><p>13: 師匠を探す<br/>
手本となる人物の特長10個を重要度で並べて、その10項目それぞれに対して、師匠は自分に10点中何点をつけるか考える。重要度から自分の評価点数を引いた値が高いものから順に、今すぐ始められる具体的なリストをまとめていく。</p></li>
<li><p>15: 一に練習、ニに練習</p></li>
<li><p>27: 保守作業の真価を知る<br/>
測定、改善、測定。そのうちゲームみたいに楽しくなってくるだろう。</p></li>
<li><p>38: 世界を変えよう<br/>
職場で自分が目撃した聖戦をリストにまとめる。まるで使命を帯びているように見えた人はいなかっただろうか。</p></li>
<li><p>39: 業界で名前を売ろう<br/>
ブログを始めよう。10分か20分で書けそうな話題で。</p></li>
<li><p>48: 市場に気を配る<br/>
今後1年間、アルファギークの仲間入りをすべく努力してみよう。あるいは、少なくともアルファギークの友達を一人作ろう。</p></li>
</ul>


<p>意外とキャリア戦略的な要素も入ってた。<br/>
あと、米国とインドの話と、Jave と .NET の話がちょいちょい出てきたのが印象に残った。<br/>
たまに読み返すのが良さそう。<br/>
<br /></p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=takadayuichi-22&o=9&p=8&l=as1&asins=4274067939&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>

]]></content>
  </entry>
  
</feed>
