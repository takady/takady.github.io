<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: coreos | Yuichi Takada]]></title>
  <link href="http://takady.github.io/blog/categories/coreos/atom.xml" rel="self"/>
  <link href="http://takady.github.io/"/>
  <updated>2015-04-20T18:23:49+09:00</updated>
  <id>http://takady.github.io/</id>
  <author>
    <name><![CDATA[Yuichi Takada]]></name>
    <email><![CDATA[takadyuichi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[はじめてのcoreos/rocket]]></title>
    <link href="http://takady.github.io/blog/2015/01/13/coreos-rocket/"/>
    <updated>2015-01-13T19:46:35+09:00</updated>
    <id>http://takady.github.io/blog/2015/01/13/coreos-rocket</id>
    <content type="html"><![CDATA[<p>rocketとは, CoreOS社が開発しているDockerのalternative実装で, まだprototypeという位置づけである.<br/>
<a href="https://github.com/coreos/rocket/blob/master/Documentation/getting-started-guide.md">rocket/getting-started-guide.md at master · coreos/rocket</a>を通して, rocketをCoreOS上で動かしてみた.</p>

<h1>vagrantでCoreOSのVMを用意</h1>

<p>まず, CoreOSの環境を用意する.</p>

<pre><code>$ git clone https://github.com/coreos/coreos-vagrant/
$ cd coreos-vagrant
$ vagrant up
$ vagrant ssh
Last login: Tue Jan 13 08:50:19 2015 from 10.0.2.2
CoreOS alpha (557.0.0)
core@core-01 ~ $
</code></pre>

<h1>rkt, actool, goのinstall</h1>

<h2>rkt</h2>

<pre><code>core@core-01 ~ $ wget https://github.com/coreos/rocket/releases/download/v0.1.1/rocket-v0.1.1.tar.gz
core@core-01 ~ $ tar zxf rocket-v0.1.1.tar.gz
</code></pre>

<h2>actool</h2>

<pre><code>core@core-01 ~ $ wget https://github.com/appc/spec/releases/download/v0.1.1/appc-spec-v0.1.1.tar.gz
core@core-01 ~ $ tar zxf appc-spec-v0.1.1.tar.gz
</code></pre>

<h2>go</h2>

<p><a href="http://qiita.com/hnakamur/items/8cda520807f571409f6c#4-1">OSX + Vagrant + CoreOSでKubernetesを試してみた - Qiita</a>を参考にした.<br/>
ちなみに, go1.4だと次のhello.goがうまくビルド出来くて, 断念して1.3系を入れた.(<a href="https://github.com/coreos/rocket/issues/270">参考</a>)</p>

<pre><code>core@core-01 ~ $ wget https://storage.googleapis.com/golang/go1.3.3.linux-amd64.tar.gz
core@core-01 ~ $ sudo mkdir /opt
core@core-01 ~ $ sudo tar zxf go1.3.3.linux-amd64.tar.gz -C /opt/
</code></pre>

<h2>GOPATH等の設定</h2>

<p>bash_profileはシムリンクを削除して実ファイルを用意した.</p>

<pre><code>core@core-01 ~ $ ls -l ~/.bash_profile
lrwxrwxrwx 1 core core 34 Jan  9 04:47 /home/core/.bash_profile -&gt; ../../usr/share/skel/.bash_profile
core@core-01 ~ $ rm ~/.bash_profile
core@core-01 ~ $ cat &lt;&lt;'EOF' &gt;&gt; ~/.bash_profile
&gt;
&gt; export GOROOT=/opt/go
&gt; export GOPATH=~/go
&gt; export PATH=$GOROOT/bin:$GOPATH/bin:$PATH
&gt; EOF

core@core-01 ~ $ mkdir ~/go
core@core-01 ~ $ exec $SHELL -l
core@core-01 ~ $ go version
go version go1.3.3 linux/amd64
</code></pre>

<h1>サンプルアプリケーション作成</h1>

<h2>hello.goの作成とビルド</h2>

<pre><code class="go">package main

import (
    "log"
    "net/http"
)

func main() {
    http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
        log.Printf("request from %v\n", r.RemoteAddr)
        w.Write([]byte("hello\n"))
    })
    log.Fatal(http.ListenAndServe(":5000", nil))
}
</code></pre>

<p>ビルドする.</p>

<pre><code>core@core-01 ~ $ CGO_ENABLED=0 GOOS=linux go build -a -tags netgo -ldflags '-w' hello.go
</code></pre>

<h2>manifest.jsonの作成</h2>

<pre><code class="json">{
    "acKind": "ImageManifest",
    "acVersion": "0.1.1",
    "name": "coreos.com/hello",
    "labels": [
        {
            "name": "version",
            "val": "1.0.0"
        },
        {
            "name": "arch",
            "val": "amd64"
        },
        {
            "name": "os",
            "val": "linux"
        }
    ],
    "app": {
        "user": "root",
        "group": "root",
        "exec": [
            "/bin/hello"
        ],
        "ports": [
        {
            "name": "www",
            "protocol": "tcp",
            "port": 5000
        }
        ]
    }
}
</code></pre>

<p>validationする.</p>

<pre><code>core@core-01 ~ $ ./appc-spec-v0.1.1/actool -debug validate manifest.json
manifest.json: valid ImageManifest
</code></pre>

<h1>App Container Image(ACI)のビルド</h1>

<pre><code>core@core-01 ~ $ mkdir -p hello-layout/rootfs/bin
core@core-01 ~ $ cp -i manifest.json hello-layout/manifest
core@core-01 ~ $ cp -i hello hello-layout/rootfs/bin/
core@core-01 ~ $ ./appc-spec-v0.1.1/actool build hello-layout/ hello.aci
core@core-01 ~ $ ./appc-spec-v0.1.1/actool -debug validate hello.aci
hello.aci: valid app container image
</code></pre>

<p>ちなみに, ACIはtarなので,下記で中身を確認できる.</p>

<pre><code>core@core-01 ~ $ tar tvf hello.aci
drwxr-xr-x 500/500           0 2015-01-13 10:26 rootfs
drwxr-xr-x 500/500           0 2015-01-13 10:26 rootfs/bin
-rwxr-xr-x 500/500     4383427 2015-01-13 10:26 rootfs/bin/hello
-rw-r--r-- root/root       510 2015-01-13 10:27 manifest
</code></pre>

<h1>ACIの起動</h1>

<p>ここでcontainerを起動し, helloアプリがhttpリクエストを受けられる状態になる.<br/>
ちなみに, containerを落としたい時は<code>ctrl-]</code>を3回押す.</p>

<pre><code>core@core-01 ~ $ sudo ./rocket-v0.1.1/rkt --debug run hello.aci
2015/01/13 10:27:43 Unpacking stage1 rootfs
2015/01/13 10:27:43 Writing stage1 init
2015/01/13 10:27:43 Wrote filesystem to /var/lib/rkt/containers/5c59cdfd-648a-421f-8390-74f8cea7306c
2015/01/13 10:27:43 Loading image sha256-9454dfc3433953623bbe91fe09608a4dd44a7d21dbb9da093adb2f9d44f97005
2015/01/13 10:27:43 Writing container manifest
2015/01/13 10:27:43 Pivoting to filesystem /var/lib/rkt/containers/5c59cdfd-648a-421f-8390-74f8cea7306c
2015/01/13 10:27:43 Execing stage1/init
Spawning container stage1 on /var/lib/rkt/containers/5c59cdfd-648a-421f-8390-74f8cea7306c/stage1.
Press ^] three times within 1s to kill container.
Timezone UTC does not exist in container, not updating container timezone.
systemd 215 running in system mode. (-PAM -AUDIT -SELINUX +IMA -SYSVINIT +LIBCRYPTSETUP -GCRYPT -ACL -XZ +SECCOMP -APPARMOR)
Detected virtualization 'systemd-nspawn'.
Detected architecture 'x86-64'.

Welcome to Linux!

Initializing machine ID from container UUID.
[  OK  ] Created slice -.slice.
[  OK  ] Created slice system.slice.
         Starting Graceful exit watcher...
[  OK  ] Started Graceful exit watcher.
         Starting coreos.com/hello...
[  OK  ] Started coreos.com/hello.
[  OK  ] Reached target Rocket apps target.
</code></pre>

<h2>アクセスしてみる</h2>

<pre><code>core@core-01 ~ $ curl 127.0.0.1:5000
hello
</code></pre>

<h2>アクセスログが表示される</h2>

<pre><code>2015/01/13 10:31:30 request from 127.0.0.1:36742
</code></pre>

<h1>環境</h1>

<h2>OSX</h2>

<ul>
<li>OSX 10.9.5</li>
<li>Vagrant 1.6.5</li>
</ul>


<h2>CoreOS</h2>

<ul>
<li>CoreOS alpha (557.0.0)</li>
<li>go 1.3.3</li>
</ul>


<h1>参考</h1>

<ul>
<li><a href="https://github.com/coreos/rocket/blob/master/Documentation/getting-started-guide.md">rocket/getting-started-guide.md at master · coreos/rocket</a></li>
<li><a href="https://github.com/kelseyhightower/rocket-tutorial">kelseyhightower/rocket-tutorial</a></li>
<li><a href="http://qiita.com/mopemope/items/9f163e4715a8bb5846e9">CoreOS - はじめてのRocket - Qiita</a></li>
<li><a href="http://qiita.com/mopemope/items/fa9424b094aae3eac580">CoreOS 入門 - Qiita</a></li>
<li><a href="http://qiita.com/gom/items/0bfc1925a7fddfcdfdaf">Vagrant + CoreOS + Docker でコンテナ環境体験 - Qiita</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
