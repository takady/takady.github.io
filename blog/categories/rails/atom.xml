<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Yuichi Takada]]></title>
  <link href="http://blog.takady.net/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://blog.takady.net/"/>
  <updated>2016-05-02T23:42:42+09:00</updated>
  <id>http://blog.takady.net/</id>
  <author>
    <name><![CDATA[Yuichi Takada]]></name>
    <email><![CDATA[takadyuichi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rails で /users/:id ではなく /:username な routing にする方法]]></title>
    <link href="http://blog.takady.net/blog/2015/11/29/rails-routing-with-username-instead-of-id/"/>
    <updated>2015-11-29T23:06:56+09:00</updated>
    <id>http://blog.takady.net/blog/2015/11/29/rails-routing-with-username-instead-of-id</id>
    <content type="html"><![CDATA[<p>rails で普通に scaffold すると id が URL に入って <code>example.com/users/:id</code> となる。<br/>
これを <code>twitter.com/takady7</code> とか <code>github.com/takady</code> みたいにしたい時がある。<br/>
実現には 2 通りの方法があると思われる。</p>

<h1>to_param を使う方法</h1>

<p>activerecord に <a href="http://railsdoc.com/references/to_param">to_param</a> というメソッドがあって、これを使うと URL の :id の部分に id 以外を指定できるようになる。</p>

<h2>user.rb</h2>

<pre><code class="ruby">class User &lt; ActiveRecord::Base
  validates_presence_of :username
  validates_uniqueness_of :username, case_sensitive: false

  def to_param
    username
  end
end
</code></pre>

<h2>users_controller.rb</h2>

<pre><code class="ruby">class UsersController &lt; ApplicationController
  def show
    @user = User.find_by(username: params[:id])
  end
end
</code></pre>

<h2>routes.rb</h2>

<pre><code class="ruby">Rails.application.routes.draw do
  resources :users, path: '/', only: [:show, :edit, :update, :destroy]
end
</code></pre>

<pre><code>$ rake routes
    Prefix Verb   URI Pattern                        Controller#Action
 edit_user GET    /:id/edit(.:format)                users#edit
      user GET    /:id(.:format)                     users#show
           PATCH  /:id(.:format)                     users#update
           PUT    /:id(.:format)                     users#update
           DELETE /:id(.:format)                     users#destroy
</code></pre>

<h1>routing で param を設定する方法</h1>

<p>User クラスに to_param を定義せずに、 routes.rb で設定する方法。<br/>
<code>params[:username]</code> というふうに渡ってくるので、こちらの方が素直な気がして個人的にはこちらを使いたい。</p>

<h2>users_controller.rb</h2>

<pre><code class="ruby">class UsersController &lt; ApplicationController
  def show
    @user = User.find_by(username: params[:username])
  end
end
</code></pre>

<h2>routes.rb</h2>

<pre><code class="ruby">Rails.application.routes.draw do
  resources :users, param: :username, path: '/', only: [:show, :edit, :update, :destroy]
end
</code></pre>

<pre><code>$ rake routes
    Prefix Verb   URI Pattern                        Controller#Action
 edit_user GET    /:username/edit(.:format)          users#edit
      user GET    /:username(.:format)               users#show
           PATCH  /:username(.:format)               users#update
           PUT    /:username(.:format)               users#update
           DELETE /:username(.:format)               users#destroy
</code></pre>

<h1>参考</h1>

<ul>
<li><a href="http://stackoverflow.com/questions/7735315/rails-route-to-username-instead-of-id">ruby - Rails route to username instead of id - Stack Overflow</a></li>
<li><a href="http://railsdoc.com/references/to_param">to_param - リファレンス - - Railsドキュメント</a></li>
<li><a href="http://tnakamura.hatenablog.com/entry/2014/01/31/185214">Github みたいにパスの最初のセグメントでユーザー名を使う方法 - present</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[development環境だけbefore_actionをスキップする]]></title>
    <link href="http://blog.takady.net/blog/2014/12/03/skip-before-action-on-development-env/"/>
    <updated>2014-12-03T21:02:25+09:00</updated>
    <id>http://blog.takady.net/blog/2014/12/03/skip-before-action-on-development-env</id>
    <content type="html"><![CDATA[<p>最近railsでapi開発をしていて、もちろんテストコード書いてるんだけど、<br/>
たまにブラウザからGETリクエスト送ってサクッとjsonの中を見たいって時に、認証があって見れない。。。ってパターンがかなりある。<br/>
開発環境では、認証しなくていいやと思った。<br/>
下記のようにすることで、before_actionをdevelopment環境ではスキップさせられる。</p>

<pre><code class="ruby">class ApplicationController &lt; ActionController::Base
  before_action :authenticate unless Rails.env.development?

  def authenticate
    ...
  end
</code></pre>

<h1>参考</h1>

<p><a href="http://memo.yomukaku.net/entries/127">Rails.env.development?でdevelopment環境かどうかを判定できる - memo.yomukaku.net</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[railsでmysqlのbooleanなカラムをエイリアスで扱う時の注意事]]></title>
    <link href="http://blog.takady.net/blog/2014/12/02/rails-mysql-boolean/"/>
    <updated>2014-12-02T18:07:11+09:00</updated>
    <id>http://blog.takady.net/blog/2014/12/02/rails-mysql-boolean</id>
    <content type="html"><![CDATA[<p>rails+mysqlな環境では、booleanで定義したカラムはtinyint(1)で作られ、中身はtrue/falseではなく、0/1が入る。<br/>
そして、railsアプリケーション上でmysqlのtinyint(1)型データを扱う時、値は自動的にtrue/falseとして扱われる。<br/>
そこまでは知っていたんだけど、<code>select('foobar_flg as fb_flg')</code>というふうに、カラム名をエイリアスして取り出すと値が0/1なのは知らなかった。</p>

<p>具体的には下記のとおりである。</p>

<pre><code>pry(main)&gt; p = User.select(:foobar_flg)
  User Load (10.5ms)  SELECT  `users`.`foobar_flg` FROM `users`
=&gt; [#&lt;User id: nil, foobar_flg: false&gt;]
pry(main)&gt; p.first.foobar_flg
=&gt; false

pry(main)&gt; p = User.select('foobar_flg as fb_flg')
  User Load (5.8ms)  SELECT  foobar_flg as fb_flg FROM `users`
=&gt; [#&lt;User id: nil&gt;]
pry(main)&gt; p.first.fb_flg
=&gt; 0
</code></pre>

<p>ちなみに、selectメソッドの引数に文字列を指定したから0/1が返ってくるというわけではない。<br/>
下記のようにエイリアス無しなら、文字列で指定してもtrue/falseに解釈される。</p>

<pre><code>pry(main)&gt; p = User.select('foobar_flg')
  User Load (10.0ms)  SELECT  `users`.`foobar_flg` FROM `users`
=&gt; [#&lt;User id: nil, foobar_flg: false&gt;]
pry(main)&gt; p.first.foobar_flg
=&gt; false
</code></pre>

<p>このままだと結構困る。<br/>
結論としては、<strong>as使わない</strong>で済むならそれが最善手だと思う。<br/>
が、それが無理なら、例えば下記のようにModelのattributeメソッドをoverrideしちゃうのが良さそう。</p>

<pre><code class="ruby">def fb_flg
  read_attribute(:fb_flg) == 1
end
</code></pre>

<h1>参考</h1>

<p><a href="http://stackoverflow.com/questions/373731/override-activerecord-attribute-methods">ruby on rails - Override ActiveRecord attribute methods - Stack Overflow</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[railsで、複数の出力先にlogを出力する]]></title>
    <link href="http://blog.takady.net/blog/2014/11/21/rails-logger-broadcast/"/>
    <updated>2014-11-21T18:57:07+09:00</updated>
    <id>http://blog.takady.net/blog/2014/11/21/rails-logger-broadcast</id>
    <content type="html"><![CDATA[<p>railsアプリケーションで、error以上のレベルのログだけ、２箇所にログを出力したいと思った。</p>

<h1>前提</h1>

<p>ruby 2.1.2<br/>
rails 4.1.4</p>

<h1>方法</h1>

<p>まず、複数の出力先にロギングするには、<a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/logger.rb#L10-L42">ActiveSupport::Logger.#broadcast</a>というメソッドが使える。<br/>
config/application.rbのMyapp::Applicationクラス内に下記のように書いてみた。</p>

<pre><code class="ruby">logger = ActiveSupport::Logger.new(config.paths["log"].first)
error_logger = ActiveSupport::Logger.new("log/error.log")
error_logger.level = Logger::ERROR
logger.extend ActiveSupport::Logger.broadcast(error_logger)
config.logger = logger
</code></pre>

<p>これで、複数箇所にログが出力されるようにはなった。<br/>
しかし、今回やりたかったのは、<strong>ERROR以上の時だけ</strong>２箇所にロギングしたいというもので、上記のようにconfig/application.rbでextendした場合、error_loggerのlevelをERRORにセットしていても、Rails.loggerのlevelと同じlevelでのloggingになってしまう。<br/>
全く同じエラーログを複数箇所に吐かせたいというだけであれば、上記の方法で良いと思う。(その際、上記の<code>error_logger.level = Logger::ERROR</code>は意味が無いので消した方が良い)</p>

<p>error_logger.levelの指定が効くようにするには、<code>run Rails.application</code>よりも後で、error_loggerをRails.loggerにextendすると良い。<br/>
config.ruに下記を追記する。</p>

<pre><code class="ruby">run Rails.application

error_logger = ActiveSupport::Logger.new("log/error.log")
error_logger.level = Logger::ERROR
Rails.logger.extend ActiveSupport::Logger.broadcast(error_logger)
</code></pre>

<p>これで、log/error.logへは、ERRORレベル以上のログだけが出力されるようになった。<br/>
もちろん、log/development.logには、これまでどおりDEBUGレベルまで含めた全てのlogが出ている。</p>

<h1>参考</h1>

<p><a href="http://blog.livedoor.jp/sonots/archives/38927788.html">[Ruby] 例えば、Rails の標準ログを止める - sonots:blog</a><br/>
<a href="http://railsdoc.eiel.info/active_support/logger/">RailsDoc - ActiveSupport::Logger</a><br/>
<a href="http://mitsu877.hatenablog.com/entry/2014/11/15/193547">【Rails】バッチの実行ログを専用のログファイルと標準出力の両方に出す - おどるダメ人間</a></p>
]]></content>
  </entry>
  
</feed>
