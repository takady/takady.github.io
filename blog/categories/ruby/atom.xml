<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Yuichi Takada]]></title>
  <link href="http://takady.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://takady.github.io/"/>
  <updated>2015-08-27T00:00:36+09:00</updated>
  <id>http://takady.github.io/</id>
  <author>
    <name><![CDATA[Yuichi Takada]]></name>
    <email><![CDATA[takadyuichi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[bundle openでtmuxのpaneを開く]]></title>
    <link href="http://takady.github.io/blog/2015/04/24/bundle-open-tmux/"/>
    <updated>2015-04-24T13:11:11+09:00</updated>
    <id>http://takady.github.io/blog/2015/04/24/bundle-open-tmux</id>
    <content type="html"><![CDATA[<p><code>bundle open</code>でgemのソースをエディタで開いたり，<code>bundle show</code>でgemのパスを見たりすることができるので，gemの挙動を知りたくてコードを見たい時にこれらのコマンドをよく使ってる．<br/>
便利なんだけど，gemのディレクトリがtmuxのペインで開いてくれるともっと使いやすいと思って，やってみた．</p>

<pre><code class="sh">export BUNDLER_EDITOR="tmux split-window -c"
</code></pre>

<p>上記を<code>~/.zshrc</code>あたりに定義して，コマンドラインで<code>bundle open</code>を実行すれば，tmuxのpaneが開いてそのgemのディレクトリを見ることができる．</p>

<pre><code>$ bundle open activerecord
</code></pre>

<h1>bundle openを上書きしたくない場合</h1>

<p><code>bundle open</code>の挙動はそのまま残したいという場合には，<code>BUNDLER_EDITOR</code>で設定するのではなく，下記のような関数を別途定義して使うと良い．</p>

<pre><code class="sh">function bundle_open_tmux() {
    if [ -n "$1" ]; then
        local dir=$(bundle show "$1")
        tmux split-window -c "$dir"
    fi
}
</code></pre>

<p>下記のように実行すると，同じように動作する．</p>

<pre><code>$ bundle_open_tmux activerecord
</code></pre>

<h1>参考</h1>

<ul>
<li><a href="http://rebuild.fm/41/">Rebuild: 41: Kids These Days Don&rsquo;t Know Shell (Naoya Ito)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rubygems.orgに公開しているgemの名前を変更する]]></title>
    <link href="http://takady.github.io/blog/2015/03/27/how-to-rename-gem/"/>
    <updated>2015-03-27T00:56:07+09:00</updated>
    <id>http://takady.github.io/blog/2015/03/27/how-to-rename-gem</id>
    <content type="html"><![CDATA[<p>必要になったので調べてみた．<br/>
結論からいうと，renameはできない．ちなみにgithubのrepositoryはrenameできる．<br/>
調べた結果，自分は下記の方法をとった．</p>

<ol>
<li>新しい名前のgemのコードを用意する．既存repositoryをrenameする場合は，.gemspecなど漏れなく修正する．</li>
<li>新しい名前のgemを<code>rake release</code>する．</li>
<li><code>gem yank</code>で古い名前のgemをindexから外す．</li>
</ol>


<p><code>gem yank</code>してもrubygems.org上のページは残るのでその点注意．</p>

<h1>参考</h1>

<ul>
<li><p><a href="http://help.rubygems.org/kb/gemcutter/removing-a-published-rubygem">Removing a published RubyGem / Gemcutter / Knowledge Base - RubyGems.org Support</a></p></li>
<li><p><a href="http://blog.s21g.com/articles/1755">公開した gem を削除する方法 - ヽ( ・∀・)ノくまくまー - s21g</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apache_log-parserを修正してBenchmarkをとってみた]]></title>
    <link href="http://takady.github.io/blog/2015/02/11/apache-log-parser-benchmark/"/>
    <updated>2015-02-11T16:53:46+09:00</updated>
    <id>http://takady.github.io/blog/2015/02/11/apache-log-parser-benchmark</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/takady/apache_log-parser">takady/apache_log-parser</a></p>

<p>先週，とある機会に，とあるエンジニアの方が，僕が作った<a href="https://github.com/takady/apache_log-parser">apache_log-parser</a>というrubyのgemに対してアドバイスをしてくれた．<br/>
「parseメソッド呼ぶ度に毎回Patternクラスのインスタンスとか作ったりしてるけど，Parserをクラスにして，最初にインスタンス作る時に1回だけやるようにした方が効率良いよ」みたいな指摘だった．確かにその通りだった．指摘ありがとうございます！<br/>
ついでに，修正する前と後でパフォーマンスどれだけ良くなったのかを，rubyの標準ライブラリのBenchmarkを使って計測してみた．</p>

<p>benchmark.rb自体はこんな感じで，100万行parseするのにかかる時間を計測している．</p>

<pre><code class="ruby">$LOAD_PATH.unshift File.expand_path('../lib', __FILE__)
require 'apache_log/parser'
require 'benchmark'

common_line = '127.0.0.1 - - [20/May/2014:20:04:04 +0900] "GET /test/indx.html HTTP/1.1" 200 4576'
combined_line = '192.168.0.1 - - [07/Jun/2014:14:58:55 +0900] "GET /category/electronics HTTP/1.1" 200 128 "-" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:9.0.1) Gecko/20100101 Firefox/9.0.1"'
customized_line = '192.168.0.1 - - [07/Feb/2011:10:59:59 +0900] "GET /x/i.cgi/net/0000/ HTTP/1.1" 200 9891 "-" "DoCoMo/2.0 P03B(c500;TB;W24H16)" virtualhost.example.jp "192.0.2.16794832933550" "09011112222333_xx.ezweb.ne.jp" 533593'

common_parser = ApacheLog::Parser.new('common')
combined_parser = ApacheLog::Parser.new('combined')
customized_parser = ApacheLog::Parser.new('combined', %w(vhost usertrack mobileid request_duration))

n = 1_000_000
Benchmark.bm(12) do |x|
  x.report('common:')     { (1..n).each{common_parser.parse(common_line)} }
  x.report('combined:')   { (1..n).each{combined_parser.parse(combined_line)} }
  x.report('customized:') { (1..n).each{customized_parser.parse(customized_line)} }
end
</code></pre>

<h2>Before</h2>

<p>まず，修正前のコードでのベンチマーク．</p>

<pre><code>$ ruby benchmark.rb
                   user     system      total        real
common:      125.630000   0.180000 125.810000 (125.889122)
combined:    151.530000   0.440000 151.970000 (152.090644)
customized:  186.610000   0.460000 187.070000 (187.200379)
</code></pre>

<h2>After</h2>

<p>次に，修正後のコードでのベンチマーク．</p>

<pre><code>$ ruby benchmark.rb
                   user     system      total        real
common:       20.770000   0.020000  20.790000 ( 20.797196)
combined:     30.090000   0.050000  30.140000 ( 30.161369)
customized:   40.240000   0.070000  40.310000 ( 40.388290)
</code></pre>

<p>めちゃくちゃ改善された！！</p>

<h1>参考</h1>

<p><a href="http://a-newcomer.com/29">RubyでのBenchmarkの取り方をば。</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[embulk-plugin-sqlite3を作った]]></title>
    <link href="http://takady.github.io/blog/2015/02/08/embulk-plugin-sqlite3/"/>
    <updated>2015-02-08T22:17:00+09:00</updated>
    <id>http://takady.github.io/blog/2015/02/08/embulk-plugin-sqlite3</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/takady/embulk-plugin-sqlite3">takady/embulk-plugin-sqlite3</a></p>

<h1>embulkとは</h1>

<p>いわゆるbulk loaderと言われる並列にデータを移動させるためのプロダクトの一つ．embulkがユニークなのはinput/outputなどの部分がpluggableになっている点．<br/>
つまり，データの移動に際して発生するリソースへの接続処理の実装や，データのクレンジング・フォーマット変換，その他必要になる雑多な処理をプラグインという形で定義しておくことで，再利用しやすくなるというわけ．</p>

<h2>Fluentdとの違い</h2>

<p>同じくTreasure Data社が開発しているFluentdも，input/outputのpluginをrubyで書けるなど，一見同じ感じである．<br/>
ただ，Fluentdのユースケースは<strong>リアルタイム</strong>にlogを流すという部分であり，一方でembulkは<strong>バッチ処理</strong>でデータをimport/exportする用途にフォーカスしているというところに違いがある．</p>

<h1>導入</h1>

<p><a href="https://github.com/embulk/embulk">embulkのREADME.md</a>にはjarをdownloadしてきて使う方法だけが書かれているが，普通にrubygems.orgにリリースされているので<code>gem install</code>で入れられる．</p>

<pre><code>$ gem install embulk
</code></pre>

<p>そして，<code>embulk gem install</code>でpluginをinstallする．</p>

<pre><code>$ embulk gem install embulk-plugin-sqlite3
Fetching: jdbc-sqlite3-3.8.7.gem (100%)
Successfully installed jdbc-sqlite3-3.8.7
Fetching: embulk-plugin-sqlite3-0.0.1.gem (100%)
Successfully installed embulk-plugin-sqlite3-0.0.1
2 gems installed
</code></pre>

<h1>実行</h1>

<p>今回はexampleのcsvファイルを，sqlite3のテーブルにloadしてみる.</p>

<p>下記で，exampleのcsvファイルを生成する．</p>

<pre><code>$ embulk example /tmp
$ embulk guess /tmp/example.yml -o /tmp/config.yml
</code></pre>

<p><code>/tmp/config.yml</code>のoutputの設定を下記のように修正する．</p>

<pre><code class="yaml">out:
  type: sqlite3
  database: '/tmp/test.db'
  table: 'load01'
</code></pre>

<p><code>embulk run</code>する．</p>

<pre><code>$ embulk run /tmp/config.yml
2015-02-08 22:29:38,623 [INFO]: main:org.embulk.standards.LocalFileInputPlugin: Listing local files with prefix '/tmp/csv'
2015-02-08 22:29:38,885 [INFO]: main:org.embulk.exec.LocalExecutor: Running 1 tasks using 8 local threads
2015-02-08 22:29:38,885 [INFO]: main:org.embulk.exec.LocalExecutor: {done:  0 / 1, running: 0}
2015-02-08 22:29:39,035 [INFO]: main:org.embulk.exec.LocalExecutor: {done:  1 / 1, running: 0}
Output finished. Commit reports = [{"records":4}]
2015-02-08 22:29:39,041 [INFO]: main:org.embulk.command.Runner: next config: {"in":{},"out":{}}
</code></pre>

<p>テーブルの中身を確認すると，insertできていることがわかる．</p>

<pre><code>$ sqlite3 /tmp/test.db
SQLite version 3.7.13 2012-07-17 17:46:21
Enter ".help" for instructions
Enter SQL statements terminated with a ";"
sqlite&gt; .schema load01
CREATE TABLE load01(`id` integer,`account` integer,`time` text,`purchase` text,`comment` text);
sqlite&gt; select * from load01;
1|32864|2015-01-27 19:23:49 UTC|2015-01-27 00:00:00 UTC|embulk
2|14824|2015-01-27 19:01:23 UTC|2015-01-27 00:00:00 UTC|embulk jruby
3|27559|2015-01-28 02:20:02 UTC|2015-01-28 00:00:00 UTC|embulk core
4|11270|2015-01-29 11:54:36 UTC|2015-01-29 00:00:00 UTC|Embulk "csv" parser plugin
sqlite&gt;
</code></pre>

<h1>まとめ</h1>

<p>embulk自体がjrubyで書かれており，pluginでC拡張のgemは使えないみたい．<br/>
なので，DB接続する場合はjdbc-sqlite3などのgemを使うことになる．(間違ってたら指摘お願いします)<br/>
あと，pluginの作り方のベスト・プラクティスがまだわからない．</p>

<h1>参考</h1>

<ul>
<li><a href="https://github.com/embulk/embulk">embulk/embulk</a></li>
<li><a href="http://dev.classmethod.jp/tool/embulk-ataglance/">Treasure Dataの新データ転送ツールEmbulkを触ってみた #dtm_meetup ｜ Developers.IO</a></li>
<li><a href="http://www.slideshare.net/frsyuki/embuk-making-data-integration-works-relaxed">Embulk, an open-source plugin-based parallel bulk data loader</a></li>
<li><a href="https://github.com/frsyuki/embulk-plugin-postgres-json">frsyuki/embulk-plugin-postgres-json</a></li>
<li><a href="https://github.com/takebayashi/embulk-plugin-input-hbase">takebayashi/embulk-plugin-input-hbase</a></li>
<li><a href="https://github.com/jruby/activerecord-jdbc-adapter">jruby/activerecord-jdbc-adapter</a></li>
<li><a href="https://bitbucket.org/xerial/sqlite-jdbc/overview">xerial / sqlite-jdbc — Bitbucket</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[facebook graph apiのAccess Tokenを取得するまで]]></title>
    <link href="http://takady.github.io/blog/2014/12/29/facebook-graph-api-oauth-flow/"/>
    <updated>2014-12-29T17:45:20+09:00</updated>
    <id>http://takady.github.io/blog/2014/12/29/facebook-graph-api-oauth-flow</id>
    <content type="html"><![CDATA[<p>OAuth2について、わかってたつもりでわかってないので、<br/>
<a href="https://github.com/nov/fb_graph">nov/fb_graph</a>を通して、facebook graph apiでAccess Tokenを発行するところまでを追ってみた</p>

<h1>TL;DR</h1>

<p>この面倒なtoken生成作業は、<a href="https://developers.facebook.com/">https://developers.facebook.com/</a>のTools > Graph API Explorerで、<br/>
Get Access Tokenとボタンを押すと生成できるので、すぐtokenを生成したいのなら、下記を読まずにそこから生成するのが楽で良い</p>

<h1>1.まずfacebookにappを登録</h1>

<p><a href="https://developers.facebook.com/">https://developers.facebook.com/</a>のApps > Add a New Appで作成できる<br/>
この時、リダイレクト先URLも下記から設定しておくこと<br/>
Settings > Advanced > Security > Valid OAuth redirect URIs</p>

<h1>2.App IDとApp Secretを確認</h1>

<p>先ほど作成したAppのDashboardに行って確認できる</p>

<h1>3.client_idとredirect_url付きのGETリクエストを送信</h1>

<p>下記のようにリクエストする</p>

<pre><code>GET https://graph.facebook.com/oauth/authorize?client_id=&lt;Your App ID&gt;&amp;redirect_uri=&lt;Your Redirect URL&gt;
</code></pre>

<h1>4.リダイレクトされたurlのAuthorization Codeパラメータの値を確認</h1>

<p>下記のような感じである</p>

<pre><code>http://example.com?code=&lt;Your Authorization Code&gt;
</code></pre>

<h1>5.POSTリクエストを送信してAccess Tokenを取得</h1>

<p>取得したAuthorization Codeを含め、パラメータとして下記をセットしてPOSTでリクエストする</p>

<pre><code>POST https://graph.facebook.com/oauth/access_token

 grant_type: authorization_code
 code: &lt;Your Authorization Code&gt;
 redirect_uri: &lt;Your Redirect URL&gt;
 client_id: &lt;Your App ID&gt;
 client_secret: &lt;Your App Secret&gt;
</code></pre>

<p>レスポンスのbodyは下記のようになっている</p>

<pre><code>access_token=&lt;Your Access Token&gt;  
</code></pre>

<p>この生成されたaccess_tokenを使って、facebook graph apiを利用する事ができる</p>

<h1>6.Access Tokenの有効期限を伸ばす</h1>

<p>facebook graph apiの場合、このままだとAccess Tokenの有効期限が短すぎる<br/>
下記のGETリクエストを送ることで、有効期限を60日間に伸ばす事ができる</p>

<pre><code>GET https://graph.facebook.com/oauth/access_token?grant_type=fb_exchange_token&amp;client_id=&lt;Your App ID&gt;&amp;client_secret=&lt;Your App Secret&gt;&amp;fb_exchange_token=&lt;Your Access Token&gt;  
</code></pre>

<h1>まとめ</h1>

<p>OAuth2、Access Token取得後はそれだけでAPIとやりとりできるからシンプルで良いけど、Access Tokenを取得するまでがめんどくさい<br/>
ブラウザ無しでtoken発行やりたかった(<a href="https://github.com/nov/fb_graph/wiki/Authentication#javascript-sdk">Javascript SDK</a>使ったらできるのか?)<br/>
Facebookでは上記フローだが、twitterとかgithubとか他のサービスもまったく同じなわけじゃないので、他も触ってみたい</p>

<h1>参考</h1>

<p><a href="http://stackoverflow.com/questions/21978728/obtaining-a-facebook-auth-token-for-a-command-line-desktop-application">ruby - Obtaining a Facebook auth token for a command-line (desktop) application - Stack Overflow</a><br/>
<a href="http://rebuild.fm/43/">Rebuild: 43: Kent is More Professional (Kenn Ejima)</a><br/>
<a href="https://github.com/nov/fb_graph/wiki">Home · nov/fb_graph Wiki</a><br/>
<a href="http://morizyun.github.io/blog/facebook-event-api-ruby-fb_graph/">公開中のFacebook EventをGraph APIから取得する - 酒と泪とRubyとRailsと</a></p>
]]></content>
  </entry>
  
</feed>
