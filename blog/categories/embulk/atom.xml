<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: embulk | Yuichi Takada]]></title>
  <link href="http://takady.github.io/blog/categories/embulk/atom.xml" rel="self"/>
  <link href="http://takady.github.io/"/>
  <updated>2015-07-05T22:30:34+09:00</updated>
  <id>http://takady.github.io/</id>
  <author>
    <name><![CDATA[Yuichi Takada]]></name>
    <email><![CDATA[takadyuichi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[embulk-plugin-sqlite3を作った]]></title>
    <link href="http://takady.github.io/blog/2015/02/08/embulk-plugin-sqlite3/"/>
    <updated>2015-02-08T22:17:00+09:00</updated>
    <id>http://takady.github.io/blog/2015/02/08/embulk-plugin-sqlite3</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/takady/embulk-plugin-sqlite3">takady/embulk-plugin-sqlite3</a></p>

<h1>embulkとは</h1>

<p>いわゆるbulk loaderと言われる並列にデータを移動させるためのプロダクトの一つ．embulkがユニークなのはinput/outputなどの部分がpluggableになっている点．<br/>
つまり，データの移動に際して発生するリソースへの接続処理の実装や，データのクレンジング・フォーマット変換，その他必要になる雑多な処理をプラグインという形で定義しておくことで，再利用しやすくなるというわけ．</p>

<h2>Fluentdとの違い</h2>

<p>同じくTreasure Data社が開発しているFluentdも，input/outputのpluginをrubyで書けるなど，一見同じ感じである．<br/>
ただ，Fluentdのユースケースは<strong>リアルタイム</strong>にlogを流すという部分であり，一方でembulkは<strong>バッチ処理</strong>でデータをimport/exportする用途にフォーカスしているというところに違いがある．</p>

<h1>導入</h1>

<p><a href="https://github.com/embulk/embulk">embulkのREADME.md</a>にはjarをdownloadしてきて使う方法だけが書かれているが，普通にrubygems.orgにリリースされているので<code>gem install</code>で入れられる．</p>

<pre><code>$ gem install embulk
</code></pre>

<p>そして，<code>embulk gem install</code>でpluginをinstallする．</p>

<pre><code>$ embulk gem install embulk-plugin-sqlite3
Fetching: jdbc-sqlite3-3.8.7.gem (100%)
Successfully installed jdbc-sqlite3-3.8.7
Fetching: embulk-plugin-sqlite3-0.0.1.gem (100%)
Successfully installed embulk-plugin-sqlite3-0.0.1
2 gems installed
</code></pre>

<h1>実行</h1>

<p>今回はexampleのcsvファイルを，sqlite3のテーブルにloadしてみる.</p>

<p>下記で，exampleのcsvファイルを生成する．</p>

<pre><code>$ embulk example /tmp
$ embulk guess /tmp/example.yml -o /tmp/config.yml
</code></pre>

<p><code>/tmp/config.yml</code>のoutputの設定を下記のように修正する．</p>

<pre><code class="yaml">out:
  type: sqlite3
  database: '/tmp/test.db'
  table: 'load01'
</code></pre>

<p><code>embulk run</code>する．</p>

<pre><code>$ embulk run /tmp/config.yml
2015-02-08 22:29:38,623 [INFO]: main:org.embulk.standards.LocalFileInputPlugin: Listing local files with prefix '/tmp/csv'
2015-02-08 22:29:38,885 [INFO]: main:org.embulk.exec.LocalExecutor: Running 1 tasks using 8 local threads
2015-02-08 22:29:38,885 [INFO]: main:org.embulk.exec.LocalExecutor: {done:  0 / 1, running: 0}
2015-02-08 22:29:39,035 [INFO]: main:org.embulk.exec.LocalExecutor: {done:  1 / 1, running: 0}
Output finished. Commit reports = [{"records":4}]
2015-02-08 22:29:39,041 [INFO]: main:org.embulk.command.Runner: next config: {"in":{},"out":{}}
</code></pre>

<p>テーブルの中身を確認すると，insertできていることがわかる．</p>

<pre><code>$ sqlite3 /tmp/test.db
SQLite version 3.7.13 2012-07-17 17:46:21
Enter ".help" for instructions
Enter SQL statements terminated with a ";"
sqlite&gt; .schema load01
CREATE TABLE load01(`id` integer,`account` integer,`time` text,`purchase` text,`comment` text);
sqlite&gt; select * from load01;
1|32864|2015-01-27 19:23:49 UTC|2015-01-27 00:00:00 UTC|embulk
2|14824|2015-01-27 19:01:23 UTC|2015-01-27 00:00:00 UTC|embulk jruby
3|27559|2015-01-28 02:20:02 UTC|2015-01-28 00:00:00 UTC|embulk core
4|11270|2015-01-29 11:54:36 UTC|2015-01-29 00:00:00 UTC|Embulk "csv" parser plugin
sqlite&gt;
</code></pre>

<h1>まとめ</h1>

<p>embulk自体がjrubyで書かれており，pluginでC拡張のgemは使えないみたい．<br/>
なので，DB接続する場合はjdbc-sqlite3などのgemを使うことになる．(間違ってたら指摘お願いします)<br/>
あと，pluginの作り方のベスト・プラクティスがまだわからない．</p>

<h1>参考</h1>

<ul>
<li><a href="https://github.com/embulk/embulk">embulk/embulk</a></li>
<li><a href="http://dev.classmethod.jp/tool/embulk-ataglance/">Treasure Dataの新データ転送ツールEmbulkを触ってみた #dtm_meetup ｜ Developers.IO</a></li>
<li><a href="http://www.slideshare.net/frsyuki/embuk-making-data-integration-works-relaxed">Embulk, an open-source plugin-based parallel bulk data loader</a></li>
<li><a href="https://github.com/frsyuki/embulk-plugin-postgres-json">frsyuki/embulk-plugin-postgres-json</a></li>
<li><a href="https://github.com/takebayashi/embulk-plugin-input-hbase">takebayashi/embulk-plugin-input-hbase</a></li>
<li><a href="https://github.com/jruby/activerecord-jdbc-adapter">jruby/activerecord-jdbc-adapter</a></li>
<li><a href="https://bitbucket.org/xerial/sqlite-jdbc/overview">xerial / sqlite-jdbc — Bitbucket</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
