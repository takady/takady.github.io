<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Yuichi Takada</title>
    <link>https://blog.takady.net/post/</link>
    <description>Recent content in Posts on Yuichi Takada</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; Copyright Yuichi Takada</copyright>
    <lastBuildDate>Thu, 13 May 2021 00:00:00 +0900</lastBuildDate><atom:link href="https://blog.takady.net/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>git commit に署名を付ける</title>
      <link>https://blog.takady.net/blog/2021/05/13/signing-commits/</link>
      <pubDate>Thu, 13 May 2021 00:00:00 +0900</pubDate>
      
      <guid>https://blog.takady.net/blog/2021/05/13/signing-commits/</guid>
      <description>背景 先日とある repository に contribute した時に、署名付き commit が必要になったので、設定した記録。 署名付き commit とは これのこと。 GPG キーの作成から設定まで こちらに記載の手</description>
    </item>
    
    <item>
      <title>https 対応した</title>
      <link>https://blog.takady.net/blog/2019/01/14/2019-01-14-https-for-github-pages-site/</link>
      <pubDate>Mon, 14 Jan 2019 10:39:16 +0900</pubDate>
      
      <guid>https://blog.takady.net/blog/2019/01/14/2019-01-14-https-for-github-pages-site/</guid>
      <description>このブログは Hugo を使っていて、Github pages にホストしているんだけど、https 対応を今更やった。 hugo 側の設定 config.toml diff --git a/config.toml b/config.toml index 9aa98a1..4949f9d 100644 --- a/config.toml +++ b/config.toml @@ -1,4 +1,4 @@ -baseurl</description>
    </item>
    
    <item>
      <title>Reactビギナーズガイド を読んだ</title>
      <link>https://blog.takady.net/blog/2017/07/01/react_up_and_running/</link>
      <pubDate>Sat, 01 Jul 2017 17:28:33 +0900</pubDate>
      
      <guid>https://blog.takady.net/blog/2017/07/01/react_up_and_running/</guid>
      <description>Reactビギナーズガイド ―コンポーネントベースのフロントエンド開発入門 React はプライベートで書いているけども、一度ちゃんと基礎を抑えておきたい</description>
    </item>
    
    <item>
      <title>Ruby の文字列マッチ判定のパフォーマンス</title>
      <link>https://blog.takady.net/blog/2017/03/19/measure-performance-of-match-methods/</link>
      <pubDate>Sun, 19 Mar 2017 17:36:07 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2017/03/19/measure-performance-of-match-methods/</guid>
      <description>下記のようなよくある文字列のマッチ判定を Ruby でやる場合に、String クラスのメソッドを使った場合と正規表現を使った場合それぞれのベンチマーク</description>
    </item>
    
    <item>
      <title>Travis CI で mini_racer と mysql を使うビルドが失敗する</title>
      <link>https://blog.takady.net/blog/2017/02/21/install-mini-racer-on-travis-ci/</link>
      <pubDate>Tue, 21 Feb 2017 23:07:09 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2017/02/21/install-mini-racer-on-travis-ci/</guid>
      <description>rails プロジェクトの CI に Travis CI を利用しているが、ある日 mini_racer を Gemfile に追加してビルドを試みたところ、bundle install で Gem::Ext::BuildError: ERROR: Failed to build gem native extension. なエラーが出てしまった</description>
    </item>
    
    <item>
      <title>rails のログを fluentd で slack に通知する</title>
      <link>https://blog.takady.net/blog/2017/02/19/fluentd-send-error-to-slack/</link>
      <pubDate>Sun, 19 Feb 2017 18:58:24 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2017/02/19/fluentd-send-error-to-slack/</guid>
      <description>Ubuntu に td-agent 入れて Slack に rails アプリのエラーを通知するようにしたときの備忘録。 td-agent インストール td-agent のインストールは下記に書いてある通り。 Installing Fluentd Using deb Package | Fluentd Ubuntu 16.04 な</description>
    </item>
    
    <item>
      <title>Let&#39;s Encrypt と Nginx で HTTPS 対応</title>
      <link>https://blog.takady.net/blog/2017/02/11/lets-encrypt-with-nginx/</link>
      <pubDate>Sat, 11 Feb 2017 15:53:29 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2017/02/11/lets-encrypt-with-nginx/</guid>
      <description>個人的に作ってるサイトを HTTPS 対応させてみた。 Let&amp;rsquo;s Encrypt https://letsencrypt.jp/ 無料で証明書を用意できるので今回利用した。 curl で実行ファイルを取ってきて、適切にオプションを付</description>
    </item>
    
    <item>
      <title>rails の validation error message の i18n 対応</title>
      <link>https://blog.takady.net/blog/2016/12/09/rails-validation-error-message-i18n/</link>
      <pubDate>Fri, 09 Dec 2016 21:20:43 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2016/12/09/rails-validation-error-message-i18n/</guid>
      <description>rails で Custom validatior や Custom validation method を定義して、その中で errors.add する際に、 message として使われる I18n のパスをどう書くのが良いのかっていうのが気になった。 結論としては、下記のよ</description>
    </item>
    
    <item>
      <title>rails で FormObject を使う</title>
      <link>https://blog.takady.net/blog/2016/08/29/rails-form-object/</link>
      <pubDate>Mon, 29 Aug 2016 19:38:49 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2016/08/29/rails-form-object/</guid>
      <description>フォームでは日付の期間を入力し、それを日単位のレコードに保存するようなケースでは、FormObject を使えるかも。やってみた。 こういうフォ</description>
    </item>
    
    <item>
      <title>nexus5 の画面が割れたので自分で交換した</title>
      <link>https://blog.takady.net/blog/2016/05/15/nexus5-screen-replacement/</link>
      <pubDate>Sun, 15 May 2016 21:56:33 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2016/05/15/nexus5-screen-replacement/</guid>
      <description>3日前に nexus5 を落としてしまって画面が思いっきり割れてしまった。 そんな中、自力で直してたという記事を発見。 Nexus 5 ガラス割れを自力で交換修理する件 用</description>
    </item>
    
    <item>
      <title>Raspberry Pi と温度センサーで自宅の温度を可視化</title>
      <link>https://blog.takady.net/blog/2015/12/18/raspberry-pi-with-adt7410/</link>
      <pubDate>Fri, 18 Dec 2015 00:46:37 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2015/12/18/raspberry-pi-with-adt7410/</guid>
      <description>Raspberry Pi と ADT7410 温度センサーで自宅の温度を測り、 focusligt でグラフにした。 用意したもの Raspberry Pi Model B ADT7410使用 高精度・高分解能 I2C・16Bit 温度センサ</description>
    </item>
    
    <item>
      <title>rails で /users/:id ではなく /:username な routing にする方法</title>
      <link>https://blog.takady.net/blog/2015/11/29/rails-routing-with-username-instead-of-id/</link>
      <pubDate>Sun, 29 Nov 2015 23:06:56 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2015/11/29/rails-routing-with-username-instead-of-id/</guid>
      <description>rails で普通に scaffold すると id が URL に入って example.com/users/:id となる。 これを twitter.com/myname とか github.com/yourname みたいにしたい時がある。 実現には 2 通りの方法があると思われる。 to_param を使う方法 activerecord に to_param とい</description>
    </item>
    
    <item>
      <title>WEB&#43;DB PRESS plus の DB 本 3冊を読んで index を学んだ</title>
      <link>https://blog.takady.net/blog/2015/09/24/read-books-about-database/</link>
      <pubDate>Thu, 24 Sep 2015 18:43:39 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2015/09/24/read-books-about-database/</guid>
      <description>シルバーウィークに、この3冊を読んだ。 Webエンジニアのための データベース技術[実践]入門 (Software Design plus) RDBMS としては mysql を題材にしている。 インデックスか</description>
    </item>
    
    <item>
      <title>個人情報保護士認定試験を受験した</title>
      <link>https://blog.takady.net/blog/2015/09/14/kojin-joho-hogo-shi/</link>
      <pubDate>Mon, 14 Sep 2015 22:59:40 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2015/09/14/kojin-joho-hogo-shi/</guid>
      <description>個人情報保護士認定試験 会社で必要になったので、9/13(日)に受験した。 下記の流れで2週間ほど勉強した。 公式テキストを読む 公式精選過去問題集</description>
    </item>
    
    <item>
      <title>bundle openでtmuxのpaneを開く</title>
      <link>https://blog.takady.net/blog/2015/04/24/bundle-open-tmux/</link>
      <pubDate>Fri, 24 Apr 2015 13:11:11 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2015/04/24/bundle-open-tmux/</guid>
      <description>bundle openでgemのソースをエディタで開いたり，bundle showでgemのパスを見たりすることができるので，gemの挙動を知りたくてコー</description>
    </item>
    
    <item>
      <title>標準出力のjson文字列を手軽にpretty printする</title>
      <link>https://blog.takady.net/blog/2015/03/27/json-pp/</link>
      <pubDate>Fri, 27 Mar 2015 00:41:40 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2015/03/27/json-pp/</guid>
      <description>jq使えばいいんですが，入ってない時とかに． $ echo &#39;{ &amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;, &amp;quot;test&amp;quot;: 10 }&#39; | python -mjson.tool { &amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;, &amp;quot;test&amp;quot;: 10 }</description>
    </item>
    
    <item>
      <title>embulk-plugin-sqlite3を作った</title>
      <link>https://blog.takady.net/blog/2015/02/08/embulk-plugin-sqlite3/</link>
      <pubDate>Sun, 08 Feb 2015 22:17:00 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2015/02/08/embulk-plugin-sqlite3/</guid>
      <description>takady/embulk-plugin-sqlite3 embulkとは いわゆるbulk loaderと言われる並列にデータを移動させるためのプロダクトの一つ．embulkがユニークなのはinpu</description>
    </item>
    
    <item>
      <title>rubyのloggerをnewした後にログファイルを削除するとどうなるのか</title>
      <link>https://blog.takady.net/blog/2014/12/07/file-safe-logger/</link>
      <pubDate>Sun, 07 Dec 2014 18:01:52 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2014/12/07/file-safe-logger/</guid>
      <description>この投稿はRuby Advent Calendar 2014の7日目の記事です。 rubyには標準添付ライブラリにloggerクラスがある。 そのloggerクラス、newし</description>
    </item>
    
    <item>
      <title>development環境だけbefore_actionをスキップする</title>
      <link>https://blog.takady.net/blog/2014/12/03/skip-before-action-on-development-env/</link>
      <pubDate>Wed, 03 Dec 2014 21:02:25 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2014/12/03/skip-before-action-on-development-env/</guid>
      <description>最近railsでapi開発をしていて、もちろんテストコード書いてるんだけど、 たまにブラウザからGETリクエスト送ってサクッとjsonの中を見</description>
    </item>
    
    <item>
      <title>railsでmysqlのbooleanなカラムをエイリアスで扱う時の注意事</title>
      <link>https://blog.takady.net/blog/2014/12/02/rails-mysql-boolean/</link>
      <pubDate>Tue, 02 Dec 2014 18:07:11 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2014/12/02/rails-mysql-boolean/</guid>
      <description>rails+mysqlな環境では、booleanで定義したカラムはtinyint(1)で作られ、中身はtrue/falseではなく、0/1が</description>
    </item>
    
    <item>
      <title>turnipを使ってシナリオテストを自動化</title>
      <link>https://blog.takady.net/blog/2014/11/26/turnip/</link>
      <pubDate>Wed, 26 Nov 2014 19:17:48 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2014/11/26/turnip/</guid>
      <description>turnipは、シナリオテストを自然言語風のDSLで記述・実行させることができるruby製のツールです。 ここでは、wikipediaを開いて</description>
    </item>
    
    <item>
      <title>rubyのloggerでlogのヘッダを出力しない</title>
      <link>https://blog.takady.net/blog/2014/11/22/disable-ruby-log-header/</link>
      <pubDate>Sat, 22 Nov 2014 13:11:18 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2014/11/22/disable-ruby-log-header/</guid>
      <description>rubyのLoggerを使っていると、Logger.newした際に生成されるlogファイルには、デフォルトで下記のようなヘッダが出力される。</description>
    </item>
    
    <item>
      <title>railsで、複数の出力先にlogを出力する</title>
      <link>https://blog.takady.net/blog/2014/11/21/rails-logger-broadcast/</link>
      <pubDate>Fri, 21 Nov 2014 18:57:07 +0000</pubDate>
      
      <guid>https://blog.takady.net/blog/2014/11/21/rails-logger-broadcast/</guid>
      <description>railsアプリケーションで、error以上のレベルのログだけ、２箇所にログを出力したいと思った。 前提 ruby 2.1.2 rails 4.1.4 方法 まず、複数の出力先にロギン</description>
    </item>
    
  </channel>
</rss>
